{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The note when I'm Learning TLPI (The Linux Programming Interface) \u00b6 This is the note and the source code of my solution for TLPI (The Linux Programming Interface) Cause I'm reading the Chinese version of the book, the note is mainly be written in Chinese. Still work in progress. The original example source code and header file could be downloaded at auther's website You could clone the whole repository and compile the code yourself. $ git clone https://github.com/panxiao81/learn-tlpi $ sudo apt install build-essential libcap-dev libacl1-dev libselinux1-dev libseccomp-dev gcc-multilib $ cd learn-tlpi && make The source code I've written is under src/ folder. This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"README"},{"location":"#the-note-when-im-learning-tlpi-the-linux-programming-interface","text":"This is the note and the source code of my solution for TLPI (The Linux Programming Interface) Cause I'm reading the Chinese version of the book, the note is mainly be written in Chinese. Still work in progress. The original example source code and header file could be downloaded at auther's website You could clone the whole repository and compile the code yourself. $ git clone https://github.com/panxiao81/learn-tlpi $ sudo apt install build-essential libcap-dev libacl1-dev libselinux1-dev libseccomp-dev gcc-multilib $ cd learn-tlpi && make The source code I've written is under src/ folder. This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"The note when I'm Learning TLPI (The Linux Programming Interface)"},{"location":"chap10/","text":"Cheaper 10 \u65f6\u95f4 \u00b6 \u8bcd\u6c47\u901f\u67e5 \u00b6 \u65e5\u5386\u65f6\u95f4\uff1acalendar time \u6d41\u901d\u65f6\u95f4\uff1aelapsed time \u6302\u949f\u65f6\u95f4\uff1awall clock \u56fd\u9645\u5316\uff1ainternationalization \u7b14\u8bb0 \u00b6 \u7a0b\u5e8f\u4f1a\u5173\u6ce8\u4e24\u79cd\u65f6\u95f4\u7c7b\u578b\uff1a \u771f\u5b9e\u65f6\u95f4\uff1a\u8be5\u65f6\u95f4\u53c8\u5206\u4e24\u4e2a\u8d77\u70b9\uff0c\u4e00\u662f\u4ece\u67d0\u4e2a\u6807\u51c6\u70b9\u8ba1\u7b97\uff0c\u4e8c\u662f\u4ece\u8fdb\u7a0b\u751f\u547d\u5468\u671f\u5185\u7684\u67d0\u4e2a\u8282\u70b9\u3002\u524d\u8005\u5373\u4e3a\u65e5\u5386\u65f6\u95f4\uff0c\u540e\u8005\u79f0\u4e3a\u6d41\u901d\u65f6\u95f4\u6216\u6302\u949f\u65f6\u95f4 \u8fdb\u7a0b\u65f6\u95f4\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u6240\u4f7f\u7528\u7684 CPU \u65f6\u95f4\u603b\u91cf \u591a\u6570\u8ba1\u7b97\u673a\u4e2d\u90fd\u5177\u6709\u786c\u4ef6\u65f6\u949f\uff0c\u5185\u6838\u6839\u636e\u5185\u6838\u65f6\u949f\u8ba1\u7b97\u771f\u5b9e\u65f6\u95f4\u548c\u8fdb\u7a0b\u65f6\u95f4\u3002 \u65e5\u5386\u65f6\u95f4 \u00b6 UNIX \u7cfb\u7edf\u5185\u90e8\u8868\u793a\u65f6\u95f4\u7684\u65b9\u6cd5\u662f\u4ee5 Epoch \u4ee5\u6765\u7684\u79d2\u6570\u6765\u8ba1\u7b97\u7684\uff0c\u5373 UTC \u65f6\u95f4\u7684 1970 \u5e74 1 \u6708 1 \u65e5\u51cc\u6668 0 \u70b9\u3002 \u65e5\u5386\u65f6\u95f4\u4f7f\u7528 time_t \u7c7b\u578b\u5b58\u50a8\u3002 \u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\uff0c time_t \u662f\u4e00\u4e2a signed int \u7c7b\u578b\u7684\u6570\uff0c\u6700\u5927\u7684\u8868\u793a\u8303\u56f4\u5230 2038 \u5e74 1 \u6708 19 \u53f7 03:14:07\uff0c\u5373 2038 \u5e74\u95ee\u9898\u3002 #inlcude <sys/time.h> int gettimeofday ( struct timeval * tv , struct timezone * tz ); \u4ee5\u4e0a syscall \u5728 tv \u6307\u5411\u7684\u7ed3\u6784\u4f53\u4e2d\u8fd4\u56de\u65e5\u5386\u65f6\u95f4\u3002 tv \u662f\u6307\u5411\u5982\u4e0b\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u6307\u9488 struct timeval { time_t tv_sec ; /* Seconds since 00:00:00, 1 Jan. 1970 UTC */ suseconds_t tv_usec ; /* Additional microseconds (long int) */ } tv_usec \u5b57\u6bb5\u53ef\u63d0\u4f9b\u5fae\u79d2\u7ea7\u7684\u7cbe\u5ea6\uff0c\u4f46\u7cbe\u786e\u5ea6\u53d6\u51b3\u4e8e\u5e73\u53f0\u5b9e\u73b0\u3002\u5728\u73b0\u4ee3 x86 \u5e73\u53f0\u4e0a\uff0c\u5b83\u7684\u786e\u53ef\u4ee5\u63d0\u4f9b\u5fae\u79d2\u7ea7\u7cbe\u5ea6\u3002 tz \u53c2\u6570\u662f\u5386\u53f2\u4ea7\u7269\uff0c\u65e9\u671f UNIX \u7528\u6765\u83b7\u53d6\u7cfb\u7edf\u7684\u65f6\u533a\u4fe1\u606f\uff0c\u76ee\u524d\u5df2\u5e9f\u5f03\uff0c\u5e94\u8bbe\u7f6e\u4e3a NULL\u3002 tz \u5728 Linux \u5185\u6838\u4e2d\u529f\u80fd\u4ece\u672a\u6070\u5f53\u7684\u88ab\u5b9e\u73b0\u8fc7\uff0c\u4fdd\u7559\u6b64\u53c2\u6570\u4ec5\u4e3a\u517c\u5bb9\u6027\u8003\u8651\u3002 (\u8be6\u89c1 gettimeofday(2)) #include <time.h> time_t time ( time_t * timep ); \u8be5 syscall \u8fd4\u56de\u81ea Epoch \u4ee5\u6765\u7684\u79d2\u6570\uff0c\u5373\u548c timeval \u7ed3\u6784\u4f53\u4e2d tv_sec \u7684\u6570\u503c\u76f8\u540c\u3002 \u82e5 timep \u53c2\u6570\u4e0d\u4e3a NULL\uff0c\u8fd8\u4f1a\u5c06\u8be5\u503c\u7f6e\u4e8e timep \u6307\u5411\u7684\u4f4d\u7f6e\u3002 \u8be5\u51fd\u6570\u53ea\u53ef\u80fd\u56e0\u4e3a timep \u53c2\u6570\u4e3a\u4e00\u4e2a\u65e0\u6548\u5730\u5740\u65f6\u62a5\u9519\uff0c\u56e0\u6b64\u5f80\u5f80\u4f1a\u4f7f\u7528\u5982\u4e0b\u7528\u6cd5\u4e14\u4e0d\u505a\u9519\u8bef\u68c0\u67e5\uff1a t = time ( NULL ); \u65f6\u95f4\u8f6c\u6362\u51fd\u6570 \u00b6 \u4e3a\u5c06 time_t \u8f6c\u6362\u4e3a\u53ef\u6253\u5370\u7684\u683c\u5f0f\uff0c\u5b58\u5728\u6807\u51c6\u5e93\u51fd\u6570\uff1a #include <time.h> char * ctime ( const time_t * timep ); \u5c06\u4e00\u4e2a\u6307\u5411 time_t \u7c7b\u578b\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u8fd4\u56de\u4e00\u4e2a 26 \u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4e3a\u6807\u51c6\u683c\u5f0f\u7684\u65e5\u671f\u4e0e\u65f6\u95f4\u3002\u8be5\u51fd\u6570\u8f6c\u6362\u65f6\u4f1a\u8003\u8651\u672c\u5730\u65f6\u533a\u548c\u590f\u4ee4\u65f6\u8bbe\u7f6e\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u6307\u9488\u6307\u5411\u7684\u533a\u57df\u4e3a\u9759\u6001\u5206\u914d\u7684\uff0c\u4e0b\u4e00\u6b21\u8c03\u7528\u4f1a\u88ab\u8986\u76d6\u3002 SUSv3 \u89c4\u5b9a ctime() \u3001 gmtime() \u3001 localtime() \u548c asctime() \u90fd\u53ef\u80fd\u8986\u76d6\u5176\u4ed6\u51fd\u6570\u8fd4\u56de\u4e14\u9759\u6001\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u6362\u8a00\u4e4b\u5373\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u5171\u4eab\u540c\u4e00\u4e2a\u9759\u6001\u5206\u914d\u7684\u5730\u5740\u7a7a\u95f4\u3002 gmtime() \u548c localtime() \u53ef\u5c06 time_t \u503c\u8f6c\u6362\u4e3a\u5206\u89e3\u65f6\u95f4\uff0c\u5373\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u9759\u6001\u5206\u914d\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u5c06\u5206\u89e3\u7684\u65f6\u95f4\u7f6e\u4e8e\u6b64\u7ed3\u6784\u4f53\u5e76\u8fd4\u56de\u3002 #include <time.h> struct tm * gmtime ( const time_t * timep ); struct tm * localtime ( const time_t * timep ); gmtime() \u5c06\u65e5\u5386\u65f6\u95f4\u8f6c\u6362\u4e3a\u5bf9\u5e94 UTC \u7684\u5206\u89e3\u65f6\u95f4\uff0c localtime() \u5219\u989d\u5916\u8003\u8651\u65f6\u533a\u548c\u590f\u4ee4\u65f6\uff0c\u8fd4\u56de\u5bf9\u5e94\u672c\u5730\u65f6\u95f4\u7684\u5206\u89e3\u65f6\u95f4\u3002 \u8fd4\u56de\u7684\u7ed3\u6784\u4e3a\u9759\u6001\u5206\u914d\u3002 gmtime() \u4e2d\u7684 gm \u53d6\u81ea GMT \u5373\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4 \u8fd4\u56de\u7684\u7ed3\u6784\u4f53\u5982\u4e0b struct tm { int tm_sec ; /* Seconds (1-60) */ int tm_min ; /* Minutes (0-59) */ int tm_hour ; /* Hours (0-23) */ int tm_mday ; /* Day of the month (1-31) */ int tm_mon ; /* Month (1-11) */ int tm_year ; /* Year since 1900 */ int tm_wday ; /* Day of the week (Sunday = 0) */ int tm_yday ; /* Day in the year (0-365; 1 Jan = 0) intg tm_isdst; /* Daylight saving time flag > 0: DST is in effect; = 0: DST is not effect; < 0; DST information not available */ } tm_sec \u6700\u5927\u8bbe\u4e3a 60 \u4e3a\u4e86\u8003\u8651\u95f0\u79d2\u3002 #include <time.h> time_t mktime ( struct tm * timeptr ); mktime() \u5c06\u672c\u5730\u7684\u5206\u89e3\u65f6\u95f4\u7ffb\u8bd1\u6210 time_t \u503c\uff0c\u5c06\u5176\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002 \u8be5\u51fd\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u7ed3\u6784\u4f53\uff0c\u4f7f\u5176\u80fd\u591f\u4fdd\u8bc1\u5b57\u6bb5\u5408\u6cd5\uff0c\u4e14\u8c03\u6574\u4f1a\u53d1\u751f\u5728 mktime() \u8fd4\u56de time_t \u7684\u503c\u4e4b\u524d\u3002 \u8be5\u51fd\u6570\u8fd8\u53ef\u7528\u4e8e\u5206\u89e3\u8ba1\u7b97\u65f6\u95f4\uff0c\u5373\u6ea2\u51fa\u7684\u5b57\u6bb5\u4f1a\u88ab\u6b63\u5e38\u8ba1\u7b97\uff0c\u751a\u81f3\u53ef\u5c06\u5b57\u6bb5\u7f6e\u4e3a\u8d1f\u503c\u3002 \u82e5 tm_isdst \u5b57\u6bb5\u4e3a\u8d1f\uff0c\u5219\u51fd\u6570\u4f1a\u8bd5\u56fe\u5224\u65ad\u5f53\u524d\u662f\u5426\u6267\u884c\u590f\u4ee4\u65f6\uff0c\u4e14\u5728\u8c03\u7528\u5b8c\u6210\u540e\u5c06\u5b57\u6bb5\u7f6e\u4e3a\u9002\u5f53\u503c\u3002 \u5206\u89e3\u65f6\u95f4\u548c\u6253\u5370\u683c\u5f0f\u95f4\u7684\u8f6c\u6362 \u00b6 #include <time.h> char * asctime ( const struct tm * timeptr ); \u53c2\u6570\u63d0\u4f9b\u4e00\u4e2a\u6307\u5411 tm \u7ed3\u6784\u7684\u6307\u9488\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e00\u4e2a\u9759\u6001\u5206\u914d\u7684\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e0e ctime() \u76f8\u540c\u3002 \u8be5\u51fd\u6570\u5bf9 tm \u539f\u5c01\u4e0d\u52a8\u8f6c\u6362\uff0c\u4e0d\u53d7\u65f6\u533a\u5f71\u54cd\u3002 #include <time.h> size_t strftime ( char * outstr , size_t maxsize , const char * format , const struct tm * timeptr ); strftime() \u53ef\u4ee5\u5728\u8f6c\u6362\u6253\u5370\u683c\u5f0f\u65f6\u4f5c\u66f4\u7cbe\u7ec6\u7684\u63a7\u5236\uff0c\u8be5\u51fd\u6570\u4f1a\u5c06\u5b57\u7b26\u4e32\u7f6e\u4e8e outstr \u6307\u5411\u7684\u7f13\u51b2\u533a\u4e2d\u3002 maxsize \u6307\u5b9a\u4e86\u7f13\u51b2\u533a\u7684\u6700\u5927\u957f\u5ea6\uff0c\u4e14\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u4e0d\u542b\u6709\u6362\u884c\u7b26\u3002 \u82e5\u6210\u529f\uff0c\u51fd\u6570\u8fd4\u56de outstr \u6307\u5b9a\u7684\u5b57\u8282\u957f\u5ea6\uff0c\u4e0d\u5305\u542b\u7ec8\u6b62\u7a7a\u5b57\u8282\uff0c\u82e5\u5b57\u7b26\u4e32\u957f\u5ea6\u8d85\u8fc7 maxsize \u957f\u5ea6\uff0c\u5219\u8fd4\u56de 0 \u8868\u793a\u51fa\u9519\uff0c\u4e14\u6b64\u65f6 outstr \u7684\u5185\u5bb9\u4e0d\u786e\u5b9a\u3002 format \u4e3a\u4e00\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u7c7b\u4f3c printf \u7684\u65b9\u5f0f\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u8be5\u8f6c\u6362\u8bf4\u660e\u7b26\u53ef\u5728 strftime(3) manpage \u4e2d\u67e5\u770b\u3002 #define _XOPEN_SOURCE #include <time.h> char * strptime ( const char * str , const char * format , struct tm * timeptr ); \u8be5\u51fd\u6570\u662f strftime() \u7684\u9006\u5411\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5206\u89e3\u65f6\u95f4\u3002 \u82e5\u6210\u529f\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u6307\u9488\uff0c\u6307\u5411 str \u4e2d\u4e0b\u4e00\u4e2a\u672a\u7ecf\u5904\u7406\u7684\u5b57\u7b26\u3002\u82e5\u65e0\u6cd5\u5339\u914d\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de NULL \u8868\u793a\u9519\u8bef\u3002 \u683c\u5f0f\u89c4\u8303\u7c7b\u4f3c\u4e8e scanf \uff0c \u8f6c\u6362\u8bf4\u660e\u7b26\u53ef\u53c2\u9605 strptime(3) manpage \u624b\u518c\u3002 \u65f6\u533a \u00b6 \u65f6\u533a\u4fe1\u606f\u7531\u7cfb\u7edf\u63d0\u4f9b\uff0c\u7edf\u4e00\u7ef4\u62a4\uff0c\u901a\u5e38\u4fdd\u5b58\u5728 /usr/share/zoneinfo \u4e2d\u3002\u672c\u5730\u65f6\u95f4\u7531 /etc/localtime \u5b9a\u4e49\uff0c\u901a\u5e38\u662f\u5230 /usr/share/zoneinfo \u4e0b\u4e00\u4e2a\u6587\u4ef6\u7684\u7b26\u53f7\u94fe\u63a5\u3002 \u5bf9\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\u6307\u5b9a\u65f6\u533a\uff0c\u901a\u8fc7 TZ \u73af\u5883\u53d8\u91cf\u6765\u5b8c\u6210\u3002 \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u65f6\uff0c\u51fd\u6570\u4f1a\u8c03\u7528 tzset(3) \uff0c\u5bf9\u4e0b\u5217\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002 char * tzname [ 2 ]; /* Name of timezone and alternate (DST) timezone */ int daylight ; /* Nonzero if there is an alternate (DST) timezone */ long timezone ; /* Seconds difference between UTC and local standard time */ \u82e5 TZ \u73af\u5883\u53d8\u91cf\u672a\u8bbe\u7f6e\uff0c\u5219\u91c7\u7528 /etc/localtime \u4e2d\u7684\u9ed8\u8ba4\u65f6\u533a\uff0c\u82e5\u65e0\u6cd5\u5339\u914d\u6587\u4ef6\uff0c\u5219\u91c7\u7528 UTC \u65f6\u95f4\u3002 \u5730\u533a \u00b6 \u4e16\u754c\u5404\u56fd\u5728\u5bf9\u65f6\u95f4\u7684\u8868\u793a\u6cd5\u7b49\u4fe1\u606f\u4e2d\u4e60\u4fd7\u4e0d\u540c\uff0c\u7406\u60f3\u72b6\u6001\u4e2d\u7a0b\u5e8f\u5e94\u5904\u7406\u8fd9\u4e9b\u672c\u5730\u5316\u95ee\u9898\uff0c\u8fd9\u5373\u4e3a internationalization\uff0c\u5373 i18n \u5730\u533a\u4fe1\u606f\u4e5f\u7edf\u4e00\u7ef4\u62a4\uff0c\u901a\u5e38\u4fdd\u5b58\u5728 /usr/share/local \uff0c\u6709\u7684\u7cfb\u7edf\u4fdd\u5b58\u5728 /usr/lib/local \uff0c \u53ef\u4f7f\u7528 setlocale() \u8bbe\u7f6e\u548c\u67e5\u8be2\u5f53\u524d\u5730\u533a\u3002 \u672c\u4e66\u4e0d\u91cd\u70b9\u8ba8\u8bba i18n\u3002 \u66f4\u65b0\u7cfb\u7edf\u65f6\u949f \u00b6 #define _BSD_SOURCE #include <sys/time.h> int settimeofday ( const struct timeval * tv , const struct timezone * tz ); settimeofday() \u662f gettimeofday() \u7684\u9006\u5411\u3002 \u4e0e gettimeofday() \u76f8\u540c\u7684\uff0ctz \u53c2\u6570\u5e94\u6307\u5b9a\u4e3a NULL\u3002 settimeofday() \u4f1a\u5bfc\u81f4\u7cfb\u7edf\u65f6\u95f4\u7a81\u7136\u53d8\u5316\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f71\u54cd\u4e00\u4e9b\u5e94\u7528\uff0c\u82e5\u5bf9\u65f6\u95f4\u8fdb\u884c\u5fae\u5c0f\u8c03\u6574\u5982\u8c03\u6574\u51e0\u79d2\u949f\u8bef\u5dee\uff0c\u901a\u5e38\u4f7f\u7528\u5e93\u51fd\u6570 adjtime() \uff0c\u8be5\u51fd\u6570\u5c06\u7cfb\u7edf\u65f6\u95f4\u9010\u6b65\u8c03\u6574\u5230\u6b63\u786e\u65f6\u95f4\u3002 #define _BSD_SORUCE #include <sys/time.h> int adjtime ( struct timeval * delta , struct timeval * olddelta ); delta \u6307\u5411\u4e00\u4e2a\u7ed3\u6784\uff0c\u6307\u5b9a\u9700\u8981\u8c03\u6574\u7684\u79d2\u548c\u5fae\u79d2\u6570\u3002 \u5728\u51fd\u6570\u8fd0\u884c\u65f6\u95f4\u5185\u53ef\u80fd\u65e0\u6cd5\u5b8c\u6210\u65f6\u949f\u8c03\u6574\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5269\u4f59\u7684\u65f6\u95f4\u4f1a\u5b58\u653e\u5728 olddelta \u6307\u5411\u7684\u7ed3\u6784\u4f53\u4e2d\u3002\u5982\u679c\u4e0d\u5173\u5fc3\u8fd9\u4e2a\u503c\u53ef\u4ee5\u5c06\u5176\u7f6e\u4e3a NULL\u3002\u7c7b\u4f3c\u7684\uff0c\u82e5\u4e0d\u6253\u7b97\u77eb\u6b63\u65f6\u95f4\uff0c\u53ef\u4ee5\u6307\u5b9a delta \u53c2\u6570\u4e3a NULL\u3002 Linux \u63d0\u4f9b\u4e86\u66f4\u590d\u6742\uff0c\u66f4\u901a\u7528\u7684 adjtimex() \u7cfb\u7edf\u8c03\u7528\uff0cadjtime() \u5728 Linux \u4e0a\u57fa\u4e8e adjtimex() \u5b9e\u73b0\u3002 \u8f6f\u4ef6\u65f6\u949f jiffies \u00b6 \u65f6\u95f4\u7cbe\u5ea6\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u53d7\u9650\u4e8e\u7cfb\u7edf\u8f6f\u4ef6\u65f6\u949f\u7684\u5206\u8fa8\u7387\uff0c\u5355\u4f4d\u4e3a jiffies\uff0c\u5176\u5927\u5c0f\u662f\u5b9a\u4e49\u5728\u5185\u6838\u4e2d\u7684\u5e38\u91cf HZ\u3002\u8be5\u503c\u53ef\u7531\u5185\u6838\u53c2\u6570\u8c03\u6574\u3002 \u8fdb\u7a0b\u65f6\u95f4 \u00b6 \u5185\u6838\u628a CPU \u65f6\u95f4\u5206\u6210\u4e24\u90e8\u5206\u3002 \u7528\u6237 CPU \u65f6\u95f4\uff0c\u6307\u7528\u6237\u6a21\u5f0f\u4e0b\u6267\u884c\u82b1\u8d39\u7684\u65f6\u95f4\u6570\u91cf\u3002\u4e5f\u79f0\u4e3a\u865a\u62df\u65f6\u95f4\u3002\u5bf9\u4e8e\u7a0b\u5e8f\u672c\u8eab\u5373\u4e3a\u5176\u5f97\u5230 CPU \u7684\u65f6\u95f4\u3002 \u7cfb\u7edf CPU \u65f6\u95f4\u6307\u5728\u5185\u6838\u6a21\u5f0f\u4e2d\u6267\u884c\u82b1\u8d39\u7684\u65f6\u95f4\u6570\u91cf\uff0c\u8fd9\u662f\u5185\u6838\u7528\u4e8e\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u6216\u4ee3\u8868\u7a0b\u5e8f\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u7684\u65f6\u95f4 \u6709\u65f6\u8fdb\u7a0b\u65f6\u95f4\u53c8\u6307\u5904\u7406\u8fc7\u7a0b\u4e2d\u6d88\u8017\u7684\u603b CPU \u65f6\u95f4\u3002 \u53ef\u4ee5\u4f7f\u7528 time(1) \u7a0b\u5e8f\u7edf\u8ba1\u5e94\u7528\u6267\u884c\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u3002 #include <sys/times.h> clock_t times ( struct tms * buf ); \u8be5\u7cfb\u7edf\u8c03\u7528\u68c0\u7d22\u8fdb\u7a0b\u65f6\u95f4\u4fe1\u606f\uff0c\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9 buf \u6307\u5411\u7684\u7ed3\u6784\u4f53\u3002 \u8be5\u7ed3\u6784\u4f53\u7684\u7ed3\u6784\u5982\u4e0b\uff1a struct tms { clock_t tms_utime ; /* User CPU time used by caller */ clock_t tms_stime ; /* System CPU time used by caller */ clock_t tms_cutime ; /* User CPU time of all (waited for) children */ clock_t tms_cstime ; /* System CPU time of all (waited for) children */ } \u524d\u4e24\u4e2a\u5b57\u6bb5\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u5230\u76ee\u524d\u4e3a\u6b62\u4f7f\u7528\u7684\u7528\u6237\u548c\u7cfb\u7edf\u7ec4\u4ef6\u7684 CPU \u65f6\u95f4\uff0c\u6700\u540e\u4e24\u4e2a\u5b57\u6bb5\u8fd4\u56de\u7236\u8fdb\u7a0b\u6267\u884c\u7cfb\u7edf\u8c03\u7528 wait() \u7684\u6240\u6709\u5df2\u7ecf\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u4f7f\u7528\u7684 CPU \u65f6\u95f4\u3002 clock_t \u662f clock tick \u4e3a\u5355\u4f4d\u7684\u6574\u578b\u503c\uff0c\u53ef\u4ee5\u8c03\u7528 sysconf(_SC_CLK_TCK) \u83b7\u5f97\u6bcf\u79d2\u5305\u542b\u7684 tick \u6570\uff0c\u518d\u7528\u8fd9\u4e2a\u6570\u5b57\u9664\u4ee5 clock_t \u8f6c\u6362\u4e3a\u79d2\u3002 times() \u8fd4\u56de\u7684\u662f\u81ea\u8fc7\u53bb\u7684\u4efb\u610f\u65f6\u95f4\u70b9\u6d41\u901d\u7684\u4ee5 clock tick \u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\uff0cSUSv3 \u6807\u51c6\u7279\u522b\u672a\u5b9a\u4e49\u8fd9\u4e2a\u65f6\u95f4\u70b9\uff0c\u56e0\u6b64\u8fd9\u4e2a\u8fd4\u56de\u503c\u552f\u4e00\u7684\u7528\u6cd5\u662f\u8ba1\u7b97\u4e00\u5bf9 times() \u8c03\u7528\u8fd4\u56de\u503c\u7684\u5dee\uff0c\u7136\u800c\u82e5 clock_t \u6ea2\u51fa\uff0c\u5219 times() \u4f1a\u91cd\u65b0\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff0c\u56e0\u6b64\u5176\u7ed3\u679c\u4ecd\u662f\u4e0d\u53ef\u9760\u7684\u3002 #include <time.h> clock_t clock ( void ) \u51fd\u6570 clock() \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53d6\u5f97\u8fdb\u7a0b\u65f6\u95f4\u7684\u7b80\u5355\u63a5\u53e3\uff0c\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u4f7f\u7528\u7684\u603b CPU \u65f6\u95f4\u3002 \u5176\u8ba1\u91cf\u5355\u4f4d\u4e3a CLOCKS_PER_SEC \uff0c\u56e0\u6b64\u5fc5\u987b\u5148\u9664\u4ee5\u8fd9\u4e2a\u503c\u6765\u83b7\u5f97\u8fdb\u7a0b\u4f7f\u7528\u7684 CPU \u65f6\u95f4\u79d2\u6570\u3002 \u7ec3\u4e60 \u00b6 10-1 \u00b6 \u5bf9\u4e8e times() \u7684 clock_t\uff0c\u5176\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\u7684\u65f6\u95f4\u4e3a \\(2^{32} \\div 100\\) \u5373 42949672.96 \u79d2\u3002\u7ea6\u7b49\u4e8e 497 \u5929\uff0c1.36 \u5e74\u3002 \u5bf9\u4e8e clock() \u7684 \u8fd4\u56de\u503c\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\u7684\u65f6\u95f4\u4e3a \\(2^{32} \\div 10000\\) \uff0c\u5373 429496.7296 \u79d2\uff0c\u7ea6\u4e3a 4.97 \u5929\u3002","title":"\u7b2c\u5341\u7ae0-\u65f6\u95f4"},{"location":"chap10/#cheaper-10","text":"","title":"Cheaper 10 \u65f6\u95f4"},{"location":"chap10/#_1","text":"\u65e5\u5386\u65f6\u95f4\uff1acalendar time \u6d41\u901d\u65f6\u95f4\uff1aelapsed time \u6302\u949f\u65f6\u95f4\uff1awall clock \u56fd\u9645\u5316\uff1ainternationalization","title":"\u8bcd\u6c47\u901f\u67e5"},{"location":"chap10/#_2","text":"\u7a0b\u5e8f\u4f1a\u5173\u6ce8\u4e24\u79cd\u65f6\u95f4\u7c7b\u578b\uff1a \u771f\u5b9e\u65f6\u95f4\uff1a\u8be5\u65f6\u95f4\u53c8\u5206\u4e24\u4e2a\u8d77\u70b9\uff0c\u4e00\u662f\u4ece\u67d0\u4e2a\u6807\u51c6\u70b9\u8ba1\u7b97\uff0c\u4e8c\u662f\u4ece\u8fdb\u7a0b\u751f\u547d\u5468\u671f\u5185\u7684\u67d0\u4e2a\u8282\u70b9\u3002\u524d\u8005\u5373\u4e3a\u65e5\u5386\u65f6\u95f4\uff0c\u540e\u8005\u79f0\u4e3a\u6d41\u901d\u65f6\u95f4\u6216\u6302\u949f\u65f6\u95f4 \u8fdb\u7a0b\u65f6\u95f4\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u6240\u4f7f\u7528\u7684 CPU \u65f6\u95f4\u603b\u91cf \u591a\u6570\u8ba1\u7b97\u673a\u4e2d\u90fd\u5177\u6709\u786c\u4ef6\u65f6\u949f\uff0c\u5185\u6838\u6839\u636e\u5185\u6838\u65f6\u949f\u8ba1\u7b97\u771f\u5b9e\u65f6\u95f4\u548c\u8fdb\u7a0b\u65f6\u95f4\u3002","title":"\u7b14\u8bb0"},{"location":"chap10/#_3","text":"UNIX \u7cfb\u7edf\u5185\u90e8\u8868\u793a\u65f6\u95f4\u7684\u65b9\u6cd5\u662f\u4ee5 Epoch \u4ee5\u6765\u7684\u79d2\u6570\u6765\u8ba1\u7b97\u7684\uff0c\u5373 UTC \u65f6\u95f4\u7684 1970 \u5e74 1 \u6708 1 \u65e5\u51cc\u6668 0 \u70b9\u3002 \u65e5\u5386\u65f6\u95f4\u4f7f\u7528 time_t \u7c7b\u578b\u5b58\u50a8\u3002 \u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\uff0c time_t \u662f\u4e00\u4e2a signed int \u7c7b\u578b\u7684\u6570\uff0c\u6700\u5927\u7684\u8868\u793a\u8303\u56f4\u5230 2038 \u5e74 1 \u6708 19 \u53f7 03:14:07\uff0c\u5373 2038 \u5e74\u95ee\u9898\u3002 #inlcude <sys/time.h> int gettimeofday ( struct timeval * tv , struct timezone * tz ); \u4ee5\u4e0a syscall \u5728 tv \u6307\u5411\u7684\u7ed3\u6784\u4f53\u4e2d\u8fd4\u56de\u65e5\u5386\u65f6\u95f4\u3002 tv \u662f\u6307\u5411\u5982\u4e0b\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u6307\u9488 struct timeval { time_t tv_sec ; /* Seconds since 00:00:00, 1 Jan. 1970 UTC */ suseconds_t tv_usec ; /* Additional microseconds (long int) */ } tv_usec \u5b57\u6bb5\u53ef\u63d0\u4f9b\u5fae\u79d2\u7ea7\u7684\u7cbe\u5ea6\uff0c\u4f46\u7cbe\u786e\u5ea6\u53d6\u51b3\u4e8e\u5e73\u53f0\u5b9e\u73b0\u3002\u5728\u73b0\u4ee3 x86 \u5e73\u53f0\u4e0a\uff0c\u5b83\u7684\u786e\u53ef\u4ee5\u63d0\u4f9b\u5fae\u79d2\u7ea7\u7cbe\u5ea6\u3002 tz \u53c2\u6570\u662f\u5386\u53f2\u4ea7\u7269\uff0c\u65e9\u671f UNIX \u7528\u6765\u83b7\u53d6\u7cfb\u7edf\u7684\u65f6\u533a\u4fe1\u606f\uff0c\u76ee\u524d\u5df2\u5e9f\u5f03\uff0c\u5e94\u8bbe\u7f6e\u4e3a NULL\u3002 tz \u5728 Linux \u5185\u6838\u4e2d\u529f\u80fd\u4ece\u672a\u6070\u5f53\u7684\u88ab\u5b9e\u73b0\u8fc7\uff0c\u4fdd\u7559\u6b64\u53c2\u6570\u4ec5\u4e3a\u517c\u5bb9\u6027\u8003\u8651\u3002 (\u8be6\u89c1 gettimeofday(2)) #include <time.h> time_t time ( time_t * timep ); \u8be5 syscall \u8fd4\u56de\u81ea Epoch \u4ee5\u6765\u7684\u79d2\u6570\uff0c\u5373\u548c timeval \u7ed3\u6784\u4f53\u4e2d tv_sec \u7684\u6570\u503c\u76f8\u540c\u3002 \u82e5 timep \u53c2\u6570\u4e0d\u4e3a NULL\uff0c\u8fd8\u4f1a\u5c06\u8be5\u503c\u7f6e\u4e8e timep \u6307\u5411\u7684\u4f4d\u7f6e\u3002 \u8be5\u51fd\u6570\u53ea\u53ef\u80fd\u56e0\u4e3a timep \u53c2\u6570\u4e3a\u4e00\u4e2a\u65e0\u6548\u5730\u5740\u65f6\u62a5\u9519\uff0c\u56e0\u6b64\u5f80\u5f80\u4f1a\u4f7f\u7528\u5982\u4e0b\u7528\u6cd5\u4e14\u4e0d\u505a\u9519\u8bef\u68c0\u67e5\uff1a t = time ( NULL );","title":"\u65e5\u5386\u65f6\u95f4"},{"location":"chap10/#_4","text":"\u4e3a\u5c06 time_t \u8f6c\u6362\u4e3a\u53ef\u6253\u5370\u7684\u683c\u5f0f\uff0c\u5b58\u5728\u6807\u51c6\u5e93\u51fd\u6570\uff1a #include <time.h> char * ctime ( const time_t * timep ); \u5c06\u4e00\u4e2a\u6307\u5411 time_t \u7c7b\u578b\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u8fd4\u56de\u4e00\u4e2a 26 \u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4e3a\u6807\u51c6\u683c\u5f0f\u7684\u65e5\u671f\u4e0e\u65f6\u95f4\u3002\u8be5\u51fd\u6570\u8f6c\u6362\u65f6\u4f1a\u8003\u8651\u672c\u5730\u65f6\u533a\u548c\u590f\u4ee4\u65f6\u8bbe\u7f6e\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u6307\u9488\u6307\u5411\u7684\u533a\u57df\u4e3a\u9759\u6001\u5206\u914d\u7684\uff0c\u4e0b\u4e00\u6b21\u8c03\u7528\u4f1a\u88ab\u8986\u76d6\u3002 SUSv3 \u89c4\u5b9a ctime() \u3001 gmtime() \u3001 localtime() \u548c asctime() \u90fd\u53ef\u80fd\u8986\u76d6\u5176\u4ed6\u51fd\u6570\u8fd4\u56de\u4e14\u9759\u6001\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u6362\u8a00\u4e4b\u5373\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u5171\u4eab\u540c\u4e00\u4e2a\u9759\u6001\u5206\u914d\u7684\u5730\u5740\u7a7a\u95f4\u3002 gmtime() \u548c localtime() \u53ef\u5c06 time_t \u503c\u8f6c\u6362\u4e3a\u5206\u89e3\u65f6\u95f4\uff0c\u5373\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u9759\u6001\u5206\u914d\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u5c06\u5206\u89e3\u7684\u65f6\u95f4\u7f6e\u4e8e\u6b64\u7ed3\u6784\u4f53\u5e76\u8fd4\u56de\u3002 #include <time.h> struct tm * gmtime ( const time_t * timep ); struct tm * localtime ( const time_t * timep ); gmtime() \u5c06\u65e5\u5386\u65f6\u95f4\u8f6c\u6362\u4e3a\u5bf9\u5e94 UTC \u7684\u5206\u89e3\u65f6\u95f4\uff0c localtime() \u5219\u989d\u5916\u8003\u8651\u65f6\u533a\u548c\u590f\u4ee4\u65f6\uff0c\u8fd4\u56de\u5bf9\u5e94\u672c\u5730\u65f6\u95f4\u7684\u5206\u89e3\u65f6\u95f4\u3002 \u8fd4\u56de\u7684\u7ed3\u6784\u4e3a\u9759\u6001\u5206\u914d\u3002 gmtime() \u4e2d\u7684 gm \u53d6\u81ea GMT \u5373\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4 \u8fd4\u56de\u7684\u7ed3\u6784\u4f53\u5982\u4e0b struct tm { int tm_sec ; /* Seconds (1-60) */ int tm_min ; /* Minutes (0-59) */ int tm_hour ; /* Hours (0-23) */ int tm_mday ; /* Day of the month (1-31) */ int tm_mon ; /* Month (1-11) */ int tm_year ; /* Year since 1900 */ int tm_wday ; /* Day of the week (Sunday = 0) */ int tm_yday ; /* Day in the year (0-365; 1 Jan = 0) intg tm_isdst; /* Daylight saving time flag > 0: DST is in effect; = 0: DST is not effect; < 0; DST information not available */ } tm_sec \u6700\u5927\u8bbe\u4e3a 60 \u4e3a\u4e86\u8003\u8651\u95f0\u79d2\u3002 #include <time.h> time_t mktime ( struct tm * timeptr ); mktime() \u5c06\u672c\u5730\u7684\u5206\u89e3\u65f6\u95f4\u7ffb\u8bd1\u6210 time_t \u503c\uff0c\u5c06\u5176\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002 \u8be5\u51fd\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u7ed3\u6784\u4f53\uff0c\u4f7f\u5176\u80fd\u591f\u4fdd\u8bc1\u5b57\u6bb5\u5408\u6cd5\uff0c\u4e14\u8c03\u6574\u4f1a\u53d1\u751f\u5728 mktime() \u8fd4\u56de time_t \u7684\u503c\u4e4b\u524d\u3002 \u8be5\u51fd\u6570\u8fd8\u53ef\u7528\u4e8e\u5206\u89e3\u8ba1\u7b97\u65f6\u95f4\uff0c\u5373\u6ea2\u51fa\u7684\u5b57\u6bb5\u4f1a\u88ab\u6b63\u5e38\u8ba1\u7b97\uff0c\u751a\u81f3\u53ef\u5c06\u5b57\u6bb5\u7f6e\u4e3a\u8d1f\u503c\u3002 \u82e5 tm_isdst \u5b57\u6bb5\u4e3a\u8d1f\uff0c\u5219\u51fd\u6570\u4f1a\u8bd5\u56fe\u5224\u65ad\u5f53\u524d\u662f\u5426\u6267\u884c\u590f\u4ee4\u65f6\uff0c\u4e14\u5728\u8c03\u7528\u5b8c\u6210\u540e\u5c06\u5b57\u6bb5\u7f6e\u4e3a\u9002\u5f53\u503c\u3002","title":"\u65f6\u95f4\u8f6c\u6362\u51fd\u6570"},{"location":"chap10/#_5","text":"#include <time.h> char * asctime ( const struct tm * timeptr ); \u53c2\u6570\u63d0\u4f9b\u4e00\u4e2a\u6307\u5411 tm \u7ed3\u6784\u7684\u6307\u9488\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e00\u4e2a\u9759\u6001\u5206\u914d\u7684\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e0e ctime() \u76f8\u540c\u3002 \u8be5\u51fd\u6570\u5bf9 tm \u539f\u5c01\u4e0d\u52a8\u8f6c\u6362\uff0c\u4e0d\u53d7\u65f6\u533a\u5f71\u54cd\u3002 #include <time.h> size_t strftime ( char * outstr , size_t maxsize , const char * format , const struct tm * timeptr ); strftime() \u53ef\u4ee5\u5728\u8f6c\u6362\u6253\u5370\u683c\u5f0f\u65f6\u4f5c\u66f4\u7cbe\u7ec6\u7684\u63a7\u5236\uff0c\u8be5\u51fd\u6570\u4f1a\u5c06\u5b57\u7b26\u4e32\u7f6e\u4e8e outstr \u6307\u5411\u7684\u7f13\u51b2\u533a\u4e2d\u3002 maxsize \u6307\u5b9a\u4e86\u7f13\u51b2\u533a\u7684\u6700\u5927\u957f\u5ea6\uff0c\u4e14\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u4e0d\u542b\u6709\u6362\u884c\u7b26\u3002 \u82e5\u6210\u529f\uff0c\u51fd\u6570\u8fd4\u56de outstr \u6307\u5b9a\u7684\u5b57\u8282\u957f\u5ea6\uff0c\u4e0d\u5305\u542b\u7ec8\u6b62\u7a7a\u5b57\u8282\uff0c\u82e5\u5b57\u7b26\u4e32\u957f\u5ea6\u8d85\u8fc7 maxsize \u957f\u5ea6\uff0c\u5219\u8fd4\u56de 0 \u8868\u793a\u51fa\u9519\uff0c\u4e14\u6b64\u65f6 outstr \u7684\u5185\u5bb9\u4e0d\u786e\u5b9a\u3002 format \u4e3a\u4e00\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u7c7b\u4f3c printf \u7684\u65b9\u5f0f\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u8be5\u8f6c\u6362\u8bf4\u660e\u7b26\u53ef\u5728 strftime(3) manpage \u4e2d\u67e5\u770b\u3002 #define _XOPEN_SOURCE #include <time.h> char * strptime ( const char * str , const char * format , struct tm * timeptr ); \u8be5\u51fd\u6570\u662f strftime() \u7684\u9006\u5411\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5206\u89e3\u65f6\u95f4\u3002 \u82e5\u6210\u529f\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u6307\u9488\uff0c\u6307\u5411 str \u4e2d\u4e0b\u4e00\u4e2a\u672a\u7ecf\u5904\u7406\u7684\u5b57\u7b26\u3002\u82e5\u65e0\u6cd5\u5339\u914d\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de NULL \u8868\u793a\u9519\u8bef\u3002 \u683c\u5f0f\u89c4\u8303\u7c7b\u4f3c\u4e8e scanf \uff0c \u8f6c\u6362\u8bf4\u660e\u7b26\u53ef\u53c2\u9605 strptime(3) manpage \u624b\u518c\u3002","title":"\u5206\u89e3\u65f6\u95f4\u548c\u6253\u5370\u683c\u5f0f\u95f4\u7684\u8f6c\u6362"},{"location":"chap10/#_6","text":"\u65f6\u533a\u4fe1\u606f\u7531\u7cfb\u7edf\u63d0\u4f9b\uff0c\u7edf\u4e00\u7ef4\u62a4\uff0c\u901a\u5e38\u4fdd\u5b58\u5728 /usr/share/zoneinfo \u4e2d\u3002\u672c\u5730\u65f6\u95f4\u7531 /etc/localtime \u5b9a\u4e49\uff0c\u901a\u5e38\u662f\u5230 /usr/share/zoneinfo \u4e0b\u4e00\u4e2a\u6587\u4ef6\u7684\u7b26\u53f7\u94fe\u63a5\u3002 \u5bf9\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\u6307\u5b9a\u65f6\u533a\uff0c\u901a\u8fc7 TZ \u73af\u5883\u53d8\u91cf\u6765\u5b8c\u6210\u3002 \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u65f6\uff0c\u51fd\u6570\u4f1a\u8c03\u7528 tzset(3) \uff0c\u5bf9\u4e0b\u5217\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002 char * tzname [ 2 ]; /* Name of timezone and alternate (DST) timezone */ int daylight ; /* Nonzero if there is an alternate (DST) timezone */ long timezone ; /* Seconds difference between UTC and local standard time */ \u82e5 TZ \u73af\u5883\u53d8\u91cf\u672a\u8bbe\u7f6e\uff0c\u5219\u91c7\u7528 /etc/localtime \u4e2d\u7684\u9ed8\u8ba4\u65f6\u533a\uff0c\u82e5\u65e0\u6cd5\u5339\u914d\u6587\u4ef6\uff0c\u5219\u91c7\u7528 UTC \u65f6\u95f4\u3002","title":"\u65f6\u533a"},{"location":"chap10/#_7","text":"\u4e16\u754c\u5404\u56fd\u5728\u5bf9\u65f6\u95f4\u7684\u8868\u793a\u6cd5\u7b49\u4fe1\u606f\u4e2d\u4e60\u4fd7\u4e0d\u540c\uff0c\u7406\u60f3\u72b6\u6001\u4e2d\u7a0b\u5e8f\u5e94\u5904\u7406\u8fd9\u4e9b\u672c\u5730\u5316\u95ee\u9898\uff0c\u8fd9\u5373\u4e3a internationalization\uff0c\u5373 i18n \u5730\u533a\u4fe1\u606f\u4e5f\u7edf\u4e00\u7ef4\u62a4\uff0c\u901a\u5e38\u4fdd\u5b58\u5728 /usr/share/local \uff0c\u6709\u7684\u7cfb\u7edf\u4fdd\u5b58\u5728 /usr/lib/local \uff0c \u53ef\u4f7f\u7528 setlocale() \u8bbe\u7f6e\u548c\u67e5\u8be2\u5f53\u524d\u5730\u533a\u3002 \u672c\u4e66\u4e0d\u91cd\u70b9\u8ba8\u8bba i18n\u3002","title":"\u5730\u533a"},{"location":"chap10/#_8","text":"#define _BSD_SOURCE #include <sys/time.h> int settimeofday ( const struct timeval * tv , const struct timezone * tz ); settimeofday() \u662f gettimeofday() \u7684\u9006\u5411\u3002 \u4e0e gettimeofday() \u76f8\u540c\u7684\uff0ctz \u53c2\u6570\u5e94\u6307\u5b9a\u4e3a NULL\u3002 settimeofday() \u4f1a\u5bfc\u81f4\u7cfb\u7edf\u65f6\u95f4\u7a81\u7136\u53d8\u5316\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f71\u54cd\u4e00\u4e9b\u5e94\u7528\uff0c\u82e5\u5bf9\u65f6\u95f4\u8fdb\u884c\u5fae\u5c0f\u8c03\u6574\u5982\u8c03\u6574\u51e0\u79d2\u949f\u8bef\u5dee\uff0c\u901a\u5e38\u4f7f\u7528\u5e93\u51fd\u6570 adjtime() \uff0c\u8be5\u51fd\u6570\u5c06\u7cfb\u7edf\u65f6\u95f4\u9010\u6b65\u8c03\u6574\u5230\u6b63\u786e\u65f6\u95f4\u3002 #define _BSD_SORUCE #include <sys/time.h> int adjtime ( struct timeval * delta , struct timeval * olddelta ); delta \u6307\u5411\u4e00\u4e2a\u7ed3\u6784\uff0c\u6307\u5b9a\u9700\u8981\u8c03\u6574\u7684\u79d2\u548c\u5fae\u79d2\u6570\u3002 \u5728\u51fd\u6570\u8fd0\u884c\u65f6\u95f4\u5185\u53ef\u80fd\u65e0\u6cd5\u5b8c\u6210\u65f6\u949f\u8c03\u6574\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5269\u4f59\u7684\u65f6\u95f4\u4f1a\u5b58\u653e\u5728 olddelta \u6307\u5411\u7684\u7ed3\u6784\u4f53\u4e2d\u3002\u5982\u679c\u4e0d\u5173\u5fc3\u8fd9\u4e2a\u503c\u53ef\u4ee5\u5c06\u5176\u7f6e\u4e3a NULL\u3002\u7c7b\u4f3c\u7684\uff0c\u82e5\u4e0d\u6253\u7b97\u77eb\u6b63\u65f6\u95f4\uff0c\u53ef\u4ee5\u6307\u5b9a delta \u53c2\u6570\u4e3a NULL\u3002 Linux \u63d0\u4f9b\u4e86\u66f4\u590d\u6742\uff0c\u66f4\u901a\u7528\u7684 adjtimex() \u7cfb\u7edf\u8c03\u7528\uff0cadjtime() \u5728 Linux \u4e0a\u57fa\u4e8e adjtimex() \u5b9e\u73b0\u3002","title":"\u66f4\u65b0\u7cfb\u7edf\u65f6\u949f"},{"location":"chap10/#jiffies","text":"\u65f6\u95f4\u7cbe\u5ea6\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u53d7\u9650\u4e8e\u7cfb\u7edf\u8f6f\u4ef6\u65f6\u949f\u7684\u5206\u8fa8\u7387\uff0c\u5355\u4f4d\u4e3a jiffies\uff0c\u5176\u5927\u5c0f\u662f\u5b9a\u4e49\u5728\u5185\u6838\u4e2d\u7684\u5e38\u91cf HZ\u3002\u8be5\u503c\u53ef\u7531\u5185\u6838\u53c2\u6570\u8c03\u6574\u3002","title":"\u8f6f\u4ef6\u65f6\u949f jiffies"},{"location":"chap10/#_9","text":"\u5185\u6838\u628a CPU \u65f6\u95f4\u5206\u6210\u4e24\u90e8\u5206\u3002 \u7528\u6237 CPU \u65f6\u95f4\uff0c\u6307\u7528\u6237\u6a21\u5f0f\u4e0b\u6267\u884c\u82b1\u8d39\u7684\u65f6\u95f4\u6570\u91cf\u3002\u4e5f\u79f0\u4e3a\u865a\u62df\u65f6\u95f4\u3002\u5bf9\u4e8e\u7a0b\u5e8f\u672c\u8eab\u5373\u4e3a\u5176\u5f97\u5230 CPU \u7684\u65f6\u95f4\u3002 \u7cfb\u7edf CPU \u65f6\u95f4\u6307\u5728\u5185\u6838\u6a21\u5f0f\u4e2d\u6267\u884c\u82b1\u8d39\u7684\u65f6\u95f4\u6570\u91cf\uff0c\u8fd9\u662f\u5185\u6838\u7528\u4e8e\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u6216\u4ee3\u8868\u7a0b\u5e8f\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u7684\u65f6\u95f4 \u6709\u65f6\u8fdb\u7a0b\u65f6\u95f4\u53c8\u6307\u5904\u7406\u8fc7\u7a0b\u4e2d\u6d88\u8017\u7684\u603b CPU \u65f6\u95f4\u3002 \u53ef\u4ee5\u4f7f\u7528 time(1) \u7a0b\u5e8f\u7edf\u8ba1\u5e94\u7528\u6267\u884c\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u3002 #include <sys/times.h> clock_t times ( struct tms * buf ); \u8be5\u7cfb\u7edf\u8c03\u7528\u68c0\u7d22\u8fdb\u7a0b\u65f6\u95f4\u4fe1\u606f\uff0c\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9 buf \u6307\u5411\u7684\u7ed3\u6784\u4f53\u3002 \u8be5\u7ed3\u6784\u4f53\u7684\u7ed3\u6784\u5982\u4e0b\uff1a struct tms { clock_t tms_utime ; /* User CPU time used by caller */ clock_t tms_stime ; /* System CPU time used by caller */ clock_t tms_cutime ; /* User CPU time of all (waited for) children */ clock_t tms_cstime ; /* System CPU time of all (waited for) children */ } \u524d\u4e24\u4e2a\u5b57\u6bb5\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u5230\u76ee\u524d\u4e3a\u6b62\u4f7f\u7528\u7684\u7528\u6237\u548c\u7cfb\u7edf\u7ec4\u4ef6\u7684 CPU \u65f6\u95f4\uff0c\u6700\u540e\u4e24\u4e2a\u5b57\u6bb5\u8fd4\u56de\u7236\u8fdb\u7a0b\u6267\u884c\u7cfb\u7edf\u8c03\u7528 wait() \u7684\u6240\u6709\u5df2\u7ecf\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u4f7f\u7528\u7684 CPU \u65f6\u95f4\u3002 clock_t \u662f clock tick \u4e3a\u5355\u4f4d\u7684\u6574\u578b\u503c\uff0c\u53ef\u4ee5\u8c03\u7528 sysconf(_SC_CLK_TCK) \u83b7\u5f97\u6bcf\u79d2\u5305\u542b\u7684 tick \u6570\uff0c\u518d\u7528\u8fd9\u4e2a\u6570\u5b57\u9664\u4ee5 clock_t \u8f6c\u6362\u4e3a\u79d2\u3002 times() \u8fd4\u56de\u7684\u662f\u81ea\u8fc7\u53bb\u7684\u4efb\u610f\u65f6\u95f4\u70b9\u6d41\u901d\u7684\u4ee5 clock tick \u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\uff0cSUSv3 \u6807\u51c6\u7279\u522b\u672a\u5b9a\u4e49\u8fd9\u4e2a\u65f6\u95f4\u70b9\uff0c\u56e0\u6b64\u8fd9\u4e2a\u8fd4\u56de\u503c\u552f\u4e00\u7684\u7528\u6cd5\u662f\u8ba1\u7b97\u4e00\u5bf9 times() \u8c03\u7528\u8fd4\u56de\u503c\u7684\u5dee\uff0c\u7136\u800c\u82e5 clock_t \u6ea2\u51fa\uff0c\u5219 times() \u4f1a\u91cd\u65b0\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff0c\u56e0\u6b64\u5176\u7ed3\u679c\u4ecd\u662f\u4e0d\u53ef\u9760\u7684\u3002 #include <time.h> clock_t clock ( void ) \u51fd\u6570 clock() \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53d6\u5f97\u8fdb\u7a0b\u65f6\u95f4\u7684\u7b80\u5355\u63a5\u53e3\uff0c\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u4f7f\u7528\u7684\u603b CPU \u65f6\u95f4\u3002 \u5176\u8ba1\u91cf\u5355\u4f4d\u4e3a CLOCKS_PER_SEC \uff0c\u56e0\u6b64\u5fc5\u987b\u5148\u9664\u4ee5\u8fd9\u4e2a\u503c\u6765\u83b7\u5f97\u8fdb\u7a0b\u4f7f\u7528\u7684 CPU \u65f6\u95f4\u79d2\u6570\u3002","title":"\u8fdb\u7a0b\u65f6\u95f4"},{"location":"chap10/#_10","text":"","title":"\u7ec3\u4e60"},{"location":"chap10/#10-1","text":"\u5bf9\u4e8e times() \u7684 clock_t\uff0c\u5176\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\u7684\u65f6\u95f4\u4e3a \\(2^{32} \\div 100\\) \u5373 42949672.96 \u79d2\u3002\u7ea6\u7b49\u4e8e 497 \u5929\uff0c1.36 \u5e74\u3002 \u5bf9\u4e8e clock() \u7684 \u8fd4\u56de\u503c\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\u7684\u65f6\u95f4\u4e3a \\(2^{32} \\div 10000\\) \uff0c\u5373 429496.7296 \u79d2\uff0c\u7ea6\u4e3a 4.97 \u5929\u3002","title":"10-1"},{"location":"chap3/","text":"Cheaper 3 \u7cfb\u7edf\u7f16\u7a0b\u6982\u5ff5 \u00b6 \u8bcd\u6c47\u901f\u67e5 \u00b6 \u7cfb\u7edf\u8c03\u7528 System Calls \u5916\u58f3\u51fd\u6570 wrapper function \u4f8b\u7a0b routine \u6307\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u88ab\u53cd\u590d\u8c03\u7528\u548c\u8fd0\u884c\u7684\u4ee3\u7801 \u53ef\u79fb\u690d\u7684 portable \u53ef\u79fb\u690d\u6027 portabilty \u7b14\u8bb0 \u00b6 \u65e0\u8bba\u4f55\u65f6\uff0c\u53ea\u8981\u6267\u884c\u4e86\u7cfb\u7edf\u8c03\u7528\u6216\u5e93\u51fd\u6570\uff0c\u90fd\u5e94\u68c0\u67e5\u8c03\u7528\u7684\u8fd4\u56de\u72b6\u6001\u786e\u5b9a\u8c03\u7528\u662f\u5426\u6210\u529f\uff0c\u8fd9\u662f\u7f16\u7a0b\u94c1\u7387 \u8981\u6267\u884c\u5185\u6838\u6001\u4ee3\u7801\uff0c\u7a0b\u5e8f\u9700\u8981\u5c06\u7cfb\u7edf\u8c03\u7528\u590d\u5236\u5230\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u8c03\u7528\u673a\u5668\u4e2d\u65ad int 0x80 \u4f7f CPU \u5207\u6362\u5230\u5185\u6838\u6001\uff0c\u5e76\u6267\u884c\u5bc4\u5b58\u5668\u6307\u5411\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u4ee3\u7801 \u82e5\u51fa\u9519\uff0c\u5219\u5916\u58f3\u51fd\u6570\u4f7f\u7528\u8fd9\u4e2a\u503c\u8bbe\u5b9a\u5168\u5c40\u53d8\u91cf errno \u5e76\u8fd4\u56de\u4e3b\u8c03\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6574\u5f62\u503c\u7528\u4e8e\u5224\u65ad\u7cfb\u7edf\u8c03\u7528\u662f\u5426\u6210\u529f \u901a\u5e38\u5bf9\u4e8e Linux \u6765\u8bf4\uff0c\u5f53\u7cfb\u7edf\u8c03\u7528\u5931\u8d25\uff0c\u7cfb\u7edf\u8c03\u7528\u4f8b\u7a0b\u4f1a\u5bf9\u76f8\u5e94\u7684 errno \u53d6\u53cd\uff0c\u8fd4\u56de\u4e00\u4e2a\u8d1f\u503c\uff0c\u5916\u58f3\u51fd\u6570\u5bf9\u5176\u518d\u6b21\u53d6\u53cd\uff0c\u5e76\u5c06\u7ed3\u679c\u9644\u7ed9 errno \uff0c\u540c\u65f6\u8fd4\u56de -1 \u6709\u4e9b\u51fd\u6570\u4e0d\u9075\u5b88\u8fd9\u4e2a\u60ef\u4f8b\uff0c\u9700\u8981\u6ce8\u610f\u7279\u6b8a\u60c5\u51b5 \u7cfb\u7edf\u8c03\u7528\u5b58\u5728\u5f00\u9500\uff0c\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\u867d\u7136\u4e0d\u6162\uff0c\u4f46\u6bd4\u7eaf\u7cb9\u7684\u7528\u6237\u6001\u4ee3\u7801\u8981\u6162\u7684\u591a\u3002 \u5e93\u51fd\u6570\u6709\u4e9b\u4f1a\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u662f\u7cfb\u7edf\u8c03\u7528\u7684\u4e8c\u6b21\u5c01\u88c5 \u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8fd0\u884c glibc \u5e93\u6587\u4ef6\u6765\u786e\u5b9a glibc \u7248\u672c\u3002 $ ldd /bin/ls linux-vdso.so.1 ( 0x00007ffc39cee000 ) libselinux.so.1 = > /lib/x86_64-linux-gnu/libselinux.so.1 ( 0x00007f4f4f7bb000 ) libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007f4f4f593000 ) libpcre2-8.so.0 = > /lib/x86_64-linux-gnu/libpcre2-8.so.0 ( 0x00007f4f4f4fc000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007f4f4f81e000 ) $ /lib/x86_64-linux-gnu/libc.so.6 GNU C Library ( Ubuntu GLIBC 2 .35-0ubuntu3 ) stable release version 2 .35. Copyright ( C ) 2022 Free Software Foundation, Inc. This is free software ; see the source for copying conditions. There is NO warranty ; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled by GNU CC version 11 .2.0. libc ABIs: UNIQUE IFUNC ABSOLUTE For bug reporting instructions, please see: <https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs>. \u8981\u5728\u7f16\u8bd1\u671f\u786e\u5b9a GLIBC \u7248\u672c\uff0c\u53ef\u4f7f\u7528 __GLIBC__ \u548c __GLIBC_MINOR__ \u4e24\u4e2a\u5b9a\u4e49\u7684\u5e38\u91cf\uff0c\u7b2c\u4e00\u4e2a\u8fd4\u56de\u5927\u7248\u672c\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u5c0f\u7248\u672c\u53f7 \u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u53ef\u8c03\u7528 gnu_get_libc_version() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5305\u542b\u5728 gnu/libc-version.h \u4e2d\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7248\u672c\u53f7\u5b57\u7b26\u4e32\u7684\u6307\u9488 \u9519\u8bef\u68c0\u67e5 \u00b6 \u68c0\u67e5\u7cfb\u7edf\u8c03\u7528\u7684\u9519\u8bef \u00b6 \u6bcf\u4e2a\u51fd\u6570\u7684\u624b\u518c\u91cc\u90fd\u6709 ERROR \u90e8\u5206\uff0c\u53ef\u67e5\u770b\u5176\u8fd4\u56de\u503c\u54ea\u4e9b\u8868\u793a\u9519\u8bef\u3002\u5982 fd = open ( pathname , flags , mode ); if ( fd == -1 ) { /* code to handle the error */ } if ( close ( fd ) == -1 ) { /* code to handle the error */ } \u7cfb\u7edf\u8c03\u7528\u5931\u8d25\u65f6\u4f1a\u5c06\u5168\u5c40\u53d8\u91cf errno \u8bbe\u4e3a\u4e00\u4e2a\u6b63\u503c\u7528\u6765\u6807\u8bc6\u5177\u4f53\u7684\u9519\u8bef\uff0c\u5728 errno.h \u4e2d\u5305\u542b\u4e86 errno \u7684\u58f0\u660e\uff0c\u4ee5\u53ca\u4e00\u7ec4\u9519\u8bef\u7f16\u53f7\u5b9a\u4e49\u7684\u5e38\u91cf\u3002\u5982 cnt = read ( fd , buf , numbytes ); if ( cnt == -1 ) { if ( errno == EINTR ) fprintf ( stderr , \"read was interrupted by a signal \\n \" ); else { /* Some other error occurred */ } } \u5982\u679c\u7cfb\u7edf\u8c03\u7528\u6216\u51fd\u6570\u6210\u529f\uff0c\u5219 errno \u4e0d\u4f1a\u88ab\u91cd\u7f6e\u4e3a 0\uff0c\u56e0\u6b64\u5982\u679c errno \u5f53\u524d\u4e0d\u4e3a 0 \u53ef\u80fd\u662f\u4e0a\u6b21\u8c03\u7528\u5931\u8d25\u9020\u6210\u7684\u3002 \u53e6\u5916\uff0c\u6839\u636e SUSv3\uff0c\u5141\u8bb8\u51fd\u6570\u8c03\u7528\u6210\u529f\u65f6\u5c06 errno \u8bbe\u4e3a\u975e 0 \u503c\uff0c\u6807\u51c6\u7684\u505a\u6cd5\u662f\u5148\u68c0\u67e5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5426\u8fd4\u56de\u9519\u8bef\uff0c\u4e4b\u540e\u518d\u901a\u8fc7 errno \u5224\u65ad\u9519\u8bef\u539f\u56e0\u3002 \u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u5728\u8c03\u7528\u6210\u529f\u540e\u4e5f\u8fd4\u56de -1 \u8fd9\u4e9b\u7279\u6b8a\u7684\u4f8b\u5b50\u4e2d\uff0c\u5e94\u5728\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u524d\u5c06 errno \u521d\u59cb\u5316\u4e3a 0\uff0c\u5e76\u5728\u8c03\u7528\u540e\u5bf9\u5176\u8fdb\u884c\u68c0\u67e5\u3002 \u5e38\u7528\u7684\u64cd\u4f5c\u6709\uff0c\u6839\u636e errno \u503c\u6253\u5370\u9519\u8bef\u539f\u56e0\uff0c\u6807\u51c6\u5e93\u63d0\u4f9b perror() \u51fd\u6570\u548c strerror() \u51fd\u6570\u3002 perror() \u51fd\u6570\u4f1a\u6253\u5370\u4f20\u5165\u7684\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8ddf\u4e0a\u5f53\u524d errno \u503c\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\uff0c #include <stdio.h> void perror ( const char * msg ); \u4f8b\u5982 fd = open ( pathname , flags , mode ); if ( fd == -1 ) { perror ( \"open\" ); exit ( EXIT_FAILURE ); } strerror() \u5bf9\u53c2\u6570 errnum \u4f20\u5165\u7684\u9519\u8bef\u53f7\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u76f8\u5e94\u7684\u9519\u8bef\u7684\u5b57\u7b26\u4e32\u7684\u6307\u9488\u3002 #include <string,h> char * strerror ( int errnum ); \u8fd9\u4e2a\u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u662f\u9759\u6001\u5206\u914d\u7684\uff0c\u540e\u7eed\u518d\u6b21\u8c03\u7528\u53ef\u80fd\u4f1a\u8986\u76d6\u8be5\u5b57\u7b26\u4e32 \u5bf9\u5e93\u51fd\u6570\u7684\u9519\u8bef\u5904\u7406 \u00b6 \u4e0d\u540c\u7684\u5e93\u51fd\u6570\u5728\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u7684\u503c\u548c\u8868\u73b0\u90fd\u4e0d\u76f8\u540c \u6709\u4e9b\u5e93\u51fd\u6570\u8fd4\u56de\u9519\u8bef\u7684\u65b9\u5f0f\u4e0e\u7cfb\u7edf\u8c03\u7528\u5b8c\u5168\u76f8\u540c\uff0c\u6709\u4e9b\u8fd4\u56de\u7684\u503c\u4e0d\u540c\uff0c\u4f46\u5bf9 errno \u7684\u5bf9\u5f85\u65b9\u5f0f\u76f8\u540c\uff0c\u800c\u6709\u4e9b\u51fd\u6570\u5219\u5b8c\u5168\u4e0d\u4f7f\u7528 errno \u8fdb\u884c\u9519\u8bef\u5904\u7406 \u53ef\u79fb\u690d\u6027\u95ee\u9898 \u00b6 \u7cfb\u7edf\u8c03\u7528\u548c\u5e93\u51fd\u6570 API \u7684\u7279\u6027\u53d7\u6807\u51c6\u5f71\u54cd\uff0c\u8fd9\u4e9b\u6709\u4e00\u90e8\u5206\u662f SUS \u6807\u51c6\u89c4\u5b9a\u7684\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f BSD \u548c SVR4 \u7684\u4e8b\u5b9e\u6807\u51c6 \u5728\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u7684\u5b8f\u6765\u4f7f\u51fd\u6570\u4f7f\u7528\u7279\u5b9a\u6807\u51c6\u7684\u5b9a\u4e49\uff0c\u53ef\u5728\u5305\u542b\u4efb\u4f55\u5934\u6587\u4ef6\u4e4b\u524d\u5148\u5b9a\u4e49\u7279\u5b9a\u7684\u7279\u6027\u6d4b\u8bd5\u5b8f (Feature Test Nacros), \u4f8b\u5982 #define _BSD_SOURCE 1 \u4e5f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5b9a\u4e49 $ cc -D_BSD_SOURCE prog.c \u5728\u51fd\u6570\u6587\u6863\u4e2d\u901a\u5e38\u6709\u5173\u4e8e\u4f7f\u7528\u4f55\u79cd\u5b9a\u4e49\u7684\u63cf\u8ff0\u3002\u5728 feature_test_macro(7) \u548c features.h \u4e2d\u6709\u66f4\u591a\u63cf\u8ff0 \u7531\u4e8e\u6570\u636e\u7c7b\u578b\u5728\u4e0d\u540c\u7684 Unix \u7248\u672c\u751a\u81f3\u662f\u540c\u4e2a\u7cfb\u7edf\u7684\u4e0d\u540c\u7248\u672c\u4e2d\u53ef\u80fd\u957f\u5ea6\u4e0d\u540c\uff0c\u4e3a\u964d\u4f4e\u79fb\u690d\u96be\u5ea6\uff0cSUSv3 \u89c4\u8303\u4e86\u6807\u51c6\u7cfb\u7edf\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4f7f\u7528 typedef \u5b9a\u4e49\uff0c\u4f8b\u5982\u8868\u793a\u8fdb\u7a0b\u53f7 typedef int pid_t \u591a\u6570\u7c7b\u578b\u90fd\u5b9a\u4e49\u5728 sys/types.h \u4e2d\uff0c\u5176\u4f59\u5219\u5b9a\u4e49\u5728\u5176\u4ed6\u5934\u6587\u4ef6\u4e2d\u3002SUSv3 \u8981\u6c42\u6240\u6709\u7c7b\u578b\u5747\u4e3a\u8fd0\u7b97\u7c7b\u578b (arithmetic type)\uff0c\u56e0\u6b64\u5176\u7c7b\u578b\u8981\u4e48\u4e3a\u6574\u578b\uff0c\u8981\u4e48\u4e3a\u6d6e\u70b9\u6570\u7c7b\u578b\u3002 \u7531\u4e8e printf() \u5728\u89e3\u91ca\u4f20\u5165\u7684\u6570\u636e\u65f6\u4e0d\u4f1a\u5224\u65ad\u5176\u7c7b\u578b\uff0c\u56e0\u6b64\u5728\u4f7f\u7528\u65f6\u901a\u5e38\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a long \u7c7b\u578b\uff0c\u518d\u4f7f\u7528 %ld \u63cf\u8ff0\u7b26\u3002\u4f46\u6709\u65f6 off_t \u7c7b\u578b\u4e3a long long \uff0c\u56e0\u6b64\u8981\u5f3a\u5236\u8f6c\u6362\u4e3a long long \u518d\u4f7f\u7528 %lld \u63cf\u8ff0\u7b26\u3002 \u6bcf\u79cd Unix \u5b9e\u73b0\u90fd\u660e\u786e\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6807\u51c6\u7684\u7ed3\u6784\u4f53\uff0c\u4f46\u987a\u5e8f\u662f\u6ca1\u6709\u660e\u786e\u5b9a\u4e49\u7684\uff0c\u4e14\u6709\u65f6\u8fd8\u4f1a\u5305\u542b\u6807\u51c6\u4e4b\u5916\u7684\u7279\u6b8a\u7684\u5b57\u6bb5\uff0c\u56e0\u6b64\u4e0d\u8981\u5728\u521d\u59cb\u5316\u65f6\u8d4b\u503c\uff0c\u800c\u662f\u521d\u59cb\u5316\u540e\u7ed9\u7ed3\u6784\u4f53\u4e2d\u7684\u5143\u7d20\u5355\u72ec\u8d4b\u503c\u624d\u662f\u4fdd\u9669\u7684\u3002 \u6709\u4e9b\u5b8f\u662f\u6ca1\u6709\u5728\u6240\u6709 Unix \u5b9e\u73b0\u90fd\u6709\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528 #ifdef \u68c0\u67e5\u5e76\u4f7f\u7528\u3002 \u8fc7\u53bb\u66fe\u89c4\u5b9a\u5728\u4f7f\u7528\u89c4\u8303\u7684\u51fd\u6570\u524d\u5fc5\u987b\u5305\u542b sys/types.h \uff0c\u4f46\u73b0\u4ee3 Unix \u5b9e\u73b0\u4e2d\u4e00\u822c\u4e0d\u9700\u8981\u7279\u5730\u5305\u542b\uff0c\u73b0\u4ee3 Unix \u6807\u51c6\u4e2d\u4e5f\u5220\u53bb\u4e86\u8fd9\u4e2a\u89c4\u5b9a\u3002 \u4e60\u9898 \u00b6 code: c3/reboot.c \u6839\u636e reboot(2) \u53ef\u4ee5\u770b\u5230 reboot syscall \u9700\u8981\u4e24\u4e2a Magic Number\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u9700\u8981 LINUX_REBOOT_MAGIC1 , \u4ed6\u7684\u503c\u4e3a 0xfee1dead \uff0c\u8fd9\u975e\u5e38\u7684\u6781\u5ba2\u7b11\u8bdd\u3002 \u7b2c\u4e8c\u4e2a Magic Number \u53ef\u4ee5\u53d6\u4e09\u4e2a\u503c\uff0c\u8fd9\u4e09\u4e2a\u503c\u8f6c\u6362\u6210 16 \u8fdb\u5236\u540e\u662f Linus \u548c\u4e09\u4f4d\u5343\u91d1\u7684\u751f\u65e5\u7684\u6837\u5b50\u3002 \u4f46 reboot(2) \u7684\u51fd\u6570\u597d\u60f3\u5e76\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u7684\u6837\u5b50\uff0c\u7531\u4e8e\u73b0\u4ee3 Linux \u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528 libc5 \u4e86\u3002 Glibc \u7ed9\u51fd\u6570\u505a\u4e86\u5c01\u88c5\uff0c\u4e0d\u518d\u9700\u8981\u63d0\u4f9b\u4e24\u4e2a Magic Number\uff0c\u56e0\u6b64\u6211\u7684 reboot \u7a0b\u5e8f\u4ee3\u7801 ( c3/reboot.c ) \u4e5f\u4f7f\u7528\u4e86\u65b0\u7684\u5916\u58f3\u51fd\u6570\u3002 \u4f46\u5728 Glibc \u7684\u6e90\u7801\u4e2d ( glibc/sysdeps/unix/sysv/linux/reboot.c ) \u53ef\u4ee5\u770b\u5230\u4ed6\u786e\u786e\u5b9e\u5b9e\u4f7f\u7528\u4e86 Magic Number\uff0c\u4e14\u8fdb\u884c\u4e86\u7cfb\u7edf\u8c03\u7528\uff0c\u6211\u60f3\u662f\u51fa\u4e8e\u8de8\u5e73\u53f0\u79fb\u690d\u7684\u8003\u8651\u5427\u3002Glibc \u7684 reboot() \u548c Apple macOS \u7684 reboot(2) \u6587\u6863\u7ed9\u51fa\u7684\u7528\u6cd5\u662f\u4e00\u81f4\u7684\uff0c\u800c macOS \u7684 reboot(2) \u662f\u6765\u6e90\u4e8e BSD \u7684\u3002 \u73b0\u4ee3\u7684 Linux \u7684 /sbin/reboot \u662f\u6307\u5411 /sbin/systemctl \u7684\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5. \u6839\u636e BSD \u7684 src/sbin/reboot/reboot.c \u91cd\u542f\u7cfb\u7edf\u8fd8\u9700\u8981\u7ed9 init \u53d1\u9001\u4fe1\u53f7\u4f7f\u5176\u7ed3\u675f, \u5373\u771f\u6b63\u7684\u91cd\u542f\u662f\u9700\u8981 init \u914d\u5408\u7684\uff0c\u53ea\u7ed9\u5185\u6838\u53d1\u9001\u4fe1\u53f7\u662f\u4e0d\u80fd\u771f\u6b63\u91cd\u542f\u7684\uff0c\u4e8b\u5b9e\u4e5f\u662f\u8fd9\u6837\u7684\u3002","title":"\u7b2c\u4e09\u7ae0-\u7cfb\u7edf\u7f16\u7a0b\u6982\u5ff5"},{"location":"chap3/#cheaper-3","text":"","title":"Cheaper 3 \u7cfb\u7edf\u7f16\u7a0b\u6982\u5ff5"},{"location":"chap3/#_1","text":"\u7cfb\u7edf\u8c03\u7528 System Calls \u5916\u58f3\u51fd\u6570 wrapper function \u4f8b\u7a0b routine \u6307\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u88ab\u53cd\u590d\u8c03\u7528\u548c\u8fd0\u884c\u7684\u4ee3\u7801 \u53ef\u79fb\u690d\u7684 portable \u53ef\u79fb\u690d\u6027 portabilty","title":"\u8bcd\u6c47\u901f\u67e5"},{"location":"chap3/#_2","text":"\u65e0\u8bba\u4f55\u65f6\uff0c\u53ea\u8981\u6267\u884c\u4e86\u7cfb\u7edf\u8c03\u7528\u6216\u5e93\u51fd\u6570\uff0c\u90fd\u5e94\u68c0\u67e5\u8c03\u7528\u7684\u8fd4\u56de\u72b6\u6001\u786e\u5b9a\u8c03\u7528\u662f\u5426\u6210\u529f\uff0c\u8fd9\u662f\u7f16\u7a0b\u94c1\u7387 \u8981\u6267\u884c\u5185\u6838\u6001\u4ee3\u7801\uff0c\u7a0b\u5e8f\u9700\u8981\u5c06\u7cfb\u7edf\u8c03\u7528\u590d\u5236\u5230\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u8c03\u7528\u673a\u5668\u4e2d\u65ad int 0x80 \u4f7f CPU \u5207\u6362\u5230\u5185\u6838\u6001\uff0c\u5e76\u6267\u884c\u5bc4\u5b58\u5668\u6307\u5411\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u4ee3\u7801 \u82e5\u51fa\u9519\uff0c\u5219\u5916\u58f3\u51fd\u6570\u4f7f\u7528\u8fd9\u4e2a\u503c\u8bbe\u5b9a\u5168\u5c40\u53d8\u91cf errno \u5e76\u8fd4\u56de\u4e3b\u8c03\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6574\u5f62\u503c\u7528\u4e8e\u5224\u65ad\u7cfb\u7edf\u8c03\u7528\u662f\u5426\u6210\u529f \u901a\u5e38\u5bf9\u4e8e Linux \u6765\u8bf4\uff0c\u5f53\u7cfb\u7edf\u8c03\u7528\u5931\u8d25\uff0c\u7cfb\u7edf\u8c03\u7528\u4f8b\u7a0b\u4f1a\u5bf9\u76f8\u5e94\u7684 errno \u53d6\u53cd\uff0c\u8fd4\u56de\u4e00\u4e2a\u8d1f\u503c\uff0c\u5916\u58f3\u51fd\u6570\u5bf9\u5176\u518d\u6b21\u53d6\u53cd\uff0c\u5e76\u5c06\u7ed3\u679c\u9644\u7ed9 errno \uff0c\u540c\u65f6\u8fd4\u56de -1 \u6709\u4e9b\u51fd\u6570\u4e0d\u9075\u5b88\u8fd9\u4e2a\u60ef\u4f8b\uff0c\u9700\u8981\u6ce8\u610f\u7279\u6b8a\u60c5\u51b5 \u7cfb\u7edf\u8c03\u7528\u5b58\u5728\u5f00\u9500\uff0c\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\u867d\u7136\u4e0d\u6162\uff0c\u4f46\u6bd4\u7eaf\u7cb9\u7684\u7528\u6237\u6001\u4ee3\u7801\u8981\u6162\u7684\u591a\u3002 \u5e93\u51fd\u6570\u6709\u4e9b\u4f1a\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u662f\u7cfb\u7edf\u8c03\u7528\u7684\u4e8c\u6b21\u5c01\u88c5 \u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8fd0\u884c glibc \u5e93\u6587\u4ef6\u6765\u786e\u5b9a glibc \u7248\u672c\u3002 $ ldd /bin/ls linux-vdso.so.1 ( 0x00007ffc39cee000 ) libselinux.so.1 = > /lib/x86_64-linux-gnu/libselinux.so.1 ( 0x00007f4f4f7bb000 ) libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007f4f4f593000 ) libpcre2-8.so.0 = > /lib/x86_64-linux-gnu/libpcre2-8.so.0 ( 0x00007f4f4f4fc000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007f4f4f81e000 ) $ /lib/x86_64-linux-gnu/libc.so.6 GNU C Library ( Ubuntu GLIBC 2 .35-0ubuntu3 ) stable release version 2 .35. Copyright ( C ) 2022 Free Software Foundation, Inc. This is free software ; see the source for copying conditions. There is NO warranty ; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled by GNU CC version 11 .2.0. libc ABIs: UNIQUE IFUNC ABSOLUTE For bug reporting instructions, please see: <https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs>. \u8981\u5728\u7f16\u8bd1\u671f\u786e\u5b9a GLIBC \u7248\u672c\uff0c\u53ef\u4f7f\u7528 __GLIBC__ \u548c __GLIBC_MINOR__ \u4e24\u4e2a\u5b9a\u4e49\u7684\u5e38\u91cf\uff0c\u7b2c\u4e00\u4e2a\u8fd4\u56de\u5927\u7248\u672c\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u5c0f\u7248\u672c\u53f7 \u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u53ef\u8c03\u7528 gnu_get_libc_version() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5305\u542b\u5728 gnu/libc-version.h \u4e2d\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7248\u672c\u53f7\u5b57\u7b26\u4e32\u7684\u6307\u9488","title":"\u7b14\u8bb0"},{"location":"chap3/#_3","text":"","title":"\u9519\u8bef\u68c0\u67e5"},{"location":"chap3/#_4","text":"\u6bcf\u4e2a\u51fd\u6570\u7684\u624b\u518c\u91cc\u90fd\u6709 ERROR \u90e8\u5206\uff0c\u53ef\u67e5\u770b\u5176\u8fd4\u56de\u503c\u54ea\u4e9b\u8868\u793a\u9519\u8bef\u3002\u5982 fd = open ( pathname , flags , mode ); if ( fd == -1 ) { /* code to handle the error */ } if ( close ( fd ) == -1 ) { /* code to handle the error */ } \u7cfb\u7edf\u8c03\u7528\u5931\u8d25\u65f6\u4f1a\u5c06\u5168\u5c40\u53d8\u91cf errno \u8bbe\u4e3a\u4e00\u4e2a\u6b63\u503c\u7528\u6765\u6807\u8bc6\u5177\u4f53\u7684\u9519\u8bef\uff0c\u5728 errno.h \u4e2d\u5305\u542b\u4e86 errno \u7684\u58f0\u660e\uff0c\u4ee5\u53ca\u4e00\u7ec4\u9519\u8bef\u7f16\u53f7\u5b9a\u4e49\u7684\u5e38\u91cf\u3002\u5982 cnt = read ( fd , buf , numbytes ); if ( cnt == -1 ) { if ( errno == EINTR ) fprintf ( stderr , \"read was interrupted by a signal \\n \" ); else { /* Some other error occurred */ } } \u5982\u679c\u7cfb\u7edf\u8c03\u7528\u6216\u51fd\u6570\u6210\u529f\uff0c\u5219 errno \u4e0d\u4f1a\u88ab\u91cd\u7f6e\u4e3a 0\uff0c\u56e0\u6b64\u5982\u679c errno \u5f53\u524d\u4e0d\u4e3a 0 \u53ef\u80fd\u662f\u4e0a\u6b21\u8c03\u7528\u5931\u8d25\u9020\u6210\u7684\u3002 \u53e6\u5916\uff0c\u6839\u636e SUSv3\uff0c\u5141\u8bb8\u51fd\u6570\u8c03\u7528\u6210\u529f\u65f6\u5c06 errno \u8bbe\u4e3a\u975e 0 \u503c\uff0c\u6807\u51c6\u7684\u505a\u6cd5\u662f\u5148\u68c0\u67e5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5426\u8fd4\u56de\u9519\u8bef\uff0c\u4e4b\u540e\u518d\u901a\u8fc7 errno \u5224\u65ad\u9519\u8bef\u539f\u56e0\u3002 \u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u5728\u8c03\u7528\u6210\u529f\u540e\u4e5f\u8fd4\u56de -1 \u8fd9\u4e9b\u7279\u6b8a\u7684\u4f8b\u5b50\u4e2d\uff0c\u5e94\u5728\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u524d\u5c06 errno \u521d\u59cb\u5316\u4e3a 0\uff0c\u5e76\u5728\u8c03\u7528\u540e\u5bf9\u5176\u8fdb\u884c\u68c0\u67e5\u3002 \u5e38\u7528\u7684\u64cd\u4f5c\u6709\uff0c\u6839\u636e errno \u503c\u6253\u5370\u9519\u8bef\u539f\u56e0\uff0c\u6807\u51c6\u5e93\u63d0\u4f9b perror() \u51fd\u6570\u548c strerror() \u51fd\u6570\u3002 perror() \u51fd\u6570\u4f1a\u6253\u5370\u4f20\u5165\u7684\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8ddf\u4e0a\u5f53\u524d errno \u503c\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\uff0c #include <stdio.h> void perror ( const char * msg ); \u4f8b\u5982 fd = open ( pathname , flags , mode ); if ( fd == -1 ) { perror ( \"open\" ); exit ( EXIT_FAILURE ); } strerror() \u5bf9\u53c2\u6570 errnum \u4f20\u5165\u7684\u9519\u8bef\u53f7\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u76f8\u5e94\u7684\u9519\u8bef\u7684\u5b57\u7b26\u4e32\u7684\u6307\u9488\u3002 #include <string,h> char * strerror ( int errnum ); \u8fd9\u4e2a\u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u662f\u9759\u6001\u5206\u914d\u7684\uff0c\u540e\u7eed\u518d\u6b21\u8c03\u7528\u53ef\u80fd\u4f1a\u8986\u76d6\u8be5\u5b57\u7b26\u4e32","title":"\u68c0\u67e5\u7cfb\u7edf\u8c03\u7528\u7684\u9519\u8bef"},{"location":"chap3/#_5","text":"\u4e0d\u540c\u7684\u5e93\u51fd\u6570\u5728\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u7684\u503c\u548c\u8868\u73b0\u90fd\u4e0d\u76f8\u540c \u6709\u4e9b\u5e93\u51fd\u6570\u8fd4\u56de\u9519\u8bef\u7684\u65b9\u5f0f\u4e0e\u7cfb\u7edf\u8c03\u7528\u5b8c\u5168\u76f8\u540c\uff0c\u6709\u4e9b\u8fd4\u56de\u7684\u503c\u4e0d\u540c\uff0c\u4f46\u5bf9 errno \u7684\u5bf9\u5f85\u65b9\u5f0f\u76f8\u540c\uff0c\u800c\u6709\u4e9b\u51fd\u6570\u5219\u5b8c\u5168\u4e0d\u4f7f\u7528 errno \u8fdb\u884c\u9519\u8bef\u5904\u7406","title":"\u5bf9\u5e93\u51fd\u6570\u7684\u9519\u8bef\u5904\u7406"},{"location":"chap3/#_6","text":"\u7cfb\u7edf\u8c03\u7528\u548c\u5e93\u51fd\u6570 API \u7684\u7279\u6027\u53d7\u6807\u51c6\u5f71\u54cd\uff0c\u8fd9\u4e9b\u6709\u4e00\u90e8\u5206\u662f SUS \u6807\u51c6\u89c4\u5b9a\u7684\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f BSD \u548c SVR4 \u7684\u4e8b\u5b9e\u6807\u51c6 \u5728\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u7684\u5b8f\u6765\u4f7f\u51fd\u6570\u4f7f\u7528\u7279\u5b9a\u6807\u51c6\u7684\u5b9a\u4e49\uff0c\u53ef\u5728\u5305\u542b\u4efb\u4f55\u5934\u6587\u4ef6\u4e4b\u524d\u5148\u5b9a\u4e49\u7279\u5b9a\u7684\u7279\u6027\u6d4b\u8bd5\u5b8f (Feature Test Nacros), \u4f8b\u5982 #define _BSD_SOURCE 1 \u4e5f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5b9a\u4e49 $ cc -D_BSD_SOURCE prog.c \u5728\u51fd\u6570\u6587\u6863\u4e2d\u901a\u5e38\u6709\u5173\u4e8e\u4f7f\u7528\u4f55\u79cd\u5b9a\u4e49\u7684\u63cf\u8ff0\u3002\u5728 feature_test_macro(7) \u548c features.h \u4e2d\u6709\u66f4\u591a\u63cf\u8ff0 \u7531\u4e8e\u6570\u636e\u7c7b\u578b\u5728\u4e0d\u540c\u7684 Unix \u7248\u672c\u751a\u81f3\u662f\u540c\u4e2a\u7cfb\u7edf\u7684\u4e0d\u540c\u7248\u672c\u4e2d\u53ef\u80fd\u957f\u5ea6\u4e0d\u540c\uff0c\u4e3a\u964d\u4f4e\u79fb\u690d\u96be\u5ea6\uff0cSUSv3 \u89c4\u8303\u4e86\u6807\u51c6\u7cfb\u7edf\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4f7f\u7528 typedef \u5b9a\u4e49\uff0c\u4f8b\u5982\u8868\u793a\u8fdb\u7a0b\u53f7 typedef int pid_t \u591a\u6570\u7c7b\u578b\u90fd\u5b9a\u4e49\u5728 sys/types.h \u4e2d\uff0c\u5176\u4f59\u5219\u5b9a\u4e49\u5728\u5176\u4ed6\u5934\u6587\u4ef6\u4e2d\u3002SUSv3 \u8981\u6c42\u6240\u6709\u7c7b\u578b\u5747\u4e3a\u8fd0\u7b97\u7c7b\u578b (arithmetic type)\uff0c\u56e0\u6b64\u5176\u7c7b\u578b\u8981\u4e48\u4e3a\u6574\u578b\uff0c\u8981\u4e48\u4e3a\u6d6e\u70b9\u6570\u7c7b\u578b\u3002 \u7531\u4e8e printf() \u5728\u89e3\u91ca\u4f20\u5165\u7684\u6570\u636e\u65f6\u4e0d\u4f1a\u5224\u65ad\u5176\u7c7b\u578b\uff0c\u56e0\u6b64\u5728\u4f7f\u7528\u65f6\u901a\u5e38\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a long \u7c7b\u578b\uff0c\u518d\u4f7f\u7528 %ld \u63cf\u8ff0\u7b26\u3002\u4f46\u6709\u65f6 off_t \u7c7b\u578b\u4e3a long long \uff0c\u56e0\u6b64\u8981\u5f3a\u5236\u8f6c\u6362\u4e3a long long \u518d\u4f7f\u7528 %lld \u63cf\u8ff0\u7b26\u3002 \u6bcf\u79cd Unix \u5b9e\u73b0\u90fd\u660e\u786e\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6807\u51c6\u7684\u7ed3\u6784\u4f53\uff0c\u4f46\u987a\u5e8f\u662f\u6ca1\u6709\u660e\u786e\u5b9a\u4e49\u7684\uff0c\u4e14\u6709\u65f6\u8fd8\u4f1a\u5305\u542b\u6807\u51c6\u4e4b\u5916\u7684\u7279\u6b8a\u7684\u5b57\u6bb5\uff0c\u56e0\u6b64\u4e0d\u8981\u5728\u521d\u59cb\u5316\u65f6\u8d4b\u503c\uff0c\u800c\u662f\u521d\u59cb\u5316\u540e\u7ed9\u7ed3\u6784\u4f53\u4e2d\u7684\u5143\u7d20\u5355\u72ec\u8d4b\u503c\u624d\u662f\u4fdd\u9669\u7684\u3002 \u6709\u4e9b\u5b8f\u662f\u6ca1\u6709\u5728\u6240\u6709 Unix \u5b9e\u73b0\u90fd\u6709\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528 #ifdef \u68c0\u67e5\u5e76\u4f7f\u7528\u3002 \u8fc7\u53bb\u66fe\u89c4\u5b9a\u5728\u4f7f\u7528\u89c4\u8303\u7684\u51fd\u6570\u524d\u5fc5\u987b\u5305\u542b sys/types.h \uff0c\u4f46\u73b0\u4ee3 Unix \u5b9e\u73b0\u4e2d\u4e00\u822c\u4e0d\u9700\u8981\u7279\u5730\u5305\u542b\uff0c\u73b0\u4ee3 Unix \u6807\u51c6\u4e2d\u4e5f\u5220\u53bb\u4e86\u8fd9\u4e2a\u89c4\u5b9a\u3002","title":"\u53ef\u79fb\u690d\u6027\u95ee\u9898"},{"location":"chap3/#_7","text":"code: c3/reboot.c \u6839\u636e reboot(2) \u53ef\u4ee5\u770b\u5230 reboot syscall \u9700\u8981\u4e24\u4e2a Magic Number\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u9700\u8981 LINUX_REBOOT_MAGIC1 , \u4ed6\u7684\u503c\u4e3a 0xfee1dead \uff0c\u8fd9\u975e\u5e38\u7684\u6781\u5ba2\u7b11\u8bdd\u3002 \u7b2c\u4e8c\u4e2a Magic Number \u53ef\u4ee5\u53d6\u4e09\u4e2a\u503c\uff0c\u8fd9\u4e09\u4e2a\u503c\u8f6c\u6362\u6210 16 \u8fdb\u5236\u540e\u662f Linus \u548c\u4e09\u4f4d\u5343\u91d1\u7684\u751f\u65e5\u7684\u6837\u5b50\u3002 \u4f46 reboot(2) \u7684\u51fd\u6570\u597d\u60f3\u5e76\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u7684\u6837\u5b50\uff0c\u7531\u4e8e\u73b0\u4ee3 Linux \u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528 libc5 \u4e86\u3002 Glibc \u7ed9\u51fd\u6570\u505a\u4e86\u5c01\u88c5\uff0c\u4e0d\u518d\u9700\u8981\u63d0\u4f9b\u4e24\u4e2a Magic Number\uff0c\u56e0\u6b64\u6211\u7684 reboot \u7a0b\u5e8f\u4ee3\u7801 ( c3/reboot.c ) \u4e5f\u4f7f\u7528\u4e86\u65b0\u7684\u5916\u58f3\u51fd\u6570\u3002 \u4f46\u5728 Glibc \u7684\u6e90\u7801\u4e2d ( glibc/sysdeps/unix/sysv/linux/reboot.c ) \u53ef\u4ee5\u770b\u5230\u4ed6\u786e\u786e\u5b9e\u5b9e\u4f7f\u7528\u4e86 Magic Number\uff0c\u4e14\u8fdb\u884c\u4e86\u7cfb\u7edf\u8c03\u7528\uff0c\u6211\u60f3\u662f\u51fa\u4e8e\u8de8\u5e73\u53f0\u79fb\u690d\u7684\u8003\u8651\u5427\u3002Glibc \u7684 reboot() \u548c Apple macOS \u7684 reboot(2) \u6587\u6863\u7ed9\u51fa\u7684\u7528\u6cd5\u662f\u4e00\u81f4\u7684\uff0c\u800c macOS \u7684 reboot(2) \u662f\u6765\u6e90\u4e8e BSD \u7684\u3002 \u73b0\u4ee3\u7684 Linux \u7684 /sbin/reboot \u662f\u6307\u5411 /sbin/systemctl \u7684\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5. \u6839\u636e BSD \u7684 src/sbin/reboot/reboot.c \u91cd\u542f\u7cfb\u7edf\u8fd8\u9700\u8981\u7ed9 init \u53d1\u9001\u4fe1\u53f7\u4f7f\u5176\u7ed3\u675f, \u5373\u771f\u6b63\u7684\u91cd\u542f\u662f\u9700\u8981 init \u914d\u5408\u7684\uff0c\u53ea\u7ed9\u5185\u6838\u53d1\u9001\u4fe1\u53f7\u662f\u4e0d\u80fd\u771f\u6b63\u91cd\u542f\u7684\uff0c\u4e8b\u5b9e\u4e5f\u662f\u8fd9\u6837\u7684\u3002","title":"\u4e60\u9898"},{"location":"chap4/","text":"Cheapear 4 \u6587\u4ef6 I/O\uff1a\u901a\u7528\u7684 I/O \u6a21\u578b \u00b6 \u8bcd\u6c47\u901f\u67e5 \u00b6 \u6587\u4ef6\u63cf\u8ff0\u7b26\uff1afile descriptor \u6587\u4ef6\u7a7a\u6d1e\uff1afile holes \u7b14\u8bb0 \u00b6 \u6587\u4ef6 I/O \u64cd\u4f5c\u4f7f\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u8bb0\uff0c\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002 \u591a\u6570\u7a0b\u5e8f\u671f\u671b\u4f7f\u7528 3 \u4e2a\u6807\u51c6\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a \u6587\u4ef6\u63cf\u8ff0\u7b26 \u7528\u9014 POSIX \u540d\u79f0 stdio \u6d41 0 \u6807\u51c6\u8f93\u5165 STDIN_FILENO stdin 1 \u6807\u51c6\u8f93\u51fa STDOUT_FILENO stdout 2 \u6807\u51c6\u9519\u8bef STDERR_FILENO stderr \u5728 Shell \u4e2d\u8fd9\u4e09\u4e2a\u63cf\u8ff0\u7b26\u662f\u6253\u5f00\u7684\uff0c\u5e76\u4e14\u6307\u5411 Shell \u5f53\u524d\u8fd0\u884c\u7684\u7ec8\u7aef\u3002\u7a0b\u5e8f\u4f1a\u7ee7\u627f Shell \u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u526f\u672c\uff0c\u82e5\u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\u6307\u5b9a\u4e86\u91cd\u5b9a\u5411\uff0c\u5219 Shell \u4f1a\u4fee\u6539\u6587\u4ef6\u63cf\u8ff0\u7b26\u540e\u518d\u542f\u52a8\u7a0b\u5e8f\u3002 freopen() \u51fd\u6570\u53ef\u5c06 stdin , stdout \uff0c stderr \u53d8\u91cf\u6307\u5411\u4e0d\u540c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5373\u65e0\u6cd5\u4fdd\u8bc1\u8c03\u7528\u540e\u4ee5\u4e0a\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u4ecd\u5bf9\u5e94\u6807\u51c6\u503c\u3002 \u6307\u4ee3\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u7528\u6570\u5b57\uff0c\u4f46\u6700\u597d\u7528 unistd.h \u4e2d\u7684 POSIX \u6807\u51c6\u540d\u79f0\u3002 \u7531\u4e8e UNIX \u7684\u4e00\u5207\u7686\u6587\u4ef6\u7279\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6587\u4ef6 I/O \u65b9\u5f0f\u5bf9\u6240\u6709\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\u3002\u4e00\u65e6\u9700\u8981\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u6216\u8bbe\u5907\u7684\u4e13\u6709\u7279\u6027\u65f6\uff0c\u53ef\u4f7f\u7528 ioctl() \u5b9e\u73b0\u3002 open \u00b6 #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> int open ( const char * pathname , int flags , /* mode_t mode */ ); \u6253\u5f00\u7684\u6587\u4ef6\u7531\u53c2\u6570 pathname \u6807\u8bc6\uff0c\u82e5 pathname \u4e3a\u7b26\u53f7\u94fe\u63a5\u5219\u5148\u89e3\u5f15\u7528\u3002 \u82e5\u8c03\u7528\u6210\u529f\uff0c open() \u5c06\u8fd4\u56de\u4e00\u6587\u4ef6\u6807\u8bc6\u7b26\uff0c\u82e5\u53d1\u751f\u9519\u8bef\uff0c\u5219\u8fd4\u56de -1 \u5e76\u5c06 errno \u7f6e\u4e3a\u5bf9\u5e94\u7684\u9519\u8bef\u6807\u5fd7\u3002 flags \u4e3a\u4f4d\u63a9\u7801\uff0c\u53ef\u9009\u62e9\u6587\u4ef6\u8bbf\u95ee\u65b9\u5f0f\u4e2d\u7684\u5e38\u91cf\u3002 flags \u9700\u8981\u5728\u4e0b\u5217\u5e38\u91cf\u4e2d\u9009\u62e9\u5176\u4e00 \u8bbf\u95ee\u6a21\u5f0f \u63cf\u8ff0 O_RDONLY \u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00 O_WRONLY \u53ea\u5199\u65b9\u5f0f\u6253\u5f00 O_RDWR \u8bfb\u5199\u65b9\u5f0f\u6253\u5f00 \u9664\u6b64\u4e4b\u5916\u8fd8\u53ef\u7528\u6309\u4f4d\u6216\u7684\u65b9\u5f0f\u9644\u52a0\u5176\u4ed6\u53c2\u6570\u3002 mode \u6807\u8bc6\u6743\u9650\uff0c\u5728 O_CREAT \u5b58\u5728\u65f6\u9700\u6307\u5b9a\uff0c\u5176\u4ed6\u65f6\u5019\u53ef\u5ffd\u7565\uff0c\u82e5\u4e0d\u6307\u5b9a\u4f1a\u5c06\u65b0\u6587\u4ef6\u7684\u6743\u9650\u8bbe\u4e3a\u6808\u4e2d\u7684\u67d0\u4e2a\u968f\u673a\u503c\u3002 mode_t \u53ef\u4ee5\u7528\u516b\u8fdb\u5236\u6570\u5b57\u65b9\u5f0f\u6307\u5b9a\uff0c\u4f46\u66f4\u4e3a\u53ef\u53d6\u7684\u505a\u6cd5\u662f\u5bf9 0 \u4e2a\u6216\u591a\u4e2a\u8868\u793a\u6743\u9650\u7684\u4f4d\u63a9\u7801\u8fdb\u884c\u6309\u4f4d\u6216\u64cd\u4f5c\u3002 \u6839\u636e SUSv3 \u7684\u89c4\u5b9a\uff0c\u8c03\u7528 open() \u6210\u529f\u540e\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5e94\u4e3a\u672a\u4f7f\u7528\u7684\u6570\u503c\u4e2d\u7684\u6700\u5c0f\u503c\u3002 read \u00b6 #include <unistd.h> ssize_t read ( int fd , void * buf , size_t count ); count \u53c2\u6570\u5bf9\u5e94\u6700\u591a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff0c(size_t \u5c5e\u4e8e unsigned int)\uff0c buf \u63d0\u4f9b\u7528\u6765\u5b58\u653e\u8f93\u5165\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\u5730\u5740\uff0c\u5176\u81f3\u5c11\u5e94\u6709 count \u4e2a\u5b57\u8282\u3002 \u7cfb\u7edf\u8c03\u7528\u901a\u5e38\u4e0d\u4f1a\u5206\u914d\u5185\u5b58\u7f13\u51b2\u533a\uff0c\u9700\u8981\u9884\u5148\u5206\u914d\u5927\u5c0f\u5408\u9002\u7684\u5185\u5b58\u7f13\u51b2\u533a\u5e76\u5c06\u7f13\u51b2\u533a\u6307\u9488\u4f20\u9012\u7ed9\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u5bf9\u4e8e\u5e93\u51fd\u6570\u5219\u53ef\u80fd\u5206\u914d\u5185\u5b58\u7f13\u51b2\u533a\u3002 \u82e5\u8c03\u7528\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff0c\u82e5\u9047\u5230 EOF \u5219\u8fd4\u56de 0\uff0c\u82e5\u51fa\u73b0\u9519\u8bef\u5219\u8fd4\u56de -1 \uff0c ssize_t \u5c5e\u4e8e signed int \u7c7b\u578b\u3002 \u4e00\u6b21\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u53ef\u4ee5\u5c0f\u4e8e\u8bf7\u6c42\u7684\u5b57\u8282\u6570\uff0c\u5bf9\u4e8e\u666e\u901a\u6587\u4ef6\u800c\u8a00\u53ef\u80fd\u662f\u56e0\u4e3a\u8bfb\u53d6\u5f00\u59cb\u7684\u4f4d\u7f6e\u9760\u8fd1\u6587\u6863\u5c3e\u90e8\u3002 \u5f53 read() \u7528\u4e8e\u7ba1\u9053\uff0cFIFO\uff0c\u7ec8\u7aef\u6216\u5957\u63a5\u5b57\u65f6\uff0c\u4e5f\u53ef\u80fd\u5c0f\u4e8e count \u5927\u5c0f\u3002 \u663e\u7136\u82e5\u8bfb\u53d6\u7684\u5185\u5bb9\u9700\u8981\u8f93\u51fa\uff0c\u82e5\u9700\u8981\u8868\u793a\u7ec8\u6b62\u7684\u7a7a\u5b57\u7b26\uff0c\u5219\u9700\u8981\u663e\u5f0f\u7684\u8ffd\u52a0\u3002 EOF \u867d\u7136\u8868\u793a\u4e3a 0\uff0c\u4f46\u5b9e\u9645\u5728\u6587\u4ef6\u4e2d\u5e76\u4e0d\u5b58\u5728\u7ec8\u6b62\u6807\u8bc6\u3002 write \u00b6 #include <unistd.h> ssize_t write ( int fd , void * buf , size_t count ); \u5c06\u6570\u636e\u5199\u5165\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\u3002 \u82e5\u8c03\u7528\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\uff0c\u8be5\u8fd4\u56de\u503c\u53ef\u80fd\u5c0f\u4e8e count \u53c2\u6570\u503c\uff0c\u53ef\u80fd\u56e0\u4e3a\u78c1\u76d8\u5df2\u6ee1\u6216\u8fdb\u7a0b\u8d44\u6e90\u5bf9\u6587\u4ef6\u5927\u5c0f\u7684\u9650\u5236\u3002 close \u00b6 #include <unistd.h> int close ( int fd ); \u5f53\u8fdb\u7a0b\u7ed3\u675f\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5c06\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u56de\u6536\uff0c\u4f46\u663e\u5f0f\u5173\u95ed\u4ecd\u662f\u7f16\u7a0b\u7684\u597d\u4e60\u60ef\u3002 \u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a\u6709\u9650\u8d44\u6e90\uff0c\u56e0\u6b64\u5982\u679c\u6587\u4ef6\u63cf\u8ff0\u7b26\u5173\u95ed\u5931\u8d25\u53ef\u80fd\u5bfc\u81f4\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8d44\u6e90\u6d88\u8017\u6b86\u5c3d\u3002 \u5bf9 close() \u4e5f\u5e94\u8fdb\u884c\u9519\u8bef\u68c0\u67e5\u3002 lseek \u00b6 #include <unistd.h> off_t lseek ( int fd , off_t offset , int whence ); \u5bf9\u4e8e\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5185\u6838\u4f1a\u8bb0\u5f55\u5176\u6587\u4ef6\u504f\u79fb\u91cf\uff0c\u6709\u65f6\u4e5f\u79f0\u5176\u4e3a\u8bfb\u5199\u504f\u79fb\u91cf\u6216\u6307\u9488\uff0c\u6307\u4e0b\u4e00\u6b21\u8fd0\u884c read() \u6216 write() \u65f6\u64cd\u4f5c\u7684\u6587\u4ef6\u8d77\u59cb\u4f4d\u7f6e\uff0c\u4ee5\u76f8\u5bf9\u6587\u4ef6\u5934\u90e8\u8d77\u59cb\u70b9\u7684\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e\u8868\u793a\uff0c\u6587\u4ef6\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u91cf\u4e3a 0. \u6587\u4ef6\u6253\u5f00\u65f6\u4f1a\u5c06\u6587\u4ef6\u504f\u79fb\u91cf\u5b9a\u4e3a\u6587\u4ef6\u5f00\u59cb\uff0c\u6bcf\u6b21\u8c03\u7528 read() \u6216 write() \u4e5f\u4f1a\u540c\u6b65\u8c03\u6574\u504f\u79fb\u91cf\uff0c\u4ee5\u6307\u5411\u5df2\u8bfb\u6216\u5df2\u5199\u6570\u636e\u7684\u4e0b\u4e00\u5b57\u8282\u3002 offset \u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\u6570\u503c\uff0c\u901a\u5e38\u4e3a signed int \u7c7b\u578b\uff0c whence \u8868\u660e\u5e94\u6309\u7167\u54ea\u4e2a\u57fa\u70b9\u6765\u89e3\u91ca offset \u53c2\u6570\u3002 SEEK_SET \u5c06\u6587\u4ef6\u504f\u79fb\u91cf\u8bbe\u7f6e\u4e3a\u4ece\u6587\u4ef6\u5934\u90e8\u8d77\u59cb\u70b9\u5f00\u59cb\u7684 offset \u4e2a\u5b57\u8282 SEEK_CUR \u76f8\u5bf9\u4e8e\u5f53\u524d\u7684\u504f\u79fb\u91cf\uff0c\u5c06\u6587\u4ef6\u504f\u79fb\u91cf\u8c03\u6574 offset \u4e2a\u5b57\u8282 SEEK_END \u5c06\u6587\u4ef6\u504f\u79fb\u91cf\u8bbe\u7f6e\u4e3a\u8d77\u59cb\u4e8e\u6587\u4ef6\u5c3e\u90e8\u7684 offset \u4e2a\u5b57\u8282\uff0c\u5373 offset \u53c2\u6570\u5e94\u4ece\u6587\u4ef6\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u4e0b\u4e00\u4e2a\u5b57\u8282\u7b97\u8d77\u3002 \u82e5 whence \u4e3a SEEK_SET \u5219 offset \u5e94\u4e3a\u6b63\u503c\uff0c\u5176\u4ed6\u7684\u60c5\u51b5\u53ef\u4ee5\u4f7f\u7528\u8d1f\u503c\u3002 \u8c03\u7528\u6210\u529f\u540e\u4f1a\u8fd4\u56de\u65b0\u7684\u6587\u4ef6\u504f\u5dee\u91cf\uff0c\u56e0\u6b64\u53ef\u7528\u4e0b\u5217\u65b9\u5f0f\u83b7\u53d6\u5f53\u524d\u7684\u504f\u5dee\u91cf\u503c curr = lseek ( fd , 0 , SEEK_CUR ); \u4e0d\u80fd\u5c06 lseek() \u7528\u4e8e\u7ba1\u9053\uff0cFIFO\uff0cSocket \u6216\u7ec8\u7aef\uff0c\u4f46\u82e5\u5408\u60c5\u5408\u7406\u53ef\u5c06 lseek() \u7528\u4e8e\u8bbe\u5907\uff0c\u4f8b\u5982\u5728\u786c\u76d8\u4e0a\u67e5\u627e\u7279\u5b9a\u7684\u4f4d\u7f6e\u3002 \u6587\u4ef6\u7a7a\u6d1e \u00b6 \u82e5\u6587\u4ef6\u504f\u79fb\u91cf\u5df2\u7ecf\u8de8\u8d8a\u6587\u4ef6\u672b\u5c3e\uff0c\u518d\u6267\u884c I/O \u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c read() \u4f1a\u8fd4\u56de 0\uff0c\u4f46 write() \u4ecd\u53ef\u6b63\u5e38\u5199\u5165\u6570\u636e\uff0c\u4ece\u6587\u4ef6\u672b\u5c3e\u5230\u65b0\u5199\u5165\u7684\u6570\u636e\u4e4b\u95f4\u7684\u8fd9\u90e8\u5206\u7a7a\u95f4\u79f0\u4e3a\u6587\u4ef6\u7a7a\u6d1e\u3002 \u6587\u4ef6\u7a7a\u6d1e\u4e0d\u5360\u7528\u786c\u76d8\u7a7a\u95f4\uff0c\u53ea\u6709\u5411\u6587\u4ef6\u7a7a\u6d1e\u5199\u5165\u6570\u636e\u624d\u4f1a\u4e3a\u5176\u5206\u914d\u78c1\u76d8\u5757 ioctl() \u00b6 #include <sys/ioctl.h> int ioctl ( int fd , int request , ... /* argp */ ); request \u53c2\u6570\u6307\u5b9a\u5c06\u5728 fd \u63cf\u8ff0\u7b26\u4e0a\u6267\u884c\u7684\u63a7\u5236\u64cd\u4f5c\uff0c\u5b9a\u4e49\u5728\u5177\u4f53\u8bbe\u5907\u7684\u5934\u6587\u4ef6\u4e2d\u3002 argp \u53ef\u4ee5\u4f20\u5165\u591a\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u6570\u636e\u7c7b\u578b\uff0c\u6839\u636e request \u7684\u53c2\u6570\u503c\u6765\u786e\u5b9a\u3002 \u4e60\u9898 \u00b6 tee \u00b6 code: c4/tee.c \u4e00\u9053\u7b80\u5355\u7684\u7efc\u5408\u5e94\u7528\u9898\u76ee\u3002 \u505a\u4e0b\u6765\u57fa\u672c\u53ea\u6709\u51e0\u4e2a\u8981\u70b9\u8981\u6ce8\u610f\uff0c\u6574\u4f53\u662f\u5f88\u7b80\u5355\u7684\u3002 \u53c2\u6570\u4e2d\u7684\u5224\u522b\u53d8\u91cf\u7528\u524d\u5e94\u521d\u59cb\u5316 write() \u53ef\u80fd\u6709\u90e8\u5206\u5199\u5165\u6210\u529f\u4f46\u4f9d\u7136\u6709\u51fa\u9519\uff0c\u5e94\u68c0\u67e5 read() \u8bfb\u8fdb buf \u7684\u5185\u5bb9\u6570\u91cf\u4e0e write() \u7684\u5199\u5165\u91cf\u662f\u5426\u4e00\u81f4 optind \u4e3a\u672a\u5224\u65ad\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u8ba9\u5176\u4e0e argc \u6bd4\u8f83\u5927\u5c0f\uff0c\u540e\u76f4\u63a5\u53d6 argv[optind] \u53ef\u53d6\u5230\u53c2\u6570\u4e2d\u7684\u6587\u4ef6\u540d\u3002 \u5982\u679c\u6709\u591a\u4e2a\u6587\u4ef6\u540d\u8981\u4ece\u53c2\u6570\u8bfb\u53d6\u7684\u8bdd\u53ef\u7528\u5982\u4e0b\u7684 code snippet if ( optind < argc ) { do { char * file = argv [ optind ]; // do something with file } while ( ++ optind < argc ); } \u4ee5\u4e0a\u6765\u6e90\u4e8e GNU grep \u6e90\u7801\u3002 cp_hole \u00b6 code: c4/cp_hole.c \u53ef\u4ee5\u7528 dd \u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u6587\u4ef6\u7a7a\u6d1e\u7684\u6587\u4ef6\u7528\u4e8e\u6d4b\u8bd5 $ dd if = /dev/urandom bs = 4096 count = 2 of = fwh $ dd if = /dev/urandom seek = 7 bs = 4096 count = 2 $ dd if = /dev/zero bs = 4096 count = 9 of = fwnh \u96be\u70b9\u5728\u4e8e\u5982\u4f55\u68c0\u6d4b\u6587\u4ef6\u7a7a\u6d1e\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u542b\u6709\u6587\u4ef6\u7a7a\u6d1e\u7684\u6587\u4ef6\uff0c read() \u51fd\u6570\u4f1a\u6b63\u5e38\u8bfb\u5230\u4e00\u4e32 0\uff0c\u4f46\u5982\u679c\u76f4\u63a5\u5c06\u5176\u5199\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5219\u6587\u4ef6\u7a7a\u6d1e\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u4e0b\u6765\u3002 \u6240\u4ee5\uff0c\u57fa\u672c\u601d\u60f3\u662f\u5728\u5199\u6587\u4ef6\u524d\u5148\u68c0\u67e5 buf \u4e2d\u7684\u5185\u5bb9\u6709\u591a\u5c11\u662f\u7a7a\u5b57\u7b26\uff0c\u5c06\u7a7a\u5b57\u7b26 seek \u540e\u518d\u5199\u5165\u3002","title":"\u7b2c\u56db\u7ae0-\u6587\u4ef6 I/O\uff1a\u901a\u7528\u7684 I/O \u6a21\u578b"},{"location":"chap4/#cheapear-4-io-io","text":"","title":"Cheapear 4 \u6587\u4ef6 I/O\uff1a\u901a\u7528\u7684 I/O \u6a21\u578b"},{"location":"chap4/#_1","text":"\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1afile descriptor \u6587\u4ef6\u7a7a\u6d1e\uff1afile holes","title":"\u8bcd\u6c47\u901f\u67e5"},{"location":"chap4/#_2","text":"\u6587\u4ef6 I/O \u64cd\u4f5c\u4f7f\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u8bb0\uff0c\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002 \u591a\u6570\u7a0b\u5e8f\u671f\u671b\u4f7f\u7528 3 \u4e2a\u6807\u51c6\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a \u6587\u4ef6\u63cf\u8ff0\u7b26 \u7528\u9014 POSIX \u540d\u79f0 stdio \u6d41 0 \u6807\u51c6\u8f93\u5165 STDIN_FILENO stdin 1 \u6807\u51c6\u8f93\u51fa STDOUT_FILENO stdout 2 \u6807\u51c6\u9519\u8bef STDERR_FILENO stderr \u5728 Shell \u4e2d\u8fd9\u4e09\u4e2a\u63cf\u8ff0\u7b26\u662f\u6253\u5f00\u7684\uff0c\u5e76\u4e14\u6307\u5411 Shell \u5f53\u524d\u8fd0\u884c\u7684\u7ec8\u7aef\u3002\u7a0b\u5e8f\u4f1a\u7ee7\u627f Shell \u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u526f\u672c\uff0c\u82e5\u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\u6307\u5b9a\u4e86\u91cd\u5b9a\u5411\uff0c\u5219 Shell \u4f1a\u4fee\u6539\u6587\u4ef6\u63cf\u8ff0\u7b26\u540e\u518d\u542f\u52a8\u7a0b\u5e8f\u3002 freopen() \u51fd\u6570\u53ef\u5c06 stdin , stdout \uff0c stderr \u53d8\u91cf\u6307\u5411\u4e0d\u540c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5373\u65e0\u6cd5\u4fdd\u8bc1\u8c03\u7528\u540e\u4ee5\u4e0a\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u4ecd\u5bf9\u5e94\u6807\u51c6\u503c\u3002 \u6307\u4ee3\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u7528\u6570\u5b57\uff0c\u4f46\u6700\u597d\u7528 unistd.h \u4e2d\u7684 POSIX \u6807\u51c6\u540d\u79f0\u3002 \u7531\u4e8e UNIX \u7684\u4e00\u5207\u7686\u6587\u4ef6\u7279\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6587\u4ef6 I/O \u65b9\u5f0f\u5bf9\u6240\u6709\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\u3002\u4e00\u65e6\u9700\u8981\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u6216\u8bbe\u5907\u7684\u4e13\u6709\u7279\u6027\u65f6\uff0c\u53ef\u4f7f\u7528 ioctl() \u5b9e\u73b0\u3002","title":"\u7b14\u8bb0"},{"location":"chap4/#open","text":"#include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> int open ( const char * pathname , int flags , /* mode_t mode */ ); \u6253\u5f00\u7684\u6587\u4ef6\u7531\u53c2\u6570 pathname \u6807\u8bc6\uff0c\u82e5 pathname \u4e3a\u7b26\u53f7\u94fe\u63a5\u5219\u5148\u89e3\u5f15\u7528\u3002 \u82e5\u8c03\u7528\u6210\u529f\uff0c open() \u5c06\u8fd4\u56de\u4e00\u6587\u4ef6\u6807\u8bc6\u7b26\uff0c\u82e5\u53d1\u751f\u9519\u8bef\uff0c\u5219\u8fd4\u56de -1 \u5e76\u5c06 errno \u7f6e\u4e3a\u5bf9\u5e94\u7684\u9519\u8bef\u6807\u5fd7\u3002 flags \u4e3a\u4f4d\u63a9\u7801\uff0c\u53ef\u9009\u62e9\u6587\u4ef6\u8bbf\u95ee\u65b9\u5f0f\u4e2d\u7684\u5e38\u91cf\u3002 flags \u9700\u8981\u5728\u4e0b\u5217\u5e38\u91cf\u4e2d\u9009\u62e9\u5176\u4e00 \u8bbf\u95ee\u6a21\u5f0f \u63cf\u8ff0 O_RDONLY \u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00 O_WRONLY \u53ea\u5199\u65b9\u5f0f\u6253\u5f00 O_RDWR \u8bfb\u5199\u65b9\u5f0f\u6253\u5f00 \u9664\u6b64\u4e4b\u5916\u8fd8\u53ef\u7528\u6309\u4f4d\u6216\u7684\u65b9\u5f0f\u9644\u52a0\u5176\u4ed6\u53c2\u6570\u3002 mode \u6807\u8bc6\u6743\u9650\uff0c\u5728 O_CREAT \u5b58\u5728\u65f6\u9700\u6307\u5b9a\uff0c\u5176\u4ed6\u65f6\u5019\u53ef\u5ffd\u7565\uff0c\u82e5\u4e0d\u6307\u5b9a\u4f1a\u5c06\u65b0\u6587\u4ef6\u7684\u6743\u9650\u8bbe\u4e3a\u6808\u4e2d\u7684\u67d0\u4e2a\u968f\u673a\u503c\u3002 mode_t \u53ef\u4ee5\u7528\u516b\u8fdb\u5236\u6570\u5b57\u65b9\u5f0f\u6307\u5b9a\uff0c\u4f46\u66f4\u4e3a\u53ef\u53d6\u7684\u505a\u6cd5\u662f\u5bf9 0 \u4e2a\u6216\u591a\u4e2a\u8868\u793a\u6743\u9650\u7684\u4f4d\u63a9\u7801\u8fdb\u884c\u6309\u4f4d\u6216\u64cd\u4f5c\u3002 \u6839\u636e SUSv3 \u7684\u89c4\u5b9a\uff0c\u8c03\u7528 open() \u6210\u529f\u540e\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5e94\u4e3a\u672a\u4f7f\u7528\u7684\u6570\u503c\u4e2d\u7684\u6700\u5c0f\u503c\u3002","title":"open"},{"location":"chap4/#read","text":"#include <unistd.h> ssize_t read ( int fd , void * buf , size_t count ); count \u53c2\u6570\u5bf9\u5e94\u6700\u591a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff0c(size_t \u5c5e\u4e8e unsigned int)\uff0c buf \u63d0\u4f9b\u7528\u6765\u5b58\u653e\u8f93\u5165\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\u5730\u5740\uff0c\u5176\u81f3\u5c11\u5e94\u6709 count \u4e2a\u5b57\u8282\u3002 \u7cfb\u7edf\u8c03\u7528\u901a\u5e38\u4e0d\u4f1a\u5206\u914d\u5185\u5b58\u7f13\u51b2\u533a\uff0c\u9700\u8981\u9884\u5148\u5206\u914d\u5927\u5c0f\u5408\u9002\u7684\u5185\u5b58\u7f13\u51b2\u533a\u5e76\u5c06\u7f13\u51b2\u533a\u6307\u9488\u4f20\u9012\u7ed9\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u5bf9\u4e8e\u5e93\u51fd\u6570\u5219\u53ef\u80fd\u5206\u914d\u5185\u5b58\u7f13\u51b2\u533a\u3002 \u82e5\u8c03\u7528\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff0c\u82e5\u9047\u5230 EOF \u5219\u8fd4\u56de 0\uff0c\u82e5\u51fa\u73b0\u9519\u8bef\u5219\u8fd4\u56de -1 \uff0c ssize_t \u5c5e\u4e8e signed int \u7c7b\u578b\u3002 \u4e00\u6b21\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u53ef\u4ee5\u5c0f\u4e8e\u8bf7\u6c42\u7684\u5b57\u8282\u6570\uff0c\u5bf9\u4e8e\u666e\u901a\u6587\u4ef6\u800c\u8a00\u53ef\u80fd\u662f\u56e0\u4e3a\u8bfb\u53d6\u5f00\u59cb\u7684\u4f4d\u7f6e\u9760\u8fd1\u6587\u6863\u5c3e\u90e8\u3002 \u5f53 read() \u7528\u4e8e\u7ba1\u9053\uff0cFIFO\uff0c\u7ec8\u7aef\u6216\u5957\u63a5\u5b57\u65f6\uff0c\u4e5f\u53ef\u80fd\u5c0f\u4e8e count \u5927\u5c0f\u3002 \u663e\u7136\u82e5\u8bfb\u53d6\u7684\u5185\u5bb9\u9700\u8981\u8f93\u51fa\uff0c\u82e5\u9700\u8981\u8868\u793a\u7ec8\u6b62\u7684\u7a7a\u5b57\u7b26\uff0c\u5219\u9700\u8981\u663e\u5f0f\u7684\u8ffd\u52a0\u3002 EOF \u867d\u7136\u8868\u793a\u4e3a 0\uff0c\u4f46\u5b9e\u9645\u5728\u6587\u4ef6\u4e2d\u5e76\u4e0d\u5b58\u5728\u7ec8\u6b62\u6807\u8bc6\u3002","title":"read"},{"location":"chap4/#write","text":"#include <unistd.h> ssize_t write ( int fd , void * buf , size_t count ); \u5c06\u6570\u636e\u5199\u5165\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\u3002 \u82e5\u8c03\u7528\u6210\u529f\uff0c\u5219\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\uff0c\u8be5\u8fd4\u56de\u503c\u53ef\u80fd\u5c0f\u4e8e count \u53c2\u6570\u503c\uff0c\u53ef\u80fd\u56e0\u4e3a\u78c1\u76d8\u5df2\u6ee1\u6216\u8fdb\u7a0b\u8d44\u6e90\u5bf9\u6587\u4ef6\u5927\u5c0f\u7684\u9650\u5236\u3002","title":"write"},{"location":"chap4/#close","text":"#include <unistd.h> int close ( int fd ); \u5f53\u8fdb\u7a0b\u7ed3\u675f\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5c06\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u56de\u6536\uff0c\u4f46\u663e\u5f0f\u5173\u95ed\u4ecd\u662f\u7f16\u7a0b\u7684\u597d\u4e60\u60ef\u3002 \u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a\u6709\u9650\u8d44\u6e90\uff0c\u56e0\u6b64\u5982\u679c\u6587\u4ef6\u63cf\u8ff0\u7b26\u5173\u95ed\u5931\u8d25\u53ef\u80fd\u5bfc\u81f4\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8d44\u6e90\u6d88\u8017\u6b86\u5c3d\u3002 \u5bf9 close() \u4e5f\u5e94\u8fdb\u884c\u9519\u8bef\u68c0\u67e5\u3002","title":"close"},{"location":"chap4/#lseek","text":"#include <unistd.h> off_t lseek ( int fd , off_t offset , int whence ); \u5bf9\u4e8e\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5185\u6838\u4f1a\u8bb0\u5f55\u5176\u6587\u4ef6\u504f\u79fb\u91cf\uff0c\u6709\u65f6\u4e5f\u79f0\u5176\u4e3a\u8bfb\u5199\u504f\u79fb\u91cf\u6216\u6307\u9488\uff0c\u6307\u4e0b\u4e00\u6b21\u8fd0\u884c read() \u6216 write() \u65f6\u64cd\u4f5c\u7684\u6587\u4ef6\u8d77\u59cb\u4f4d\u7f6e\uff0c\u4ee5\u76f8\u5bf9\u6587\u4ef6\u5934\u90e8\u8d77\u59cb\u70b9\u7684\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e\u8868\u793a\uff0c\u6587\u4ef6\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u91cf\u4e3a 0. \u6587\u4ef6\u6253\u5f00\u65f6\u4f1a\u5c06\u6587\u4ef6\u504f\u79fb\u91cf\u5b9a\u4e3a\u6587\u4ef6\u5f00\u59cb\uff0c\u6bcf\u6b21\u8c03\u7528 read() \u6216 write() \u4e5f\u4f1a\u540c\u6b65\u8c03\u6574\u504f\u79fb\u91cf\uff0c\u4ee5\u6307\u5411\u5df2\u8bfb\u6216\u5df2\u5199\u6570\u636e\u7684\u4e0b\u4e00\u5b57\u8282\u3002 offset \u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\u6570\u503c\uff0c\u901a\u5e38\u4e3a signed int \u7c7b\u578b\uff0c whence \u8868\u660e\u5e94\u6309\u7167\u54ea\u4e2a\u57fa\u70b9\u6765\u89e3\u91ca offset \u53c2\u6570\u3002 SEEK_SET \u5c06\u6587\u4ef6\u504f\u79fb\u91cf\u8bbe\u7f6e\u4e3a\u4ece\u6587\u4ef6\u5934\u90e8\u8d77\u59cb\u70b9\u5f00\u59cb\u7684 offset \u4e2a\u5b57\u8282 SEEK_CUR \u76f8\u5bf9\u4e8e\u5f53\u524d\u7684\u504f\u79fb\u91cf\uff0c\u5c06\u6587\u4ef6\u504f\u79fb\u91cf\u8c03\u6574 offset \u4e2a\u5b57\u8282 SEEK_END \u5c06\u6587\u4ef6\u504f\u79fb\u91cf\u8bbe\u7f6e\u4e3a\u8d77\u59cb\u4e8e\u6587\u4ef6\u5c3e\u90e8\u7684 offset \u4e2a\u5b57\u8282\uff0c\u5373 offset \u53c2\u6570\u5e94\u4ece\u6587\u4ef6\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u4e0b\u4e00\u4e2a\u5b57\u8282\u7b97\u8d77\u3002 \u82e5 whence \u4e3a SEEK_SET \u5219 offset \u5e94\u4e3a\u6b63\u503c\uff0c\u5176\u4ed6\u7684\u60c5\u51b5\u53ef\u4ee5\u4f7f\u7528\u8d1f\u503c\u3002 \u8c03\u7528\u6210\u529f\u540e\u4f1a\u8fd4\u56de\u65b0\u7684\u6587\u4ef6\u504f\u5dee\u91cf\uff0c\u56e0\u6b64\u53ef\u7528\u4e0b\u5217\u65b9\u5f0f\u83b7\u53d6\u5f53\u524d\u7684\u504f\u5dee\u91cf\u503c curr = lseek ( fd , 0 , SEEK_CUR ); \u4e0d\u80fd\u5c06 lseek() \u7528\u4e8e\u7ba1\u9053\uff0cFIFO\uff0cSocket \u6216\u7ec8\u7aef\uff0c\u4f46\u82e5\u5408\u60c5\u5408\u7406\u53ef\u5c06 lseek() \u7528\u4e8e\u8bbe\u5907\uff0c\u4f8b\u5982\u5728\u786c\u76d8\u4e0a\u67e5\u627e\u7279\u5b9a\u7684\u4f4d\u7f6e\u3002","title":"lseek"},{"location":"chap4/#_3","text":"\u82e5\u6587\u4ef6\u504f\u79fb\u91cf\u5df2\u7ecf\u8de8\u8d8a\u6587\u4ef6\u672b\u5c3e\uff0c\u518d\u6267\u884c I/O \u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c read() \u4f1a\u8fd4\u56de 0\uff0c\u4f46 write() \u4ecd\u53ef\u6b63\u5e38\u5199\u5165\u6570\u636e\uff0c\u4ece\u6587\u4ef6\u672b\u5c3e\u5230\u65b0\u5199\u5165\u7684\u6570\u636e\u4e4b\u95f4\u7684\u8fd9\u90e8\u5206\u7a7a\u95f4\u79f0\u4e3a\u6587\u4ef6\u7a7a\u6d1e\u3002 \u6587\u4ef6\u7a7a\u6d1e\u4e0d\u5360\u7528\u786c\u76d8\u7a7a\u95f4\uff0c\u53ea\u6709\u5411\u6587\u4ef6\u7a7a\u6d1e\u5199\u5165\u6570\u636e\u624d\u4f1a\u4e3a\u5176\u5206\u914d\u78c1\u76d8\u5757","title":"\u6587\u4ef6\u7a7a\u6d1e"},{"location":"chap4/#ioctl","text":"#include <sys/ioctl.h> int ioctl ( int fd , int request , ... /* argp */ ); request \u53c2\u6570\u6307\u5b9a\u5c06\u5728 fd \u63cf\u8ff0\u7b26\u4e0a\u6267\u884c\u7684\u63a7\u5236\u64cd\u4f5c\uff0c\u5b9a\u4e49\u5728\u5177\u4f53\u8bbe\u5907\u7684\u5934\u6587\u4ef6\u4e2d\u3002 argp \u53ef\u4ee5\u4f20\u5165\u591a\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u6570\u636e\u7c7b\u578b\uff0c\u6839\u636e request \u7684\u53c2\u6570\u503c\u6765\u786e\u5b9a\u3002","title":"ioctl()"},{"location":"chap4/#_4","text":"","title":"\u4e60\u9898"},{"location":"chap4/#tee","text":"code: c4/tee.c \u4e00\u9053\u7b80\u5355\u7684\u7efc\u5408\u5e94\u7528\u9898\u76ee\u3002 \u505a\u4e0b\u6765\u57fa\u672c\u53ea\u6709\u51e0\u4e2a\u8981\u70b9\u8981\u6ce8\u610f\uff0c\u6574\u4f53\u662f\u5f88\u7b80\u5355\u7684\u3002 \u53c2\u6570\u4e2d\u7684\u5224\u522b\u53d8\u91cf\u7528\u524d\u5e94\u521d\u59cb\u5316 write() \u53ef\u80fd\u6709\u90e8\u5206\u5199\u5165\u6210\u529f\u4f46\u4f9d\u7136\u6709\u51fa\u9519\uff0c\u5e94\u68c0\u67e5 read() \u8bfb\u8fdb buf \u7684\u5185\u5bb9\u6570\u91cf\u4e0e write() \u7684\u5199\u5165\u91cf\u662f\u5426\u4e00\u81f4 optind \u4e3a\u672a\u5224\u65ad\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u8ba9\u5176\u4e0e argc \u6bd4\u8f83\u5927\u5c0f\uff0c\u540e\u76f4\u63a5\u53d6 argv[optind] \u53ef\u53d6\u5230\u53c2\u6570\u4e2d\u7684\u6587\u4ef6\u540d\u3002 \u5982\u679c\u6709\u591a\u4e2a\u6587\u4ef6\u540d\u8981\u4ece\u53c2\u6570\u8bfb\u53d6\u7684\u8bdd\u53ef\u7528\u5982\u4e0b\u7684 code snippet if ( optind < argc ) { do { char * file = argv [ optind ]; // do something with file } while ( ++ optind < argc ); } \u4ee5\u4e0a\u6765\u6e90\u4e8e GNU grep \u6e90\u7801\u3002","title":"tee"},{"location":"chap4/#cp_hole","text":"code: c4/cp_hole.c \u53ef\u4ee5\u7528 dd \u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u6587\u4ef6\u7a7a\u6d1e\u7684\u6587\u4ef6\u7528\u4e8e\u6d4b\u8bd5 $ dd if = /dev/urandom bs = 4096 count = 2 of = fwh $ dd if = /dev/urandom seek = 7 bs = 4096 count = 2 $ dd if = /dev/zero bs = 4096 count = 9 of = fwnh \u96be\u70b9\u5728\u4e8e\u5982\u4f55\u68c0\u6d4b\u6587\u4ef6\u7a7a\u6d1e\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u542b\u6709\u6587\u4ef6\u7a7a\u6d1e\u7684\u6587\u4ef6\uff0c read() \u51fd\u6570\u4f1a\u6b63\u5e38\u8bfb\u5230\u4e00\u4e32 0\uff0c\u4f46\u5982\u679c\u76f4\u63a5\u5c06\u5176\u5199\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5219\u6587\u4ef6\u7a7a\u6d1e\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u4e0b\u6765\u3002 \u6240\u4ee5\uff0c\u57fa\u672c\u601d\u60f3\u662f\u5728\u5199\u6587\u4ef6\u524d\u5148\u68c0\u67e5 buf \u4e2d\u7684\u5185\u5bb9\u6709\u591a\u5c11\u662f\u7a7a\u5b57\u7b26\uff0c\u5c06\u7a7a\u5b57\u7b26 seek \u540e\u518d\u5199\u5165\u3002","title":"cp_hole"},{"location":"chap5/","text":"Cheaper 5-\u6df1\u5165\u63a2\u7a76\u6587\u4ef6 I/O \u00b6 \u8bcd\u6c47\u901f\u67e5 \u00b6 \u539f\u5b50\u6027\uff1aatomicity \u7ade\u4e89\u72b6\u6001\uff1arace conditions \u7b14\u8bb0 \u00b6 \u539f\u5b50\u6027 \u00b6 syscall \u662f\u4ee5\u539f\u5b50\u64cd\u4f5c\u65b9\u5f0f\u8fdb\u884c\u7684\uff0c\u5185\u6838\u8981\u4fdd\u8bc1\u67d0\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u6240\u6709\u6b65\u9aa4\u4f1a\u4f5c\u4e3a\u72ec\u7acb\u64cd\u4f5c\u800c\u4e00\u6b21\u6027\u52a0\u4ee5\u6267\u884c\uff0c\u671f\u95f4\u4e0d\u4f1a\u4e3a\u5176\u4ed6\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4e2d\u65ad\u3002 \u64cd\u4f5c\u5171\u4eab\u8d44\u6e90\u7684\u4e24\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u7684\u7ed3\u679c\u53d6\u51b3\u4e0e\u4e00\u4e2a\u65e0\u6cd5\u51b3\u5b9a\u7684\u987a\u5e8f\uff0c\u5373\u8fdb\u7a0b\u83b7\u5f97 CPU \u4f7f\u7528\u6743\u7684\u5148\u540e\u76f8\u5bf9\u987a\u5e8f\u3002 \u5f53\u540c\u65f6\u6307\u5b9a O_EXCL \u548c O_CREAT \u6807\u5fd7\u4f4d\u65f6\uff0c\u82e5\u6253\u5f00\u7684\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\u8fd9\u4f7f\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\u548c\u521b\u5efa\u6587\u4ef6\u5c5e\u4e8e\u540c\u4e00\u539f\u5b50\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u4e86 \u5f53\u524d\u8fdb\u7a0b\u662f\u6587\u4ef6\u7684\u521b\u5efa\u8005\uff0c\u56e0\u4e3a\u82e5\u5728\u5224\u65ad\u6587\u4ef6\u5b58\u5728\u4e4b\u540e\u518d\u6b21\u6253\u5f00\u6587\u4ef6\uff0c\u82e5\u7cfb\u7edf\u6b64\u65f6\u5224\u65ad\u6b64\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u5df2\u7528\u5b8c\uff0c\u5c06 CPU \u65f6\u95f4\u5206\u914d\u7ed9\u4e86\u5176\u4ed6\u8fdb\u7a0b\u5e76\u521b\u5efa\u4e86\u8be5\u6587\u4ef6\uff0c\u5219 \u4e24\u4e2a\u8fdb\u7a0b\u90fd\u5c06\u8ba4\u4e3a\u6b64\u6587\u4ef6\u4e3a\u81ea\u5df1\u521b\u5efa\u7684\u3002 \u540c\u6837\u7684\uff0c\u5982\u679c\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u6307\u5411\u4e00\u4e2a\u6587\u4ef6\uff0c\u5e76\u5411\u7ed3\u5c3e\u5199\u5165\u6570\u636e\uff0c\u6b64\u65f6\u4e5f\u8bb8\u4f1a\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\uff1a if ( lseek ( fd , 0 , SEEK_END ) == -1 ) errExit ( \"lseek\" ); if ( write ( fd , buf , len ) != len ) fatal ( \"Partial/failed Write\" ); \u76f8\u4f3c\u7684\uff0c\u82e5\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u5b8c lseek() \u540e\u6d88\u8017\u5b8c\u4e86\u65f6\u95f4\u7247\uff0c\u88ab\u6267\u884c\u7c7b\u4f3c\u4ee3\u7801\u7684\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u65ad\uff0c\u5219\u4e24\u4e2a\u8fdb\u7a0b\u4f1a\u5728\u5199\u5165\u6570\u636e\u524d\u5c06\u504f\u79fb\u91cf\u8bbe\u7f6e\u4e3a\u76f8\u540c\u4f4d\u7f6e\uff0c\u5219\u53ef\u4ee5 \u770b\u51fa\uff0c\u6b64\u65f6\u5f53\u539f\u8fdb\u7a0b\u518d\u6b21\u88ab\u8c03\u5ea6\u65f6\uff0c\u4f1a\u8986\u76d6\u7b2c\u4e8c\u4e2a\u8fdb\u7a0b\u5df2\u7ecf\u5199\u5165\u7684\u6570\u636e\uff0c\u6b64\u65f6\u53c8\u4e00\u6b21\u51fa\u73b0\u4e86\u7ade\u4e89\u72b6\u6001\u3002\u8981\u89c4\u907f\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e94\u5728\u6253\u5f00\u6587\u4ef6\u65f6\u52a0\u5165 O_APPEND \u6807\u5fd7\u4f4d \uff0c\u4f46\u5bf9\u4e0d\u652f\u6301 O_APPEND \u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5185\u6838\u4f1a\u5ffd\u7565 O_APPEND \uff0c\u6309\u7167\u4f20\u7edf\u7684\u65b9\u5f0f\u79fb\u52a8\u504f\u79fb\u91cf\uff0c\u56e0\u6b64\u4ecd\u53ef\u80fd\u5bfc\u81f4\u810f\u5199\u5165\u95ee\u9898\u3002 \u6587\u4ef6\u63a7\u5236 fcntl() \u00b6 #include <fcntl.h> int fcntl ( int fd , int cmd ...); cmd \u652f\u6301\u7684\u64cd\u4f5c\u5f88\u591a\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4e0d\u540c\u7c7b\u578b\u6216\u7701\u7565\uff0c\u5185\u6838\u4f1a\u6839\u636e cmd \u7684\u503c\u6765\u786e\u5b9a\u540e\u7eed\u53c2\u6570\u7684\u6570\u636e\u7c7b\u578b\u3002 \u7528\u9014\u4e4b\u4e00\u662f\u5bf9\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u83b7\u53d6\u6216\u4fee\u6539\u8bbf\u95ee\u6a21\u5f0f\u548c\u72b6\u6001\u6807\u5fd7\u3002 \u8981\u83b7\u53d6\u8bbe\u7f6e\uff0c\u5c06 cmd \u8bbe\u4e3a F_GETFL int flags , accessMode ; flags = fcntl ( fd , F_GETFL ); if ( flags == -1 ) errExit ( \"fnctl\" ); if ( flags & O_SYNC ) printf ( \"writes are synchronized \\n \" ); accessMode = flags & O_ACCMODE ; if ( accessMode == O_WRONLY || accessMode == O_RDWR ) printf ( \"file is writable \\n \" ); \u5224\u65ad\u6587\u4ef6\u7684\u8bbf\u95ee\u6a21\u5f0f\u9700\u8981\u8ba9 flags \u4e0e O_ACCMODE \u76f8\u4e0e\uff0c\u540e\u4e0e\u5e38\u91cf\u6bd4\u5bf9\uff0c\u5176\u4f59\u76f4\u63a5\u76f8\u4e0e\u5224\u65ad\u5373\u53ef\u3002 \u4f7f\u7528 F_SETFL \u4fee\u6539\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u67d0\u4e9b\u72b6\u6001\u6807\u5fd7\uff0c\u5141\u8bb8\u4fee\u6539\u7684\u6807\u5fd7\u6709 O_APPEND O_NONBLOCK O_NOATIME O_ASYNC O_DIRECT \u5176\u4ed6\u6807\u5fd7\u4f4d\u4e0d\u5141\u8bb8\u4fee\u6539\uff0c\u5c06\u88ab\u7cfb\u7edf\u5ffd\u7565\u3002 \u5f53\u6587\u4ef6\u4e0d\u662f\u88ab\u8c03\u7528\u7684\u7a0b\u5e8f\u6253\u5f00\u65f6\uff0c\u6216\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u83b7\u53d6\u662f\u7531 open() \u4ee5\u5916\u7684\u65b9\u5f0f\u83b7\u53d6\u7684\u65f6\u5019\uff0c\u8fd9\u663e\u5f97\u683c\u5916\u6709\u7528\u3002 \u5148\u4f7f\u7528 F_GETFL \u83b7\u53d6\u6587\u4ef6\u5f53\u524d\u7684\u72b6\u6001\uff0c\u53d8\u66f4\u9700\u8981\u4fee\u6539\u7684\u6bd4\u7279\u4f4d\u540e\u518d\u8c03\u7528 fcntl() \u7684 F_SETFL \u66f4\u65b0\u72b6\u6001\u3002 \u4f8b\u5982\uff0c\u8981\u589e\u52a0 O_APPEND \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801 int flags ; flags = fcntl ( fd , F_GETFL ); if ( flags == -1 ) errExit ( \"fcntl\" ); flags |= O_APPEND ; if ( fcntl ( fd , F_SETFL , flags ) == -1 ) errExit ( \"fcntl\" ); \u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u6253\u5f00\u6587\u4ef6\u7684\u5173\u7cfb \u00b6 \u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u6253\u5f00\u7684\u6587\u4ef6\u5e76\u975e\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff0c\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u6307\u5411\u540c\u4e00\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u5728\u76f8\u540c\u6216\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\u6253\u5f00\u3002 \u5185\u6838\u7ef4\u62a4\u4e09\u4e2a\u6570\u636e\u7ed3\u6784 \u8fdb\u7a0b\u7ea7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868 \u7cfb\u7edf\u7ea7\u7684\u6253\u5f00\u6587\u4ef6\u8868 \u6587\u4ef6\u7cfb\u7edf\u7684 i-node \u8868 \u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\uff0c\u5185\u6838\u4e3a\u5176\u7ef4\u62a4\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 (open file descriptor) \u8868\uff0c\u8868\u7684\u6bcf\u4e00\u9879\u90fd\u8bb0\u5f55\u4e86\u5355\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u76f8\u5173\u4fe1\u606f\u3002 \u63a7\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e00\u7ec4\u6807\u5fd7 \u5bf9\u6253\u5f00\u6587\u4ef6\u53e5\u67c4\u7684\u5f15\u7528 \u5bf9\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u7cfb\u7edf\u7ef4\u62a4\u4e00\u4e2a\u7cfb\u7edf\u7ea7\u7684\u63cf\u8ff0\u8868\u683c (open file description table)\uff0c\u5c06\u8868\u4e2d\u7684\u6761\u76ee\u79f0\u4e3a\u6253\u5f00\u6587\u4ef6\u53e5\u67c4 (open file handle) \u4e00\u4e2a\u6253\u5f00\u6587\u4ef6\u53e5\u67c4\u5b58\u50a8\u4e86\u4e00\u4e2a\u4e0e\u6253\u5f00\u6587\u4ef6\u76f8\u5173\u7684\u6240\u6709\u4fe1\u606f \u5f53\u524d\u6587\u4ef6\u7684\u504f\u79fb\u91cf \u6253\u5f00\u6587\u4ef6\u65f6\u6240\u4f7f\u7528\u7684\u72b6\u6001\u6807\u5fd7 \u6587\u4ef6\u8bbf\u95ee\u6a21\u5f0f \u4e0e\u4fe1\u53f7\u9a71\u52a8 I/O \u76f8\u5173\u7684\u914d\u7f6e \u5bf9\u8be5\u6587\u4ef6 i-node \u5bf9\u8c61\u7684\u5f15\u7528 \u6587\u4ef6\u7cfb\u7edf\u4f1a\u4e3a\u5176\u4e0a\u7684\u6587\u4ef6\u7ef4\u62a4 i-node \u8868\uff0c\u4fe1\u606f\u4e00\u822c\u5305\u62ec \u6587\u4ef6\u7c7b\u578b \u4e00\u4e2a\u6307\u5411\u8be5\u6587\u4ef6\u6240\u6301\u6709\u7684\u9501\u7684\u5217\u8868\u7684\u6307\u9488 \u5305\u62ec\u6587\u4ef6\u5927\u5c0f\u4ee5\u53ca\u4e0d\u540c\u7c7b\u578b\u64cd\u4f5c\u76f8\u5173\u7684\u65f6\u95f4\u6233\u7684\u5404\u79cd\u6587\u4ef6\u5c5e\u6027 \u4e24\u4e2a\u4e0d\u540c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u82e5\u6307\u5411\u540c\u4e00\u4e2a\u6253\u5f00\u6587\u4ef6\u53e5\u67c4\uff0c\u4f1a\u5171\u4eab\u540c\u4e00\u4e2a\u6587\u4ef6\u504f\u79fb\u91cf\uff0c\u800c\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u5fd7\u4e3a\u8fdb\u7a0b\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u79c1\u6709\u3002 \u4f55\u65f6\u9700\u8981\u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1f\u8003\u8651 Shell \u7684\u91cd\u5b9a\u5411\u8bed\u6cd5 2>&1 \uff0c\u5c06\u6807\u51c6\u9519\u8bef\u91cd\u5b9a\u5411\u81f3\u6807\u51c6\u8f93\u51fa\uff0c\u56e0\u6b64\u8003\u8651\u4e0b\u5217\u547d\u4ee4\uff0c\u5c06\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u5199\u5165\u6587\u4ef6\u4e2d ./myscript > result.log 2 > & 1 \u6ce8\u610f Shell \u4ece\u5de6\u81f3\u53f3\u5904\u7406\u91cd\u5b9a\u5411\u8bed\u53e5\u3002 Shell \u5728\u6b64\u5904\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26 1 \u590d\u5236\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26 2 \u5b9e\u73b0\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u91cd\u5b9a\u5411\uff0c\u6b64\u65f6\u6587\u4ef6\u63cf\u8ff0\u7b26 2 \u548c 1 \u6307\u5411\u540c\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u3002 \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u4e0d\u80fd\u7b80\u5355\u7684\u6253\u5f00\u4e24\u6b21\u6587\u4ef6\uff0c\u56e0\u4e24\u6b21\u6253\u5f00\u751f\u6210\u4e24\u4e2a\u4e0d\u540c\u7684\u6587\u4ef6\u53e5\u67c4\uff0c\u4e0d\u4f1a\u5171\u4eab\u540c\u4e00\u6587\u4ef6\u504f\u79fb\u91cf\u6307\u9488\uff0c\u5bfc\u81f4\u53ef\u80fd\u4e92\u76f8\u8986\u76d6\u5bf9\u65b9\u7684\u8f93\u51fa\uff0c\u5176\u6b21\u6253\u5f00\u7684\u6587\u4ef6 \u4e0d\u4e00\u5b9a\u662f\u78c1\u76d8\u6587\u4ef6\uff0c\u4e5f\u53ef\u80fd\u662f\u7ba1\u9053\u6216\u5176\u4ed6\u7684\u6587\u4ef6\u3002 #include <unistd.h> int dup ( int oldfd ); dup() \u8c03\u7528\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 oldfd\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u63cf\u8ff0\u7b26\uff0c\u4e8c\u8005\u6307\u5411\u540c\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4\u3002\u7cfb\u7edf\u4fdd\u8bc1\u65b0\u7f16\u53f7\u4e00\u5b9a\u662f\u7f16\u53f7\u6700\u4f4e\u7684\u672a\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 \u82e5\u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u6253\u5f00 0 \uff0c 1 \uff0c 2 \u4e09\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6b64\u65f6\u8c03\u7528 dup() \u4f1a\u8fd4\u56de\u6587\u4ef6\u63cf\u8ff0\u7b26 3 \u3002 \u82e5\u5e0c\u671b\u8fd4\u56de 2 \uff0c\u5219\u53ef\u5148\u5173\u95ed 2 \uff0c\u518d\u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u4e5f\u53ef\u4f7f\u7528 dup2() \u7b80\u5316\u64cd\u4f5c #include <unistd.h> int dup2 ( int oldfd , int newfd ); dup2() \u590d\u5236 oldfd \u53c2\u6570\u6307\u5b9a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7f16\u53f7\u4e3a newfd \u3002\u82e5 newfd \u6240\u6307\u5b9a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5df2\u7ecf\u6253\u5f00\uff0c\u5219 dup2() \u4f1a\u5148\u5173\u95ed\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 dup2() \u4f1a\u5ffd\u7565 newfd \u5173\u95ed\u671f\u95f4\u53d1\u751f\u7684\u9519\u8bef\uff0c\u6700\u597d\u63d0\u524d\u663e\u5f0f\u5173\u95ed newfd \u3002 oldfd \u82e5\u4e0d\u5b58\u5728\uff0c\u5219 dup2() \u5931\u8d25\u5e76\u8fd4\u56de\u9519\u8bef EBADF \uff0c\u5e76\u4e14\u4e0d\u5173\u95ed newfd \uff0c\u82e5 oldfd \u6709\u6548\u4e14\u4e0e newfd \u76f8\u7b49\uff0c\u5219 dup2() \u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c \u4e14\u4e0d\u5173\u95ed newfd \uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002 \u4e5f\u53ef\u4f7f\u7528 fcntl() \u7684 F_DUPFD \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26 newfd = fcntl ( oldfd , F_DUPFD , startfd ); \u5c06\u590d\u5236 oldfd \uff0c\u5e76\u5c06\u5927\u4e8e\u7b49\u4e8e startfd \u7684\u6700\u5c0f\u672a\u7528\u7684\u503c\u4f5c\u4e3a\u63cf\u8ff0\u7b26\u7f16\u53f7\u3002\u6b64\u8c03\u7528\u53ef\u4fdd\u8bc1\u65b0\u7684\u63cf\u8ff0\u7b26\u843d\u5728\u7279\u5b9a\u7684\u533a\u57df\u8303\u56f4\u5185\u3002 \u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u5176\u81ea\u5df1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u5fd7\uff0c\u53ef\u4f7f\u7528 dup3() \u5728\u590d\u5236\u540c\u65f6\u63a7\u5236\u65b0\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u5fd7 #define _GNU_SOURCE #include <unistd.h> int dup3 ( int oldfd , int newfd , int flags ); dup3() \u4e3a Linux \u7279\u6709 \u5728\u6587\u4ef6\u7279\u5b9a\u504f\u79fb\u91cf\u7684 I/O \u00b6 \u7cfb\u7edf\u8c03\u7528 pread() \u548c pwrite() \u5b8c\u6210\u4e0e read() \u548c write() \u76f8\u540c\u7684\u5de5\u4f5c\uff0c\u53ea\u662f\u53ef\u4ee5\u6307\u5b9a\u6587\u4ef6\u504f\u79fb\u91cf\uff0c\u800c\u975e\u5728\u5f53\u524d\u504f\u79fb\u91cf\u5904\u505a I/O \u64cd\u4f5c\uff0c\u4e14\u4e0d \u6539\u53d8\u5f53\u524d\u504f\u79fb\u91cf\u3002 #include <unistd.h> ssize_t pread ( int fd , void * buf , size_t count , off_t offset ); ssize_t pwrite ( int fd , const void * buf , size_t count , off_t offset ); \u597d\u5904\u662f\uff0c\u4e00\u65b9\u9762\uff0c\u80fd\u591f\u4fdd\u8bc1\u79fb\u52a8\u504f\u79fb\u91cf\u548c\u8bfb\u5199\u64cd\u4f5c\u662f\u539f\u5b50\u6027\u7684\uff0c\u53e6\u5916\u6bd4\u8d77\u5148\u79fb\u52a8\u504f\u79fb\u91cf\u518d\u5199\u5165\u8981\u7701\u53bb\u4e00\u90e8\u5206\u7cfb\u7edf\u8c03\u7528\u5e26\u6765\u7684\u53ef\u5ffd\u7565\u7684\u6027\u80fd\u63d0\u5347\u3002(\u4f46\u663e\u7136\u901a\u5e38 I/O \u7684\u6027\u80fd\u74f6\u9888\u90fd\u5728\u8bbe\u5907 I/O \u800c\u975e\u7cfb\u7edf\u8c03\u7528\uff0cI/O \u7684\u5f00\u9500\u8fdc\u5927\u4e8e\u7cfb\u7edf\u8c03\u7528)\u3002 \u5bf9 pread() \u548c pwrite() \u800c\u8a00\uff0cfd \u6307\u4ee3\u7684\u6587\u4ef6\u5fc5\u987b\u53ef\u5b9a\u4f4d\uff0c\u5373\u5141\u8bb8\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u6267\u884c lseek() \u64cd\u4f5c\u3002 \u5c24\u5176\u5728\u591a\u7ebf\u7a0b\u7f16\u7a0b\u65f6\uff0c\u6b64\u79cd\u65b9\u6cd5\u4e3a\u4fdd\u8bc1\u7cfb\u7edf\u8c03\u7528\u7684\u539f\u5b50\u6027\u663e\u7136\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u5206\u6563\u8f93\u5165\u548c\u96c6\u4e2d\u8f93\u51fa \u00b6 #include <sys/uio.h> ssize_t readv ( int fd , const struct iovec * iov , int iovcnt ); ssize_t writev ( int fd , const struct iovec * iov , int iovcnt ); \u8fd9\u4e9b\u51fd\u6570\u53ef\u4e00\u6b21\u4f20\u8f93\u591a\u4e2a\u7f13\u51b2\u533a\u7684\u6570\u636e\u3002 iov \u5b9a\u4e49\u4e86\u4e00\u7ec4\u7528\u6765\u4f20\u8f93\u6570\u636e\u7684\u7f13\u51b2\u533a\uff0c\u6574\u5f62\u6570\u6307\u5b9a\u4e86 iov \u7684\u6210\u5458\u4e2a\u6570\uff0c iov \u4e2d\u7684\u6bcf\u4e2a\u6210\u5458\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b struct iovec { void * iov_base ; size_t iov_len ; }; readv() \u5b9e\u73b0\u4e86\u5206\u6563\u8f93\u5165\uff0c\u4ece fd \u8bfb\u4e00\u4e32\u8fde\u7eed\u7684\u5b57\u8282\uff0c\u7136\u540e\u5c06\u5176\u6563\u7f6e\u4e8e iov \u6307\u5b9a\u7684\u7f13\u51b2\u533a\u4e2d\u3002 readv() \u7684\u7279\u70b9\u4f9d\u7136\u662f\u4fdd\u8bc1\u539f\u5b50\u6027\u3002 \u8c03\u7528 readv() \u8fd4\u56de\u6210\u529f\u8bfb\u533a\u7684\u5b57\u8282\u6570\uff0c\u82e5\u6587\u4ef6\u7ed3\u675f\u8fd4\u56de 0 \uff0c\u8c03\u7528\u8005\u9700\u5bf9\u5176\u8fd4\u56de\u503c\u8fdb\u884c\u68c0\u67e5\uff0c\u82e5\u6570\u636e\u4e0d\u8db3\u586b\u6ee1\u7f13\u51b2\u533a\uff0c\u5219\u53ea\u4f1a\u5360\u7528\u90e8\u5206\u7f13\u51b2\u533a\uff0c\u6700\u540e\u4e00\u4e2a\u7f13\u51b2 \u533a\u53ef\u80fd\u53ea\u6709\u90e8\u5206\u6570\u636e\u3002 writev() \u5b9e\u73b0\u4e86\u96c6\u4e2d\u8f93\u51fa\u3002\u5c06 iov \u4e2d\u7684\u5185\u5bb9\u62fc\u63a5\u8d77\u6765\uff0c\u4ee5\u8fde\u7eed\u7684\u5b57\u8282\u5e8f\u5217\u5199\u5165\u6587\u4ef6\u63cf\u8ff0\u7b26 fd \u6307\u4ee3\u7684\u6587\u4ef6\u4e2d\u3002 \u663e\u7136 writev() \u7684\u64cd\u4f5c\u662f\u539f\u5b50\u6027\u7684\u3002 writev() \u540c\u6837\u53ef\u80fd\u5b58\u5728\u90e8\u5206\u5199\u7684\u95ee\u9898\u3002 \u73b0\u4ee3 Linux \u63d0\u4f9b\u4e86 preadv() \u548c pwritev() \u53ef\u5728\u7279\u5b9a\u504f\u79fb\u91cf\u5904\u8fdb\u884c\u5206\u6563\u8f93\u5165/\u96c6\u4e2d\u8f93\u51fa\u7684 I/O\uff0c\u867d\u7136\u5e76\u975e\u6807\u51c6\uff0c\u4f46 BSD \u652f\u6301\u8be5\u8c03\u7528\u3002 #define _BSD_SOURCE #include <sys/uio.h> ssize_t preadv ( int fd , const struct iovec * iov , int iovcnt , off_t offset ); ssize_t pwritev ( int fd , const struct iovec * iov , int iovcnt , off_t offset ); \u622a\u65ad\u6587\u4ef6 \u00b6 #include <unistd.h> int truncate ( const char * pathname , off_t length ); int ftruncate ( int fd , off_t length ); \u82e5\u5f53\u524d\u6587\u4ef6\u957f\u5ea6\u5927\u4e8e length \uff0c\u5219\u4e22\u5f03\u8d85\u51fa\u7684\u90e8\u5206\uff0c\u82e5\u5c0f\u4e8e length \uff0c\u5219\u5728\u6587\u4ef6\u7ed3\u5c3e\u6dfb\u52a0\u7a7a\u5b57\u8282\u6216\u6587\u4ef6\u7a7a\u6d1e\u3002 \u975e\u963b\u585e I/O \u00b6 \u82e5\u6253\u5f00\u6587\u4ef6\u65f6\u6307\u5b9a O_NUNBLOCK \uff0c\u5219 \u82e5 open() \u672a\u7acb\u5373\u6253\u5f00\u6587\u4ef6\uff0c\u5219\u8fd4\u56de\u9519\u8bef\uff0c\u800c\u975e\u9677\u5165\u963b\u585e \u8c03\u7528 open() \u6210\u529f\u540e\u7684 I/O \u64cd\u4f5c\u4e5f\u662f\u975e\u963b\u585e\u7684\uff0c\u82e5 I/O \u64cd\u4f5c\u672a\u7acb\u5373\u5b8c\u6210\uff0c\u5219\u53ef\u80fd\u53ea\u5199\u5165\u90e8\u5206\u6570\u636e\uff0c\u5e76\u8fd4\u56de EAGAIN \u6216 EWOULDBLOCK \u9519\u8bef\u3002 \u7ba1\u9053\uff0cFIFO\uff0c\u5957\u63a5\u5b57\uff0c\u8bbe\u5907\u90fd\u652f\u6301\u975e\u963b\u585e\u6a21\u5f0f\u3002 \u7531\u4e8e\u5185\u6838\u7f13\u51b2\u533a\u4fdd\u8bc1\u666e\u901a\u6587\u4ef6 I/O \u4e0d\u4f1a\u963b\u585e\uff0c\u56e0\u6b64\u6253\u5f00\u666e\u901a\u6587\u4ef6\u901a\u5e38\u5ffd\u7565 O_NONBLOCK \u6807\u5fd7\uff0c\u4f46\u82e5\u4f7f\u7528\u5f3a\u5236\u6587\u4ef6\u9501\u65f6\uff0c\u8be5\u6807\u5fd7\u5bf9\u666e\u901a\u6587\u4ef6\u4e5f\u53ef\u7528\u3002 \u5927\u6587\u4ef6 I/O \u00b6 \u901a\u5e38 off_t \u4e3a signed long \u7c7b\u578b\uff0c\u4f46\u8fd9\u6837\u5c06\u6587\u4ef6\u5927\u5c0f\u9650\u5236\u5728\u4e86 \\(2^31-1\\) \u5373 2GB \u5927\u5c0f\u3002 \u53ef\u4f7f\u7528\u652f\u6301\u5927\u6587\u4ef6\u64cd\u4f5c\u7684\u5907\u9009 API \u6216\u5c06 _FILE_OFFSET_BITS \u5b8f\u7684\u503c\u8bbe\u4e3a 64\u3002 \u82e5\u4f7f\u7528\u5907\u9009\u7684\u8fc7\u6e21 API\uff0c\u5219\u53ef\u4f7f\u7528\u539f\u6587\u4ef6 I/O \u51fd\u6570\u7684 64 \u4f4d\u7248\u672c\u3002\u5373 open64() \uff0c lseek64() \u7b49\u3002 \u66f4\u597d\u7684\u505a\u6cd5\u662f\u5728\u7f16\u8bd1\u65f6\u5c06 _FILE_OFFSET_BITS \u8bbe\u4e3a 64\uff0c\u6b64\u65f6\u6240\u6709 32 \u4f4d\u51fd\u6570\u548c\u6570\u636e\u7c7b\u578b\u90fd\u5c06\u8f6c\u6362\u4e3a 64 \u4f4d\u7248\u672c\u3002 \u5728 64 \u4f4d\u7cfb\u7edf\u4e0a\uff0c open64() \u548c open() \u4e3a\u540c\u4e00\u4e2a\u5b9e\u73b0\uff0c\u4e14\u5bf9\u5e94\u7684\u51fd\u6570\u5df2\u7ecf\u4e3a 64 \u4f4d\u7248\u672c\u3002 \u5bf9\u4e8e printf() ,\u5e94\u5c06 off_t \u5f3a\u5236\u8f6c\u6362\u4e3a long long \uff0c\u540e\u4f7f\u7528 %lld \u4fee\u9970\u7b26\u3002 /dev/fd \u76ee\u5f55 \u00b6 \u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\uff0c\u7cfb\u7edf\u63d0\u4f9b\u4e00\u4e2a\u865a\u62df\u7684\u76ee\u5f55 /dev/fd \uff0c\u8be5\u76ee\u5f55\u5305\u542b /dev/fd/n \u5f62\u5f0f\u7684\u6587\u4ef6\u540d\uff0c\u5176\u4e2d n \u662f\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5bf9\u5e94\u7684\u7f16\u53f7\u3002 \u65e9\u671f\u7248\u672c\u7684 Linux \u5c06\u8be5\u6587\u4ef6\u94fe\u63a5\u81f3 /proc/self/fd \u4e2d\uff0c\u73b0\u4ee3 Linux \u76f4\u63a5\u5c06\u5176\u94fe\u63a5\u5230\u6587\u4ef6\u672c\u8eab\u3002 \u7cfb\u7edf\u8fd8\u63d0\u4f9b\u4e86 3 \u4e2a\u7b26\u53f7\u94fe\u63a5 /dev/stdin \uff0c /dev/stdout \u548c /dev/stderr \u3002\u65e9\u671f\u94fe\u63a5\u5230 /dev/fd \uff0c\u73b0\u5728\u94fe\u63a5\u5230 /proc/self/fd/ \u521b\u5efa\u4e34\u65f6\u6587\u4ef6 \u00b6 #include <stdlib.h> int mkstemp ( char * template ); mkstemp() \u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u6587\u4ef6\u540d\u5e76\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 \u53c2\u6570 template \u91c7\u7528\u8def\u5f84\u540d\u5f62\u5f0f\uff0c\u5176\u4e2d\u6700\u540e 6 \u4e2a\u5b57\u7b26\u5fc5\u987b\u662f XXXXXX ,\u8fd9 6 \u4e2a\u5b57\u7b26\u4f1a\u88ab\u66ff\u6362\uff0c\u4e14\u4fee\u6539\u540e\u7684\u6587\u4ef6\u540d\u4f1a\u901a\u8fc7 template \u4f20\u56de\uff0c\u56e0\u6b64 template \u5fc5\u987b\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff0c\u800c\u4e0d\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26\u5e38\u91cf\u3002 \u6587\u4ef6\u62e5\u6709\u8005\u5bf9 mkstemp() \u5efa\u7acb\u7684\u6587\u4ef6\u62e5\u6709\u8bfb\u5199\u6743\u9650\uff0c\u5176\u4ed6\u7528\u6237\u6ca1\u6709\u4efb\u4f55\u6743\u9650\uff0c\u4e14\u6253\u5f00\u6587\u4ef6\u4f7f\u7528 O_EXCL \u53c2\u6570\uff0c\u4fdd\u8bc1\u8c03\u7528\u8005\u72ec\u5360\u8bbf\u95ee\u6587\u4ef6\u3002 \u901a\u5e38\uff0c\u5728\u521b\u5efa\u4e34\u65f6\u6587\u4ef6\u540e\uff0c\u7a0b\u5e8f\u5c31\u5e94\u4f7f\u7528 unlink() \u5c06\u5176\u5220\u9664\u3002 #include <stdio.h> FILE * tmpfile ( void ); tmpfile() \u521b\u5efa\u4e00\u4e2a\u540d\u79f0\u552f\u4e00\u7684\u4e34\u65f6\u6587\u4ef6\uff0c\u5e76\u4ee5\u8bfb\u5199\u65b9\u5f0f\u6253\u5f00\uff0c\u6210\u529f\u5c06\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6d41\u4f9b stdio \u4f7f\u7528\uff0c\u6587\u4ef6\u6d41\u5173\u95ed\u540e\u5c06\u81ea\u52a8\u5220\u9664\u4e34\u65f6\u6587\u4ef6\uff0c\u4e3a\u8fbe\u5230\u8be5\u76ee\u7684 \uff0c tmpfile() \u51fd\u6570\u5c06\u5728\u6253\u5f00\u6587\u4ef6\u540e\u7acb\u5373\u8c03\u7528 unlink() \u6765\u5220\u9664\u6587\u4ef6\u3002 \u4e60\u9898 \u00b6 5-1 \u00b6 code: c5/large_file.c \u5c31\u662f\u6539\u4ee3\u7801\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002 5-2 \u00b6 code: c5/append_exists.c \u5728\u4f7f\u7528 O_APPEND \u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u65f6\uff0c\u5c3d\u7ba1\u8bbe\u7f6e\u504f\u79fb\u91cf\u4e3a 0 \uff0c\u4ecd\u7136\u4f1a\u5411\u6587\u4ef6\u4e2d\u8ffd\u52a0\u5199\u5165\u3002 5-3 \u00b6 code: c5/atomic_append.c \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a $ ls -l \u603b\u7528\u91cf 3164 -rwxrwxr-x 1 panxiao81 panxiao81 31072 5\u6708 27 19 :12 append_exists -rw-rw-r-- 1 panxiao81 panxiao81 1492 5\u6708 27 18 :58 append_exists.c -rwxrwxr-x 1 panxiao81 panxiao81 31992 5\u6708 27 19 :41 atomic_append -rw-rw-r-- 1 panxiao81 panxiao81 1843 5\u6708 27 19 :41 atomic_append.c -rw------- 1 panxiao81 panxiao81 2000000 5\u6708 27 19 :42 f1 -rw------- 1 panxiao81 panxiao81 1121998 5\u6708 27 19 :42 f2 -rwxrwxr-x 1 panxiao81 panxiao81 29552 5\u6708 27 19 :13 large_file -rw-rw-r-- 1 panxiao81 panxiao81 1375 5\u6708 25 02 :15 large_file.c -rw-rw-r-- 1 panxiao81 panxiao81 298 5\u6708 27 18 :46 Makefile \u53ef\u4ee5\u770b\u5230 f1 \u660e\u663e\u6bd4 f2 \u5927\u7684\u591a\u3002 \u7531\u4e8e\u4e0d\u80fd\u4fdd\u8bc1\u65e0 O_APPEND \u65f6\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u56e0\u6b64\u5728\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u5199\u5165\u65f6\uff0c\u5bf9\u4e8e f2 \u7684\u60c5\u51b5\u5199\u5165\u7684\u6570\u636e\u4e92\u76f8\u8986\u76d6\uff0c\u5bfc\u81f4\u4e86\u51fa\u73b0\u6b64\u60c5\u51b5\u3002 5-4 \u00b6 code: c5/dup.c \u5bf9\u4e8e dup() \u53ef\u4ee5\u4f7f\u7528 fnctl(oldfd, F_DUPFD, 0) \uff0c dup2() \u53ef\u4ee5\u6539\u5199\u4e3a fcntl(oldfd, F_DUPFD, newfd) \uff0c\u5269\u4e0b\u7684\u53ea\u9700\u8981\u505a\u597d\u9519\u8bef\u5904\u7406\u5c31\u53ef\u4ee5\u4e86\u3002 \u6ce8\u610f\uff0c\u6839\u636e dup(2) \u6240\u8bf4: The steps of closing and reusing the file descriptor newfd are performed atomically. \u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528 dup2() \u53ef\u4ee5\u4fdd\u8bc1\u5173\u95ed newfd \u548c\u518d\u6b21\u6253\u5f00 newfd \u662f\u6709\u539f\u5b50\u6027\u7684\uff0c\u8fd9\u70b9\u5728\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u7684\u7248\u672c\u4e2d\u662f\u65e0\u6cd5\u505a\u5230\u7684\u3002 \u6e90\u7801\u4e2d\u7684 main() \u53ea\u662f\u4e3a\u4e86\u901a\u8fc7\u7f16\u8bd1\u800c\u5df2\uff0c\u6211\u6ca1\u6709\u5199\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u6211\u89c9\u5f97\u4ed6\u5927\u6982\u662f\u80fd\u6b63\u5e38\u5de5\u4f5c\u7684\u3002 5-5 \u00b6 code: c5/check_descriptor.c \u7531\u4e8e\u9898\u76ee\u8bf4\u660e\u975e\u5e38\u7b80\u7565\uff0c\u4ee3\u7801\u4e5f\u5199\u7684\u975e\u5e38\u7b80\u7565\u3002 \u7531\u4e8e\u53ea\u662f\u8981\u67e5\u770b\u662f\u5426\u5171\u4eab\uff0c\u6211\u53ea\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5224\u65ad\u662f\u5426\u76f8\u7b49\u3002 5-6 \u00b6 \u53ef\u89c1\uff0cfd2 \u7531 fd1 \u590d\u5236\u800c\u6765\uff0c\u5171\u4eab\u540c\u4e00\u504f\u79fb\u91cf\uff0cfd3 \u662f\u53e6\u4e00\u4efd\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5355\u72ec\u7ef4\u62a4\u4e00\u4efd\u504f\u79fb\u91cf \u7b2c\u4e00\u6b21\uff1a Hello, \u7b2c\u4e8c\u6b21\uff1a Hello,world \u7531\u4e8e\u5171\u4eab\u540c\u4e00\u504f\u79fb\u91cf\uff0c\u4e14\u6587\u4ef6\u504f\u79fb\u91cf\u968f write() \u540e\u79fb \u7b2c\u4e09\u6b21\uff1a\u7531\u4e8e lseek() \u5c06\u504f\u79fb\u91cf\u79fb\u52a8\u56de\u6587\u4ef6\u5f00\u5934\uff0c\u518d\u6b21\u5199\u5165\u8986\u76d6\u4e86\u8fc7\u53bb\u7684\u6587\u5b57\uff0c\u73b0\u5728\u5185\u5bb9\u4e3a HELLO,world \u7b2c\u56db\u6b21\uff1afd3 \u7684\u6587\u4ef6\u504f\u79fb\u91cf\u4e00\u76f4\u5728\u5f00\u5934\uff0c\u56e0\u6b64\u8986\u76d6\u4e86\u539f\u6709\u6587\u5b57\uff0c\u5185\u5bb9\u4e3a Gidday world 5-7 \u00b6 code: c5/readv_writev.c \u4e3a\u4fdd\u8bc1\u539f\u5b50\u6027\uff0c\u5bf9\u4e8e\u8bfb\u5165\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u5f97\u77e5\u603b\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u5206\u914d\u4e00\u6bb5\u4e34\u65f6\u7684 buffer \u5c06\u4fe1\u606f\u4e00\u6b21\u6027\u8bfb\u5165\uff0c\u518d\u5206\u5f00\u5199\u5165\u7ed9\u5b9a\u7684\u7f13\u51b2\u533a\u3002\u5bf9\u5199\u5165\u64cd\u4f5c\u4e5f\u540c\u7406\uff0c\u9700\u8981\u5148\u5c06\u7ed9\u5b9a\u7684\u7f13\u51b2\u533a\u5199\u5165\u5230\u4e34\u65f6\u5206\u914d\u7684\u5927\u7f13\u51b2\u533a\uff0c\u4e4b\u540e\u4e00\u6b21\u6027\u5bf9\u6574\u4e2a\u5927\u7f13\u51b2\u533a\u8fdb\u884c\u5199\u5165\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u5185\u5b58\u5185\u5bb9\u7684\u62f7\u8d1d\u64cd\u4f5c\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u53ef\u4ee5\u4f7f\u7528 memcpy() \u6765\u5b9e\u73b0\u3002\u5927\u7f13\u51b2\u533a\u7684\u64cd\u4f5c\u4e5f\u53ea\u9700\u8981\u6839\u636e iov_len \u8ba1\u7b97\u504f\u79fb\u91cf\u5373\u53ef\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u8bfb\u5165\u7f13\u51b2\u533a\uff0c\u9700\u8981\u5224\u65ad\u8bfb\u5165\u7684\u5b57\u8282\u6570\u4e2d\u5c1a\u672a\u5199\u5165\u7684\u5927\u5c0f\u4e0e\u5f53\u524d\u5757\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u82e5\u5c1a\u672a\u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u5c0f\u4e8e\u5f53\u524d\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff0c\u5219\u53ef\u5224\u65ad\u5199\u5b8c\u5f53\u524d\u5269\u4f59\u7684\u6570\u636e\u5373\u53ef\u7ed3\u675f\u5e76\u8fd4\u56de\u3002 readv() \u4e0d\u4f1a\u4fdd\u8bc1\u5f53\u8bfb\u5230\u7684\u6570\u636e\u672a\u5360\u6ee1\u7f13\u51b2\u533a\u65f6\u5269\u4f59\u7684\u7f13\u51b2\u533a\u5185\u7684\u6570\u636e\uff0c\u56e0\u6b64\u8fd9\u79cd\u5b9e\u73b0\u662f\u5b8c\u5168\u5408\u7406\u7684\u3002 \u8fd9\u6bb5\u4ee3\u7801\u6211\u540c\u6837\u6ca1\u6709\u7ecf\u8fc7\u5b8c\u6574\u6d4b\u8bd5\uff0c main() \u51fd\u6570\u5b58\u5728\u4ecd\u540c\u6837\u53ea\u662f\u4e3a\u4e86\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002","title":"\u7b2c\u4e94\u7ae0-\u6df1\u5165\u63a2\u7a76\u6587\u4ef6 I/O"},{"location":"chap5/#cheaper-5-io","text":"","title":"Cheaper 5-\u6df1\u5165\u63a2\u7a76\u6587\u4ef6 I/O"},{"location":"chap5/#_1","text":"\u539f\u5b50\u6027\uff1aatomicity \u7ade\u4e89\u72b6\u6001\uff1arace conditions","title":"\u8bcd\u6c47\u901f\u67e5"},{"location":"chap5/#_2","text":"","title":"\u7b14\u8bb0"},{"location":"chap5/#_3","text":"syscall \u662f\u4ee5\u539f\u5b50\u64cd\u4f5c\u65b9\u5f0f\u8fdb\u884c\u7684\uff0c\u5185\u6838\u8981\u4fdd\u8bc1\u67d0\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u6240\u6709\u6b65\u9aa4\u4f1a\u4f5c\u4e3a\u72ec\u7acb\u64cd\u4f5c\u800c\u4e00\u6b21\u6027\u52a0\u4ee5\u6267\u884c\uff0c\u671f\u95f4\u4e0d\u4f1a\u4e3a\u5176\u4ed6\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4e2d\u65ad\u3002 \u64cd\u4f5c\u5171\u4eab\u8d44\u6e90\u7684\u4e24\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u7684\u7ed3\u679c\u53d6\u51b3\u4e0e\u4e00\u4e2a\u65e0\u6cd5\u51b3\u5b9a\u7684\u987a\u5e8f\uff0c\u5373\u8fdb\u7a0b\u83b7\u5f97 CPU \u4f7f\u7528\u6743\u7684\u5148\u540e\u76f8\u5bf9\u987a\u5e8f\u3002 \u5f53\u540c\u65f6\u6307\u5b9a O_EXCL \u548c O_CREAT \u6807\u5fd7\u4f4d\u65f6\uff0c\u82e5\u6253\u5f00\u7684\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\u8fd9\u4f7f\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\u548c\u521b\u5efa\u6587\u4ef6\u5c5e\u4e8e\u540c\u4e00\u539f\u5b50\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u4e86 \u5f53\u524d\u8fdb\u7a0b\u662f\u6587\u4ef6\u7684\u521b\u5efa\u8005\uff0c\u56e0\u4e3a\u82e5\u5728\u5224\u65ad\u6587\u4ef6\u5b58\u5728\u4e4b\u540e\u518d\u6b21\u6253\u5f00\u6587\u4ef6\uff0c\u82e5\u7cfb\u7edf\u6b64\u65f6\u5224\u65ad\u6b64\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u5df2\u7528\u5b8c\uff0c\u5c06 CPU \u65f6\u95f4\u5206\u914d\u7ed9\u4e86\u5176\u4ed6\u8fdb\u7a0b\u5e76\u521b\u5efa\u4e86\u8be5\u6587\u4ef6\uff0c\u5219 \u4e24\u4e2a\u8fdb\u7a0b\u90fd\u5c06\u8ba4\u4e3a\u6b64\u6587\u4ef6\u4e3a\u81ea\u5df1\u521b\u5efa\u7684\u3002 \u540c\u6837\u7684\uff0c\u5982\u679c\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u6307\u5411\u4e00\u4e2a\u6587\u4ef6\uff0c\u5e76\u5411\u7ed3\u5c3e\u5199\u5165\u6570\u636e\uff0c\u6b64\u65f6\u4e5f\u8bb8\u4f1a\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\uff1a if ( lseek ( fd , 0 , SEEK_END ) == -1 ) errExit ( \"lseek\" ); if ( write ( fd , buf , len ) != len ) fatal ( \"Partial/failed Write\" ); \u76f8\u4f3c\u7684\uff0c\u82e5\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u5b8c lseek() \u540e\u6d88\u8017\u5b8c\u4e86\u65f6\u95f4\u7247\uff0c\u88ab\u6267\u884c\u7c7b\u4f3c\u4ee3\u7801\u7684\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u65ad\uff0c\u5219\u4e24\u4e2a\u8fdb\u7a0b\u4f1a\u5728\u5199\u5165\u6570\u636e\u524d\u5c06\u504f\u79fb\u91cf\u8bbe\u7f6e\u4e3a\u76f8\u540c\u4f4d\u7f6e\uff0c\u5219\u53ef\u4ee5 \u770b\u51fa\uff0c\u6b64\u65f6\u5f53\u539f\u8fdb\u7a0b\u518d\u6b21\u88ab\u8c03\u5ea6\u65f6\uff0c\u4f1a\u8986\u76d6\u7b2c\u4e8c\u4e2a\u8fdb\u7a0b\u5df2\u7ecf\u5199\u5165\u7684\u6570\u636e\uff0c\u6b64\u65f6\u53c8\u4e00\u6b21\u51fa\u73b0\u4e86\u7ade\u4e89\u72b6\u6001\u3002\u8981\u89c4\u907f\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e94\u5728\u6253\u5f00\u6587\u4ef6\u65f6\u52a0\u5165 O_APPEND \u6807\u5fd7\u4f4d \uff0c\u4f46\u5bf9\u4e0d\u652f\u6301 O_APPEND \u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5185\u6838\u4f1a\u5ffd\u7565 O_APPEND \uff0c\u6309\u7167\u4f20\u7edf\u7684\u65b9\u5f0f\u79fb\u52a8\u504f\u79fb\u91cf\uff0c\u56e0\u6b64\u4ecd\u53ef\u80fd\u5bfc\u81f4\u810f\u5199\u5165\u95ee\u9898\u3002","title":"\u539f\u5b50\u6027"},{"location":"chap5/#fcntl","text":"#include <fcntl.h> int fcntl ( int fd , int cmd ...); cmd \u652f\u6301\u7684\u64cd\u4f5c\u5f88\u591a\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4e0d\u540c\u7c7b\u578b\u6216\u7701\u7565\uff0c\u5185\u6838\u4f1a\u6839\u636e cmd \u7684\u503c\u6765\u786e\u5b9a\u540e\u7eed\u53c2\u6570\u7684\u6570\u636e\u7c7b\u578b\u3002 \u7528\u9014\u4e4b\u4e00\u662f\u5bf9\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u83b7\u53d6\u6216\u4fee\u6539\u8bbf\u95ee\u6a21\u5f0f\u548c\u72b6\u6001\u6807\u5fd7\u3002 \u8981\u83b7\u53d6\u8bbe\u7f6e\uff0c\u5c06 cmd \u8bbe\u4e3a F_GETFL int flags , accessMode ; flags = fcntl ( fd , F_GETFL ); if ( flags == -1 ) errExit ( \"fnctl\" ); if ( flags & O_SYNC ) printf ( \"writes are synchronized \\n \" ); accessMode = flags & O_ACCMODE ; if ( accessMode == O_WRONLY || accessMode == O_RDWR ) printf ( \"file is writable \\n \" ); \u5224\u65ad\u6587\u4ef6\u7684\u8bbf\u95ee\u6a21\u5f0f\u9700\u8981\u8ba9 flags \u4e0e O_ACCMODE \u76f8\u4e0e\uff0c\u540e\u4e0e\u5e38\u91cf\u6bd4\u5bf9\uff0c\u5176\u4f59\u76f4\u63a5\u76f8\u4e0e\u5224\u65ad\u5373\u53ef\u3002 \u4f7f\u7528 F_SETFL \u4fee\u6539\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u67d0\u4e9b\u72b6\u6001\u6807\u5fd7\uff0c\u5141\u8bb8\u4fee\u6539\u7684\u6807\u5fd7\u6709 O_APPEND O_NONBLOCK O_NOATIME O_ASYNC O_DIRECT \u5176\u4ed6\u6807\u5fd7\u4f4d\u4e0d\u5141\u8bb8\u4fee\u6539\uff0c\u5c06\u88ab\u7cfb\u7edf\u5ffd\u7565\u3002 \u5f53\u6587\u4ef6\u4e0d\u662f\u88ab\u8c03\u7528\u7684\u7a0b\u5e8f\u6253\u5f00\u65f6\uff0c\u6216\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u83b7\u53d6\u662f\u7531 open() \u4ee5\u5916\u7684\u65b9\u5f0f\u83b7\u53d6\u7684\u65f6\u5019\uff0c\u8fd9\u663e\u5f97\u683c\u5916\u6709\u7528\u3002 \u5148\u4f7f\u7528 F_GETFL \u83b7\u53d6\u6587\u4ef6\u5f53\u524d\u7684\u72b6\u6001\uff0c\u53d8\u66f4\u9700\u8981\u4fee\u6539\u7684\u6bd4\u7279\u4f4d\u540e\u518d\u8c03\u7528 fcntl() \u7684 F_SETFL \u66f4\u65b0\u72b6\u6001\u3002 \u4f8b\u5982\uff0c\u8981\u589e\u52a0 O_APPEND \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801 int flags ; flags = fcntl ( fd , F_GETFL ); if ( flags == -1 ) errExit ( \"fcntl\" ); flags |= O_APPEND ; if ( fcntl ( fd , F_SETFL , flags ) == -1 ) errExit ( \"fcntl\" );","title":"\u6587\u4ef6\u63a7\u5236 fcntl()"},{"location":"chap5/#_4","text":"\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u6253\u5f00\u7684\u6587\u4ef6\u5e76\u975e\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff0c\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u6307\u5411\u540c\u4e00\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u5728\u76f8\u540c\u6216\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\u6253\u5f00\u3002 \u5185\u6838\u7ef4\u62a4\u4e09\u4e2a\u6570\u636e\u7ed3\u6784 \u8fdb\u7a0b\u7ea7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868 \u7cfb\u7edf\u7ea7\u7684\u6253\u5f00\u6587\u4ef6\u8868 \u6587\u4ef6\u7cfb\u7edf\u7684 i-node \u8868 \u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\uff0c\u5185\u6838\u4e3a\u5176\u7ef4\u62a4\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 (open file descriptor) \u8868\uff0c\u8868\u7684\u6bcf\u4e00\u9879\u90fd\u8bb0\u5f55\u4e86\u5355\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u76f8\u5173\u4fe1\u606f\u3002 \u63a7\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e00\u7ec4\u6807\u5fd7 \u5bf9\u6253\u5f00\u6587\u4ef6\u53e5\u67c4\u7684\u5f15\u7528 \u5bf9\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u7cfb\u7edf\u7ef4\u62a4\u4e00\u4e2a\u7cfb\u7edf\u7ea7\u7684\u63cf\u8ff0\u8868\u683c (open file description table)\uff0c\u5c06\u8868\u4e2d\u7684\u6761\u76ee\u79f0\u4e3a\u6253\u5f00\u6587\u4ef6\u53e5\u67c4 (open file handle) \u4e00\u4e2a\u6253\u5f00\u6587\u4ef6\u53e5\u67c4\u5b58\u50a8\u4e86\u4e00\u4e2a\u4e0e\u6253\u5f00\u6587\u4ef6\u76f8\u5173\u7684\u6240\u6709\u4fe1\u606f \u5f53\u524d\u6587\u4ef6\u7684\u504f\u79fb\u91cf \u6253\u5f00\u6587\u4ef6\u65f6\u6240\u4f7f\u7528\u7684\u72b6\u6001\u6807\u5fd7 \u6587\u4ef6\u8bbf\u95ee\u6a21\u5f0f \u4e0e\u4fe1\u53f7\u9a71\u52a8 I/O \u76f8\u5173\u7684\u914d\u7f6e \u5bf9\u8be5\u6587\u4ef6 i-node \u5bf9\u8c61\u7684\u5f15\u7528 \u6587\u4ef6\u7cfb\u7edf\u4f1a\u4e3a\u5176\u4e0a\u7684\u6587\u4ef6\u7ef4\u62a4 i-node \u8868\uff0c\u4fe1\u606f\u4e00\u822c\u5305\u62ec \u6587\u4ef6\u7c7b\u578b \u4e00\u4e2a\u6307\u5411\u8be5\u6587\u4ef6\u6240\u6301\u6709\u7684\u9501\u7684\u5217\u8868\u7684\u6307\u9488 \u5305\u62ec\u6587\u4ef6\u5927\u5c0f\u4ee5\u53ca\u4e0d\u540c\u7c7b\u578b\u64cd\u4f5c\u76f8\u5173\u7684\u65f6\u95f4\u6233\u7684\u5404\u79cd\u6587\u4ef6\u5c5e\u6027 \u4e24\u4e2a\u4e0d\u540c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u82e5\u6307\u5411\u540c\u4e00\u4e2a\u6253\u5f00\u6587\u4ef6\u53e5\u67c4\uff0c\u4f1a\u5171\u4eab\u540c\u4e00\u4e2a\u6587\u4ef6\u504f\u79fb\u91cf\uff0c\u800c\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u5fd7\u4e3a\u8fdb\u7a0b\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u79c1\u6709\u3002 \u4f55\u65f6\u9700\u8981\u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1f\u8003\u8651 Shell \u7684\u91cd\u5b9a\u5411\u8bed\u6cd5 2>&1 \uff0c\u5c06\u6807\u51c6\u9519\u8bef\u91cd\u5b9a\u5411\u81f3\u6807\u51c6\u8f93\u51fa\uff0c\u56e0\u6b64\u8003\u8651\u4e0b\u5217\u547d\u4ee4\uff0c\u5c06\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u5199\u5165\u6587\u4ef6\u4e2d ./myscript > result.log 2 > & 1 \u6ce8\u610f Shell \u4ece\u5de6\u81f3\u53f3\u5904\u7406\u91cd\u5b9a\u5411\u8bed\u53e5\u3002 Shell \u5728\u6b64\u5904\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26 1 \u590d\u5236\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26 2 \u5b9e\u73b0\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u91cd\u5b9a\u5411\uff0c\u6b64\u65f6\u6587\u4ef6\u63cf\u8ff0\u7b26 2 \u548c 1 \u6307\u5411\u540c\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u3002 \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u4e0d\u80fd\u7b80\u5355\u7684\u6253\u5f00\u4e24\u6b21\u6587\u4ef6\uff0c\u56e0\u4e24\u6b21\u6253\u5f00\u751f\u6210\u4e24\u4e2a\u4e0d\u540c\u7684\u6587\u4ef6\u53e5\u67c4\uff0c\u4e0d\u4f1a\u5171\u4eab\u540c\u4e00\u6587\u4ef6\u504f\u79fb\u91cf\u6307\u9488\uff0c\u5bfc\u81f4\u53ef\u80fd\u4e92\u76f8\u8986\u76d6\u5bf9\u65b9\u7684\u8f93\u51fa\uff0c\u5176\u6b21\u6253\u5f00\u7684\u6587\u4ef6 \u4e0d\u4e00\u5b9a\u662f\u78c1\u76d8\u6587\u4ef6\uff0c\u4e5f\u53ef\u80fd\u662f\u7ba1\u9053\u6216\u5176\u4ed6\u7684\u6587\u4ef6\u3002 #include <unistd.h> int dup ( int oldfd ); dup() \u8c03\u7528\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 oldfd\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u63cf\u8ff0\u7b26\uff0c\u4e8c\u8005\u6307\u5411\u540c\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4\u3002\u7cfb\u7edf\u4fdd\u8bc1\u65b0\u7f16\u53f7\u4e00\u5b9a\u662f\u7f16\u53f7\u6700\u4f4e\u7684\u672a\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 \u82e5\u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u6253\u5f00 0 \uff0c 1 \uff0c 2 \u4e09\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6b64\u65f6\u8c03\u7528 dup() \u4f1a\u8fd4\u56de\u6587\u4ef6\u63cf\u8ff0\u7b26 3 \u3002 \u82e5\u5e0c\u671b\u8fd4\u56de 2 \uff0c\u5219\u53ef\u5148\u5173\u95ed 2 \uff0c\u518d\u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u4e5f\u53ef\u4f7f\u7528 dup2() \u7b80\u5316\u64cd\u4f5c #include <unistd.h> int dup2 ( int oldfd , int newfd ); dup2() \u590d\u5236 oldfd \u53c2\u6570\u6307\u5b9a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7f16\u53f7\u4e3a newfd \u3002\u82e5 newfd \u6240\u6307\u5b9a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5df2\u7ecf\u6253\u5f00\uff0c\u5219 dup2() \u4f1a\u5148\u5173\u95ed\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 dup2() \u4f1a\u5ffd\u7565 newfd \u5173\u95ed\u671f\u95f4\u53d1\u751f\u7684\u9519\u8bef\uff0c\u6700\u597d\u63d0\u524d\u663e\u5f0f\u5173\u95ed newfd \u3002 oldfd \u82e5\u4e0d\u5b58\u5728\uff0c\u5219 dup2() \u5931\u8d25\u5e76\u8fd4\u56de\u9519\u8bef EBADF \uff0c\u5e76\u4e14\u4e0d\u5173\u95ed newfd \uff0c\u82e5 oldfd \u6709\u6548\u4e14\u4e0e newfd \u76f8\u7b49\uff0c\u5219 dup2() \u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c \u4e14\u4e0d\u5173\u95ed newfd \uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002 \u4e5f\u53ef\u4f7f\u7528 fcntl() \u7684 F_DUPFD \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26 newfd = fcntl ( oldfd , F_DUPFD , startfd ); \u5c06\u590d\u5236 oldfd \uff0c\u5e76\u5c06\u5927\u4e8e\u7b49\u4e8e startfd \u7684\u6700\u5c0f\u672a\u7528\u7684\u503c\u4f5c\u4e3a\u63cf\u8ff0\u7b26\u7f16\u53f7\u3002\u6b64\u8c03\u7528\u53ef\u4fdd\u8bc1\u65b0\u7684\u63cf\u8ff0\u7b26\u843d\u5728\u7279\u5b9a\u7684\u533a\u57df\u8303\u56f4\u5185\u3002 \u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u5176\u81ea\u5df1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u5fd7\uff0c\u53ef\u4f7f\u7528 dup3() \u5728\u590d\u5236\u540c\u65f6\u63a7\u5236\u65b0\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u5fd7 #define _GNU_SOURCE #include <unistd.h> int dup3 ( int oldfd , int newfd , int flags ); dup3() \u4e3a Linux \u7279\u6709","title":"\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u6253\u5f00\u6587\u4ef6\u7684\u5173\u7cfb"},{"location":"chap5/#io","text":"\u7cfb\u7edf\u8c03\u7528 pread() \u548c pwrite() \u5b8c\u6210\u4e0e read() \u548c write() \u76f8\u540c\u7684\u5de5\u4f5c\uff0c\u53ea\u662f\u53ef\u4ee5\u6307\u5b9a\u6587\u4ef6\u504f\u79fb\u91cf\uff0c\u800c\u975e\u5728\u5f53\u524d\u504f\u79fb\u91cf\u5904\u505a I/O \u64cd\u4f5c\uff0c\u4e14\u4e0d \u6539\u53d8\u5f53\u524d\u504f\u79fb\u91cf\u3002 #include <unistd.h> ssize_t pread ( int fd , void * buf , size_t count , off_t offset ); ssize_t pwrite ( int fd , const void * buf , size_t count , off_t offset ); \u597d\u5904\u662f\uff0c\u4e00\u65b9\u9762\uff0c\u80fd\u591f\u4fdd\u8bc1\u79fb\u52a8\u504f\u79fb\u91cf\u548c\u8bfb\u5199\u64cd\u4f5c\u662f\u539f\u5b50\u6027\u7684\uff0c\u53e6\u5916\u6bd4\u8d77\u5148\u79fb\u52a8\u504f\u79fb\u91cf\u518d\u5199\u5165\u8981\u7701\u53bb\u4e00\u90e8\u5206\u7cfb\u7edf\u8c03\u7528\u5e26\u6765\u7684\u53ef\u5ffd\u7565\u7684\u6027\u80fd\u63d0\u5347\u3002(\u4f46\u663e\u7136\u901a\u5e38 I/O \u7684\u6027\u80fd\u74f6\u9888\u90fd\u5728\u8bbe\u5907 I/O \u800c\u975e\u7cfb\u7edf\u8c03\u7528\uff0cI/O \u7684\u5f00\u9500\u8fdc\u5927\u4e8e\u7cfb\u7edf\u8c03\u7528)\u3002 \u5bf9 pread() \u548c pwrite() \u800c\u8a00\uff0cfd \u6307\u4ee3\u7684\u6587\u4ef6\u5fc5\u987b\u53ef\u5b9a\u4f4d\uff0c\u5373\u5141\u8bb8\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u6267\u884c lseek() \u64cd\u4f5c\u3002 \u5c24\u5176\u5728\u591a\u7ebf\u7a0b\u7f16\u7a0b\u65f6\uff0c\u6b64\u79cd\u65b9\u6cd5\u4e3a\u4fdd\u8bc1\u7cfb\u7edf\u8c03\u7528\u7684\u539f\u5b50\u6027\u663e\u7136\u975e\u5e38\u6709\u5e2e\u52a9\u3002","title":"\u5728\u6587\u4ef6\u7279\u5b9a\u504f\u79fb\u91cf\u7684 I/O"},{"location":"chap5/#_5","text":"#include <sys/uio.h> ssize_t readv ( int fd , const struct iovec * iov , int iovcnt ); ssize_t writev ( int fd , const struct iovec * iov , int iovcnt ); \u8fd9\u4e9b\u51fd\u6570\u53ef\u4e00\u6b21\u4f20\u8f93\u591a\u4e2a\u7f13\u51b2\u533a\u7684\u6570\u636e\u3002 iov \u5b9a\u4e49\u4e86\u4e00\u7ec4\u7528\u6765\u4f20\u8f93\u6570\u636e\u7684\u7f13\u51b2\u533a\uff0c\u6574\u5f62\u6570\u6307\u5b9a\u4e86 iov \u7684\u6210\u5458\u4e2a\u6570\uff0c iov \u4e2d\u7684\u6bcf\u4e2a\u6210\u5458\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b struct iovec { void * iov_base ; size_t iov_len ; }; readv() \u5b9e\u73b0\u4e86\u5206\u6563\u8f93\u5165\uff0c\u4ece fd \u8bfb\u4e00\u4e32\u8fde\u7eed\u7684\u5b57\u8282\uff0c\u7136\u540e\u5c06\u5176\u6563\u7f6e\u4e8e iov \u6307\u5b9a\u7684\u7f13\u51b2\u533a\u4e2d\u3002 readv() \u7684\u7279\u70b9\u4f9d\u7136\u662f\u4fdd\u8bc1\u539f\u5b50\u6027\u3002 \u8c03\u7528 readv() \u8fd4\u56de\u6210\u529f\u8bfb\u533a\u7684\u5b57\u8282\u6570\uff0c\u82e5\u6587\u4ef6\u7ed3\u675f\u8fd4\u56de 0 \uff0c\u8c03\u7528\u8005\u9700\u5bf9\u5176\u8fd4\u56de\u503c\u8fdb\u884c\u68c0\u67e5\uff0c\u82e5\u6570\u636e\u4e0d\u8db3\u586b\u6ee1\u7f13\u51b2\u533a\uff0c\u5219\u53ea\u4f1a\u5360\u7528\u90e8\u5206\u7f13\u51b2\u533a\uff0c\u6700\u540e\u4e00\u4e2a\u7f13\u51b2 \u533a\u53ef\u80fd\u53ea\u6709\u90e8\u5206\u6570\u636e\u3002 writev() \u5b9e\u73b0\u4e86\u96c6\u4e2d\u8f93\u51fa\u3002\u5c06 iov \u4e2d\u7684\u5185\u5bb9\u62fc\u63a5\u8d77\u6765\uff0c\u4ee5\u8fde\u7eed\u7684\u5b57\u8282\u5e8f\u5217\u5199\u5165\u6587\u4ef6\u63cf\u8ff0\u7b26 fd \u6307\u4ee3\u7684\u6587\u4ef6\u4e2d\u3002 \u663e\u7136 writev() \u7684\u64cd\u4f5c\u662f\u539f\u5b50\u6027\u7684\u3002 writev() \u540c\u6837\u53ef\u80fd\u5b58\u5728\u90e8\u5206\u5199\u7684\u95ee\u9898\u3002 \u73b0\u4ee3 Linux \u63d0\u4f9b\u4e86 preadv() \u548c pwritev() \u53ef\u5728\u7279\u5b9a\u504f\u79fb\u91cf\u5904\u8fdb\u884c\u5206\u6563\u8f93\u5165/\u96c6\u4e2d\u8f93\u51fa\u7684 I/O\uff0c\u867d\u7136\u5e76\u975e\u6807\u51c6\uff0c\u4f46 BSD \u652f\u6301\u8be5\u8c03\u7528\u3002 #define _BSD_SOURCE #include <sys/uio.h> ssize_t preadv ( int fd , const struct iovec * iov , int iovcnt , off_t offset ); ssize_t pwritev ( int fd , const struct iovec * iov , int iovcnt , off_t offset );","title":"\u5206\u6563\u8f93\u5165\u548c\u96c6\u4e2d\u8f93\u51fa"},{"location":"chap5/#_6","text":"#include <unistd.h> int truncate ( const char * pathname , off_t length ); int ftruncate ( int fd , off_t length ); \u82e5\u5f53\u524d\u6587\u4ef6\u957f\u5ea6\u5927\u4e8e length \uff0c\u5219\u4e22\u5f03\u8d85\u51fa\u7684\u90e8\u5206\uff0c\u82e5\u5c0f\u4e8e length \uff0c\u5219\u5728\u6587\u4ef6\u7ed3\u5c3e\u6dfb\u52a0\u7a7a\u5b57\u8282\u6216\u6587\u4ef6\u7a7a\u6d1e\u3002","title":"\u622a\u65ad\u6587\u4ef6"},{"location":"chap5/#io_1","text":"\u82e5\u6253\u5f00\u6587\u4ef6\u65f6\u6307\u5b9a O_NUNBLOCK \uff0c\u5219 \u82e5 open() \u672a\u7acb\u5373\u6253\u5f00\u6587\u4ef6\uff0c\u5219\u8fd4\u56de\u9519\u8bef\uff0c\u800c\u975e\u9677\u5165\u963b\u585e \u8c03\u7528 open() \u6210\u529f\u540e\u7684 I/O \u64cd\u4f5c\u4e5f\u662f\u975e\u963b\u585e\u7684\uff0c\u82e5 I/O \u64cd\u4f5c\u672a\u7acb\u5373\u5b8c\u6210\uff0c\u5219\u53ef\u80fd\u53ea\u5199\u5165\u90e8\u5206\u6570\u636e\uff0c\u5e76\u8fd4\u56de EAGAIN \u6216 EWOULDBLOCK \u9519\u8bef\u3002 \u7ba1\u9053\uff0cFIFO\uff0c\u5957\u63a5\u5b57\uff0c\u8bbe\u5907\u90fd\u652f\u6301\u975e\u963b\u585e\u6a21\u5f0f\u3002 \u7531\u4e8e\u5185\u6838\u7f13\u51b2\u533a\u4fdd\u8bc1\u666e\u901a\u6587\u4ef6 I/O \u4e0d\u4f1a\u963b\u585e\uff0c\u56e0\u6b64\u6253\u5f00\u666e\u901a\u6587\u4ef6\u901a\u5e38\u5ffd\u7565 O_NONBLOCK \u6807\u5fd7\uff0c\u4f46\u82e5\u4f7f\u7528\u5f3a\u5236\u6587\u4ef6\u9501\u65f6\uff0c\u8be5\u6807\u5fd7\u5bf9\u666e\u901a\u6587\u4ef6\u4e5f\u53ef\u7528\u3002","title":"\u975e\u963b\u585e I/O"},{"location":"chap5/#io_2","text":"\u901a\u5e38 off_t \u4e3a signed long \u7c7b\u578b\uff0c\u4f46\u8fd9\u6837\u5c06\u6587\u4ef6\u5927\u5c0f\u9650\u5236\u5728\u4e86 \\(2^31-1\\) \u5373 2GB \u5927\u5c0f\u3002 \u53ef\u4f7f\u7528\u652f\u6301\u5927\u6587\u4ef6\u64cd\u4f5c\u7684\u5907\u9009 API \u6216\u5c06 _FILE_OFFSET_BITS \u5b8f\u7684\u503c\u8bbe\u4e3a 64\u3002 \u82e5\u4f7f\u7528\u5907\u9009\u7684\u8fc7\u6e21 API\uff0c\u5219\u53ef\u4f7f\u7528\u539f\u6587\u4ef6 I/O \u51fd\u6570\u7684 64 \u4f4d\u7248\u672c\u3002\u5373 open64() \uff0c lseek64() \u7b49\u3002 \u66f4\u597d\u7684\u505a\u6cd5\u662f\u5728\u7f16\u8bd1\u65f6\u5c06 _FILE_OFFSET_BITS \u8bbe\u4e3a 64\uff0c\u6b64\u65f6\u6240\u6709 32 \u4f4d\u51fd\u6570\u548c\u6570\u636e\u7c7b\u578b\u90fd\u5c06\u8f6c\u6362\u4e3a 64 \u4f4d\u7248\u672c\u3002 \u5728 64 \u4f4d\u7cfb\u7edf\u4e0a\uff0c open64() \u548c open() \u4e3a\u540c\u4e00\u4e2a\u5b9e\u73b0\uff0c\u4e14\u5bf9\u5e94\u7684\u51fd\u6570\u5df2\u7ecf\u4e3a 64 \u4f4d\u7248\u672c\u3002 \u5bf9\u4e8e printf() ,\u5e94\u5c06 off_t \u5f3a\u5236\u8f6c\u6362\u4e3a long long \uff0c\u540e\u4f7f\u7528 %lld \u4fee\u9970\u7b26\u3002","title":"\u5927\u6587\u4ef6 I/O"},{"location":"chap5/#devfd","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\uff0c\u7cfb\u7edf\u63d0\u4f9b\u4e00\u4e2a\u865a\u62df\u7684\u76ee\u5f55 /dev/fd \uff0c\u8be5\u76ee\u5f55\u5305\u542b /dev/fd/n \u5f62\u5f0f\u7684\u6587\u4ef6\u540d\uff0c\u5176\u4e2d n \u662f\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5bf9\u5e94\u7684\u7f16\u53f7\u3002 \u65e9\u671f\u7248\u672c\u7684 Linux \u5c06\u8be5\u6587\u4ef6\u94fe\u63a5\u81f3 /proc/self/fd \u4e2d\uff0c\u73b0\u4ee3 Linux \u76f4\u63a5\u5c06\u5176\u94fe\u63a5\u5230\u6587\u4ef6\u672c\u8eab\u3002 \u7cfb\u7edf\u8fd8\u63d0\u4f9b\u4e86 3 \u4e2a\u7b26\u53f7\u94fe\u63a5 /dev/stdin \uff0c /dev/stdout \u548c /dev/stderr \u3002\u65e9\u671f\u94fe\u63a5\u5230 /dev/fd \uff0c\u73b0\u5728\u94fe\u63a5\u5230 /proc/self/fd/","title":"/dev/fd \u76ee\u5f55"},{"location":"chap5/#_7","text":"#include <stdlib.h> int mkstemp ( char * template ); mkstemp() \u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u6587\u4ef6\u540d\u5e76\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 \u53c2\u6570 template \u91c7\u7528\u8def\u5f84\u540d\u5f62\u5f0f\uff0c\u5176\u4e2d\u6700\u540e 6 \u4e2a\u5b57\u7b26\u5fc5\u987b\u662f XXXXXX ,\u8fd9 6 \u4e2a\u5b57\u7b26\u4f1a\u88ab\u66ff\u6362\uff0c\u4e14\u4fee\u6539\u540e\u7684\u6587\u4ef6\u540d\u4f1a\u901a\u8fc7 template \u4f20\u56de\uff0c\u56e0\u6b64 template \u5fc5\u987b\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff0c\u800c\u4e0d\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26\u5e38\u91cf\u3002 \u6587\u4ef6\u62e5\u6709\u8005\u5bf9 mkstemp() \u5efa\u7acb\u7684\u6587\u4ef6\u62e5\u6709\u8bfb\u5199\u6743\u9650\uff0c\u5176\u4ed6\u7528\u6237\u6ca1\u6709\u4efb\u4f55\u6743\u9650\uff0c\u4e14\u6253\u5f00\u6587\u4ef6\u4f7f\u7528 O_EXCL \u53c2\u6570\uff0c\u4fdd\u8bc1\u8c03\u7528\u8005\u72ec\u5360\u8bbf\u95ee\u6587\u4ef6\u3002 \u901a\u5e38\uff0c\u5728\u521b\u5efa\u4e34\u65f6\u6587\u4ef6\u540e\uff0c\u7a0b\u5e8f\u5c31\u5e94\u4f7f\u7528 unlink() \u5c06\u5176\u5220\u9664\u3002 #include <stdio.h> FILE * tmpfile ( void ); tmpfile() \u521b\u5efa\u4e00\u4e2a\u540d\u79f0\u552f\u4e00\u7684\u4e34\u65f6\u6587\u4ef6\uff0c\u5e76\u4ee5\u8bfb\u5199\u65b9\u5f0f\u6253\u5f00\uff0c\u6210\u529f\u5c06\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6d41\u4f9b stdio \u4f7f\u7528\uff0c\u6587\u4ef6\u6d41\u5173\u95ed\u540e\u5c06\u81ea\u52a8\u5220\u9664\u4e34\u65f6\u6587\u4ef6\uff0c\u4e3a\u8fbe\u5230\u8be5\u76ee\u7684 \uff0c tmpfile() \u51fd\u6570\u5c06\u5728\u6253\u5f00\u6587\u4ef6\u540e\u7acb\u5373\u8c03\u7528 unlink() \u6765\u5220\u9664\u6587\u4ef6\u3002","title":"\u521b\u5efa\u4e34\u65f6\u6587\u4ef6"},{"location":"chap5/#_8","text":"","title":"\u4e60\u9898"},{"location":"chap5/#5-1","text":"code: c5/large_file.c \u5c31\u662f\u6539\u4ee3\u7801\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002","title":"5-1"},{"location":"chap5/#5-2","text":"code: c5/append_exists.c \u5728\u4f7f\u7528 O_APPEND \u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u65f6\uff0c\u5c3d\u7ba1\u8bbe\u7f6e\u504f\u79fb\u91cf\u4e3a 0 \uff0c\u4ecd\u7136\u4f1a\u5411\u6587\u4ef6\u4e2d\u8ffd\u52a0\u5199\u5165\u3002","title":"5-2"},{"location":"chap5/#5-3","text":"code: c5/atomic_append.c \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a $ ls -l \u603b\u7528\u91cf 3164 -rwxrwxr-x 1 panxiao81 panxiao81 31072 5\u6708 27 19 :12 append_exists -rw-rw-r-- 1 panxiao81 panxiao81 1492 5\u6708 27 18 :58 append_exists.c -rwxrwxr-x 1 panxiao81 panxiao81 31992 5\u6708 27 19 :41 atomic_append -rw-rw-r-- 1 panxiao81 panxiao81 1843 5\u6708 27 19 :41 atomic_append.c -rw------- 1 panxiao81 panxiao81 2000000 5\u6708 27 19 :42 f1 -rw------- 1 panxiao81 panxiao81 1121998 5\u6708 27 19 :42 f2 -rwxrwxr-x 1 panxiao81 panxiao81 29552 5\u6708 27 19 :13 large_file -rw-rw-r-- 1 panxiao81 panxiao81 1375 5\u6708 25 02 :15 large_file.c -rw-rw-r-- 1 panxiao81 panxiao81 298 5\u6708 27 18 :46 Makefile \u53ef\u4ee5\u770b\u5230 f1 \u660e\u663e\u6bd4 f2 \u5927\u7684\u591a\u3002 \u7531\u4e8e\u4e0d\u80fd\u4fdd\u8bc1\u65e0 O_APPEND \u65f6\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u56e0\u6b64\u5728\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u5199\u5165\u65f6\uff0c\u5bf9\u4e8e f2 \u7684\u60c5\u51b5\u5199\u5165\u7684\u6570\u636e\u4e92\u76f8\u8986\u76d6\uff0c\u5bfc\u81f4\u4e86\u51fa\u73b0\u6b64\u60c5\u51b5\u3002","title":"5-3"},{"location":"chap5/#5-4","text":"code: c5/dup.c \u5bf9\u4e8e dup() \u53ef\u4ee5\u4f7f\u7528 fnctl(oldfd, F_DUPFD, 0) \uff0c dup2() \u53ef\u4ee5\u6539\u5199\u4e3a fcntl(oldfd, F_DUPFD, newfd) \uff0c\u5269\u4e0b\u7684\u53ea\u9700\u8981\u505a\u597d\u9519\u8bef\u5904\u7406\u5c31\u53ef\u4ee5\u4e86\u3002 \u6ce8\u610f\uff0c\u6839\u636e dup(2) \u6240\u8bf4: The steps of closing and reusing the file descriptor newfd are performed atomically. \u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528 dup2() \u53ef\u4ee5\u4fdd\u8bc1\u5173\u95ed newfd \u548c\u518d\u6b21\u6253\u5f00 newfd \u662f\u6709\u539f\u5b50\u6027\u7684\uff0c\u8fd9\u70b9\u5728\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u7684\u7248\u672c\u4e2d\u662f\u65e0\u6cd5\u505a\u5230\u7684\u3002 \u6e90\u7801\u4e2d\u7684 main() \u53ea\u662f\u4e3a\u4e86\u901a\u8fc7\u7f16\u8bd1\u800c\u5df2\uff0c\u6211\u6ca1\u6709\u5199\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u6211\u89c9\u5f97\u4ed6\u5927\u6982\u662f\u80fd\u6b63\u5e38\u5de5\u4f5c\u7684\u3002","title":"5-4"},{"location":"chap5/#5-5","text":"code: c5/check_descriptor.c \u7531\u4e8e\u9898\u76ee\u8bf4\u660e\u975e\u5e38\u7b80\u7565\uff0c\u4ee3\u7801\u4e5f\u5199\u7684\u975e\u5e38\u7b80\u7565\u3002 \u7531\u4e8e\u53ea\u662f\u8981\u67e5\u770b\u662f\u5426\u5171\u4eab\uff0c\u6211\u53ea\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5224\u65ad\u662f\u5426\u76f8\u7b49\u3002","title":"5-5"},{"location":"chap5/#5-6","text":"\u53ef\u89c1\uff0cfd2 \u7531 fd1 \u590d\u5236\u800c\u6765\uff0c\u5171\u4eab\u540c\u4e00\u504f\u79fb\u91cf\uff0cfd3 \u662f\u53e6\u4e00\u4efd\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5355\u72ec\u7ef4\u62a4\u4e00\u4efd\u504f\u79fb\u91cf \u7b2c\u4e00\u6b21\uff1a Hello, \u7b2c\u4e8c\u6b21\uff1a Hello,world \u7531\u4e8e\u5171\u4eab\u540c\u4e00\u504f\u79fb\u91cf\uff0c\u4e14\u6587\u4ef6\u504f\u79fb\u91cf\u968f write() \u540e\u79fb \u7b2c\u4e09\u6b21\uff1a\u7531\u4e8e lseek() \u5c06\u504f\u79fb\u91cf\u79fb\u52a8\u56de\u6587\u4ef6\u5f00\u5934\uff0c\u518d\u6b21\u5199\u5165\u8986\u76d6\u4e86\u8fc7\u53bb\u7684\u6587\u5b57\uff0c\u73b0\u5728\u5185\u5bb9\u4e3a HELLO,world \u7b2c\u56db\u6b21\uff1afd3 \u7684\u6587\u4ef6\u504f\u79fb\u91cf\u4e00\u76f4\u5728\u5f00\u5934\uff0c\u56e0\u6b64\u8986\u76d6\u4e86\u539f\u6709\u6587\u5b57\uff0c\u5185\u5bb9\u4e3a Gidday world","title":"5-6"},{"location":"chap5/#5-7","text":"code: c5/readv_writev.c \u4e3a\u4fdd\u8bc1\u539f\u5b50\u6027\uff0c\u5bf9\u4e8e\u8bfb\u5165\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u5f97\u77e5\u603b\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u5206\u914d\u4e00\u6bb5\u4e34\u65f6\u7684 buffer \u5c06\u4fe1\u606f\u4e00\u6b21\u6027\u8bfb\u5165\uff0c\u518d\u5206\u5f00\u5199\u5165\u7ed9\u5b9a\u7684\u7f13\u51b2\u533a\u3002\u5bf9\u5199\u5165\u64cd\u4f5c\u4e5f\u540c\u7406\uff0c\u9700\u8981\u5148\u5c06\u7ed9\u5b9a\u7684\u7f13\u51b2\u533a\u5199\u5165\u5230\u4e34\u65f6\u5206\u914d\u7684\u5927\u7f13\u51b2\u533a\uff0c\u4e4b\u540e\u4e00\u6b21\u6027\u5bf9\u6574\u4e2a\u5927\u7f13\u51b2\u533a\u8fdb\u884c\u5199\u5165\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u5185\u5b58\u5185\u5bb9\u7684\u62f7\u8d1d\u64cd\u4f5c\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u53ef\u4ee5\u4f7f\u7528 memcpy() \u6765\u5b9e\u73b0\u3002\u5927\u7f13\u51b2\u533a\u7684\u64cd\u4f5c\u4e5f\u53ea\u9700\u8981\u6839\u636e iov_len \u8ba1\u7b97\u504f\u79fb\u91cf\u5373\u53ef\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u8bfb\u5165\u7f13\u51b2\u533a\uff0c\u9700\u8981\u5224\u65ad\u8bfb\u5165\u7684\u5b57\u8282\u6570\u4e2d\u5c1a\u672a\u5199\u5165\u7684\u5927\u5c0f\u4e0e\u5f53\u524d\u5757\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u82e5\u5c1a\u672a\u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u5c0f\u4e8e\u5f53\u524d\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff0c\u5219\u53ef\u5224\u65ad\u5199\u5b8c\u5f53\u524d\u5269\u4f59\u7684\u6570\u636e\u5373\u53ef\u7ed3\u675f\u5e76\u8fd4\u56de\u3002 readv() \u4e0d\u4f1a\u4fdd\u8bc1\u5f53\u8bfb\u5230\u7684\u6570\u636e\u672a\u5360\u6ee1\u7f13\u51b2\u533a\u65f6\u5269\u4f59\u7684\u7f13\u51b2\u533a\u5185\u7684\u6570\u636e\uff0c\u56e0\u6b64\u8fd9\u79cd\u5b9e\u73b0\u662f\u5b8c\u5168\u5408\u7406\u7684\u3002 \u8fd9\u6bb5\u4ee3\u7801\u6211\u540c\u6837\u6ca1\u6709\u7ecf\u8fc7\u5b8c\u6574\u6d4b\u8bd5\uff0c main() \u51fd\u6570\u5b58\u5728\u4ecd\u540c\u6837\u53ea\u662f\u4e3a\u4e86\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002","title":"5-7"},{"location":"chap6/","text":"Cheaper 6 \u8fdb\u7a0b \u00b6 \u8bcd\u6c47\u901f\u67e5 \u00b6 \u8fdb\u7a0b process \u7528\u6237\u5185\u5b58\u7a7a\u95f4 user-space memory \u8fdb\u7a0b\u53f7 process ID \u7236\u8fdb\u7a0b\u53f7 parent process ID \u6bb5 segment \u6808\uff1astack \u6808\u5e27\uff1astack frames \u5806\uff1aheap \u5806\u9876: program break \u4e0d\u53ef\u91cd\u5165\u7684: nonreentrant \u91cd\u5165\uff1areentrancy \u8bbf\u95ee\u5c40\u90e8\u6027\uff1alocality of reference \u7a7a\u95f4\u5c40\u9650\u6027\uff1aSpatial locality \u65f6\u95f4\u5c40\u90e8\u6027\uff1aTemporal locality \u9a7b\u7559\u96c6\uff1aresident set \u9875\u9762\u9519\u8bef\uff1apage fault \u9875\u8868\uff1apage table \u865a\u62df\u5730\u5740\u7a7a\u95f4\uff1avirtual address space \u6808\u6307\u9488\uff1astack pointer \u73af\u5883\u5217\u8868\uff1aenvironment list \u7b14\u8bb0 \u00b6 \u8fdb\u7a0b\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5b9e\u4f8b\uff0c\u6362\u8a00\u4e4b\uff0c\u5b9e\u9645\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\u79f0\u4e3a\u8fdb\u7a0b\u3002 \u7a0b\u5e8f\u662f\u5305\u542b\u4e00\u7cfb\u5217\u4fe1\u606f\u7684\u6587\u4ef6\u3002\u5305\u62ec \u4e8c\u8fdb\u5236\u683c\u5f0f\u6807\u8bc6\uff1a\u65e9\u5e74\u4e3a\u6c47\u7f16\u8f93\u51fa a.out\uff0cCOFF\uff0c\u73b0\u5728\u4e00\u822c\u4f7f\u7528 ELF \u683c\u5f0f \u673a\u5668\u8bed\u8a00\u6307\u4ee4 \u7a0b\u5e8f\u5165\u53e3\u5730\u5740 \u6570\u636e\uff1a\u5305\u542b\u53d8\u91cf\u521d\u59cb\u5316\u7684\u503c\u548c\u7a0b\u5e8f\u4f7f\u7528\u7684\u5b57\u9762\u5e38\u91cf\u503c \u7b26\u53f7\u8868\u53ca\u91cd\u5b9a\u5411\u8868\uff1a\u63cf\u8ff0\u7a0b\u5e8f\u4e2d\u51fd\u6570\u548c\u53d8\u91cf\u7684\u4f4d\u7f6e\u548c\u540d\u79f0\uff0c\u7528\u4e8e\u8c03\u8bd5\u548c\u8fd0\u884c\u65f6\u7684\u7b26\u53f7\u89e3\u6790\uff08\u52a8\u6001\u94fe\u63a5\uff09 \u5171\u4eab\u5e93\u548c\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\uff1a\u5217\u51fa\u7a0b\u5e8f\u8fd0\u884c\u65f6\u9700\u8981\u4f7f\u7528\u7684\u5171\u4eab\u5e93\uff0c\u4ee5\u53ca\u52a0\u8f7d\u5171\u4eab\u5e93\u7684\u52a8\u6001\u94fe\u63a5\u5668\u7684\u8def\u5f84 \u5176\u4ed6\u4fe1\u606f \u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u8bb8\u591a\u8fdb\u7a0b\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u7a0b\u5e8f\u3002 \u4ece\u5185\u6838\u7684\u89d2\u5ea6\uff0c\u8fdb\u7a0b\u7531\u7528\u6237\u5185\u5b58\u7a7a\u95f4\u548c\u4e00\u4e9b\u5185\u6838\u6570\u636e\u7ed3\u6784\u6784\u6210\u3002\u7528\u6237\u5185\u5b58\u7a7a\u95f4\u5305\u542b\u7a0b\u5e8f\u4ee3\u7801\u53ca\u4ee3\u7801\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u5185\u6838\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8fdb\u7a0b\u72b6\u6001\u4fe1\u606f\u3002\u5185\u6838\u6570\u636e\u7ed3\u6784\u5305\u62ec\u4e0e\u8fdb\u7a0b\u76f8\u5173\u7684\u6807\u8bc6\u53f7\uff0c\u865a\u62df\u5185\u5b58\u8868\uff0c\u6253\u5f00\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u8868\uff0c\u4fe1\u53f7\u4f20\u9012\u53ca\u5904\u7406\u7684\u4fe1\u606f\uff0c\u8fdb\u7a0b\u8d44\u6e90\u7684\u4f7f\u7528\u4e0e\u9650\u5236\uff0c\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u548c\u5927\u91cf\u7684\u5176\u4ed6\u4fe1\u606f\u3002 \u8fdb\u7a0b\u53f7\u548c\u7236\u8fdb\u7a0b\u53f7 \u00b6 \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53f7 (PID)\uff0c\u8fdb\u7a0b\u53f7\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u7528\u4e8e\u552f\u4e00\u6807\u8bc6\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e2a\u8fdb\u7a0b\u3002 getpid() \u8fd4\u56de\u5f53\u524d\u8c03\u7528\u7684\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53f7 #include <unistd.h> pid_t getpid ( void ) \u9664\u4e86\u4e2a\u522b\u7279\u6b8a\u7684\u8fdb\u7a0b\uff08\u5982 init ) \u4ee5\u5916\uff0c \u8fdb\u7a0b\u53f7\u548c\u7a0b\u5e8f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 Linux \u5185\u6838\u7684\u8fdb\u7a0b\u53f7\u5927\u5c0f\u9650\u5236\u53ef\u4ee5\u4ece /proc/sys/kernel/pid_max \u4e2d\u67e5\u770b\uff0c\u65b0\u8fdb\u7a0b\u521b\u5efa\u65f6\uff0c\u5185\u6838\u5c06\u6309\u987a\u5e8f\u5c06\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 PID \u5206\u914d\u7ed9\u8fdb\u7a0b\uff0c\u5f53\u8fdb\u7a0b\u53f7\u8fbe\u5230\u9650\u5236\u65f6\uff0c\u5185\u6838\u5c06 reset \u8ba1\u6570\u5668\u3002 \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a\u521b\u5efa\u81ea\u5df1\u7684\u7236\u8fdb\u7a0b\uff0c\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528 getppid() \u53ef\u67e5\u770b\u3002 #include <unistd.h> pid_t getppid ( void ); \u6bcf\u4e2a\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u53f7\u53cd\u6620\u4e86\u7cfb\u7edf\u8fdb\u7a0b\u95f4\u7684\u6811\u72b6\u5173\u7cfb\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u6700\u7ec8\u90fd\u80fd\u5f52\u5bbf\u5230 PID \u4e3a 1 \u7684\u8fdb\u7a0b init \u3002\u4f7f\u7528 pstree(1) \u53ef\u67e5\u770b\u7cfb\u7edf\u8fdb\u7a0b\u6811\u3002 \u5982\u679c\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u5219\u5b50\u8fdb\u7a0b\u4f1a\u53d8\u6210\u5b64\u513f\u8fdb\u7a0b\uff0c init \u8fdb\u7a0b\u5c31\u4f1a\u6536\u517b\u8be5\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u5bf9 getppid() \u7684\u8c03\u7528\u5c06\u8fd4\u56de 1. \u901a\u8fc7 /proc/PID/status \u4e2d\u7684 PPid \u5b57\u6bb5\uff0c\u4e5f\u53ef\u83b7\u77e5\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u3002 \u8fdb\u7a0b\u7684\u5185\u5b58\u5e03\u5c40 \u00b6 \u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u7531\u591a\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u79f0\u4e4b\u4e3a \u6bb5 \u6587\u672c\u6bb5\uff1a\u5305\u542b\u8fdb\u7a0b\u8fd0\u884c\u7684\u673a\u5668\u8bed\u8a00\u547d\u4ee4\uff0c\u53ea\u8bfb\uff0c\u53ef\u5171\u4eab\uff0c\u540c\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5171\u4eab\u540c\u4e00\u6587\u672c\u6bb5\u5185\u5b58 \u5df2\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff1a\u53c8\u540d\u7528\u6237\u521d\u59cb\u5316\u6570\u636e\u6bb5 (user-initialized data segment)\uff0c\u5305\u542b\u663e\u5f0f\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u3002 \u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff1a\u53c8\u540d\u96f6\u521d\u59cb\u5316\u6570\u636e\u6bb5 (zero-initialized data segment)\uff0c\u5305\u542b\u672a\u8fdb\u884c\u663e\u5f0f\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u3002\u7a0b\u5e8f\u542f\u52a8\u524d\u8be5\u6bb5\u88ab\u521d\u59cb\u5316\u4e3a 0\u3002\u5386\u53f2\u4e0a\u8be5\u6bb5\u88ab\u79f0\u4f5c BSS \u6bb5\uff0c\u4e14\u7a0b\u5e8f\u5728\u786c\u76d8\u5b58\u50a8\u65f6\u4e0d\u9700\u8981\u5bf9\u8be5\u6bb5\u5206\u914d\u786c\u76d8\u7a7a\u95f4\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\u7684\u4f4d\u7f6e\u548c\u6240\u9700\u5927\u5c0f\uff0c\u5728\u8fd0\u884c\u65f6\u518d\u5206\u914d\u7a7a\u95f4 \u6808\uff1a\u4e00\u4e2a\u52a8\u6001\u589e\u957f\u548c\u6536\u7f29\u7684\u6bb5\uff0c\u7531\u6808\u5e27\u7ec4\u6210\u3002\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u5f53\u524d\u8c03\u7528\u7684\u51fd\u6570\u5206\u914d\u4e00\u4e2a\u6808\u5e27\uff0c\u6808\u5e27\u4e2d\u5b58\u50a8\u4e86\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5b9e\u53c2\u548c\u8fd4\u56de\u503c\u3002 \u5806\uff1a\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u4e00\u5757\u533a\u57df\uff0c\u5806\u9876\u79f0\u4f5c program break. \u6b64\u5904\u8ba8\u8bba\u7684\u6bb5\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u865a\u62df\u5185\u5b58\u7684\u6982\u5ff5\uff0c\u800c\u975e\u786c\u4ef6\u4f53\u7cfb\u4e2d\u7684\u6982\u5ff5\u3002 \u6709\u65f6\u51fd\u6570\u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u662f\u9759\u6001\u5206\u914d\u7684\uff0c\u5373\u5185\u5b58\u53ef\u80fd\u5206\u914d\u5728\u5df2\u521d\u59cb\u5316\u6216\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\u4e2d\u3002\u5373\u82e5\u8fd4\u56de\u7684\u5185\u5bb9\u5b58\u5728\u4e8e\u9759\u6001\u7684\u5185\u5b58\u4e2d\uff0c\u5219\u4e0b\u4e00\u6b21\u5bf9\u8be5\u51fd\u6570\u7684\u8c03\u7528\u53ef\u80fd\u4f1a\u8986\u76d6\u4e0a\u4e00\u6b21\u7684\u7ed3\u679c\u3002\u79f0\u4f5c\u8be5\u51fd\u6570 \u4e0d\u53ef\u91cd\u5165 \u5927\u591a UNIX \u5b9e\u73b0\u63d0\u4f9b\u4e86\u4e09\u4e2a\u5168\u5c40\u7b26\u53f7\u6765\u83b7\u53d6\u76f8\u5e94\u6587\u672c\u6bb5\u7684\u5730\u5740\uff0c\u4f46\u8be5\u505a\u6cd5\u672a\u7ecf SUSv3 \u6807\u51c6\u5316 \u8981\u4f7f\u7528\u8be5\u7b26\u53f7\u9700\u5148\u663e\u5f0f\u58f0\u660e extern char etext , edata , end ; // \u5206\u522b\u4e3a\u7a0b\u5e8f\u6587\u672c\u6bb5\uff0c\u5df2\u521d\u59cb\u5316\u6570\u636e\u6bb5\u548c\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\u7ed3\u5c3e\u5904\u4e0b\u4e00\u5b57\u8282\u3002\u53ef\u4f7f\u7528\u53d6\u5730\u5740\u7b26\u83b7\u53d6\u5730\u5740\u3002 \u865a\u62df\u5185\u5b58\u7ba1\u7406 \u00b6 \u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u57fa\u672c\u90fd\u4f7f\u7528\u4e86\u865a\u62df\u5185\u5b58\u7ba1\u7406\u6280\u672f\u3002 \u5927\u591a\u7a0b\u5e8f\u4f53\u73b0\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u8bbf\u95ee\u5c40\u90e8\u6027: \u7a7a\u95f4\u5c40\u90e8\u6027\uff1a\u7a0b\u5e8f\u503e\u5411\u4e8e\u8bbf\u95ee\u5728\u6700\u8fd1\u8bbf\u95ee\u8fc7\u7684\u5185\u5b58\u5730\u5740\u9644\u8fd1\u7684\u5185\u5b58\u3002 \u65f6\u95f4\u5c40\u90e8\u6027\uff1a\u7a0b\u5e8f\u503e\u5411\u4e8e\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u518d\u6b21\u8bbf\u95ee\u6700\u8fd1\u521a\u8bbf\u95ee\u8fc7\u7684\u5185\u5b58\u3002\uff08\u7531\u4e8e\u5faa\u73af\uff09 \u56e0\u6b64\uff0c\u5373\u4fbf\u53ea\u6709\u90e8\u5206\u5730\u5740\u7a7a\u95f4\u771f\u6b63\u5b58\u5728\u4e8e RAM \u4e2d\uff0c\u7a0b\u5e8f\u4ecd\u7136\u53ef\u4ee5\u8fd0\u884c\u3002 \u865a\u62df\u5185\u5b58\u5373\u5c06\u7a0b\u5e8f\u4f7f\u7528\u7684\u5185\u5b58\u5206\u5272\u6210\u5c0f\u7684\uff0c\u56fa\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\u9875 (page) \u5355\u5143\uff0c\u5c06 RAM \u5212\u5206\u6210\u4e00\u7cfb\u5217\u4e0e\u865a\u62df\u5185\u5b58\u9875\u5927\u5c0f\u76f8\u540c\u7684\u9875\u5e27\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u5728\u7279\u5b9a\u65f6\u95f4\u5185\u53ea\u6709\u90e8\u5206\u9875\u9700\u8981\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u8fd9\u4e9b\u9875\u5373\u4e3a \u9a7b\u7559\u96c6 \u3002\u7a0b\u5e8f\u672a\u4f7f\u7528\u7684\u9875\u62f7\u8d1d\u5b58\u653e\u5728\u4ea4\u6362\u533a\u4e2d (swap area)\uff0c\u4ec5\u5728\u9700\u8981\u65f6\u624d\u4f1a\u8f7d\u5165\u5185\u5b58\u3002\u82e5\u8fdb\u7a0b\u8981\u8bbf\u95ee\u7684\u9875\u9762\u76ee\u524d\u672a\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u4f1a\u53d1\u751f\u9875\u9762\u9519\u8bef\uff0c\u6b64\u65f6\u5185\u6838\u6302\u8d77\u8fdb\u7a0b\uff0c\u4ece\u78c1\u76d8\u7684\u4ea4\u6362\u533a\u4e2d\u5c06\u8be5\u9875\u9762\u8f7d\u5165\u5185\u5b58\u3002 \u901a\u5e38\uff0cx86_32 \u5e73\u53f0\u9875\u5927\u5c0f\u4e3a 4096 \u5b57\u8282\u3002\u82e5 CPU \u652f\u6301\u4e14\u7cfb\u7edf\u914d\u7f6e\u4f7f\u7528\u53ef\u4ee5\u8c03\u7528\u5927\u9875\u3002 \u5185\u6838\u4f1a\u4e3a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u5f20\u9875\u8868\uff0c\u8be5\u8868\u63cf\u8ff0\u6bcf\u4e2a\u5185\u5b58\u9875\u5728\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4f4d\u7f6e\u3002\u6bcf\u4e2a\u6761\u76ee\u8981\u4e48\u6307\u51fa\u4e00\u4e2a\u9875\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8981\u4e48\u6307\u51fa\u5f53\u524d\u9a7b\u7559\u5728\u786c\u76d8\u4e0a\u3002 \u53ef\u80fd\u5b58\u5728\u5927\u6bb5\u865a\u62df\u5730\u5740\u7a7a\u95f4\u672a\u88ab\u4f7f\u7528\uff0c\u6545\u4e5f\u65e0\u5fc5\u8981\u7ef4\u62a4\u5176\u9875\u8868\u6761\u76ee\uff0c\u4f46\u5f53\u8fdb\u7a0b\u8bd5\u56fe\u8bbf\u95ee\u65e0\u9875\u8868\u6761\u76ee\u5bf9\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u8fdb\u7a0b\u5c06\u6536\u5230\u4e00\u4e2a SIGSEGV \u4fe1\u53f7\u3002 \u8fdb\u7a0b\u7684\u6709\u6548\u865a\u62df\u5730\u5740\u8303\u56f4\u4e5f\u4f1a\u5728\u8fdb\u7a0b\u7684\u751f\u547d\u5468\u671f\u4e2d\u53d1\u751f\u53d8\u5316\uff0c\u4f8b\u5982\uff1a \u7531\u4e8e\u6808\u5411\u4e0b\u589e\u957f\u8d85\u51fa\u4e4b\u524d\u8fbe\u5230\u8fc7\u7684\u4f4d\u7f6e \u5f53\u5728\u5806\u4e2d\u5206\u914d\u6216\u91ca\u653e\u5185\u5b58\u65f6 \u5f53\u8c03\u7528 shmat() \u8fde\u63a5 SysV \u5171\u4eab\u5185\u5b58\u533a\u65f6\uff0c\u6216\u8c03\u7528 shmdt() \u8131\u79bb\u5171\u4eab\u5185\u5b58\u533a\u65f6\u3002 \u5f53\u8c03\u7528 mmap() \u521b\u5efa\u5185\u5b58\u6620\u5c04\u8c03\u7528 munmap() \u89e3\u9664\u5185\u5b58\u6620\u5c04\u65f6\u3002 \u865a\u62df\u5185\u5b58\u5e26\u6765\u4e86\u8bb8\u591a\u4f18\u70b9\uff1a \u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u95f4\uff0c\u8fdb\u7a0b\u4e0e\u5185\u6838\u95f4\u4e92\u76f8\u9694\u79bb\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4e0d\u80fd\u8bfb\u5199\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6216\u5185\u6838\u7684\u5185\u5b58\u3002 \u4e24\u4e2a\u6216\u66f4\u591a\u8fdb\u7a0b\u53ef\u4ee5\u5728\u7279\u5b9a\u6761\u4ef6\u4e0b\u5171\u4eab\u5185\u5b58\u3002 \u4fbf\u4e8e\u5b9e\u73b0\u5185\u5b58\u4fdd\u62a4\u673a\u5236 \u7a0b\u5e8f\u5458\u548c\u7f16\u8bd1\u5668\uff0c\u94fe\u63a5\u5668\u7b49\u65e0\u9700\u5173\u6ce8\u7a0b\u5e8f\u5728 RAM \u4e2d\u7684\u5b9e\u9645\u7269\u7406\u5e03\u5c40 \u7531\u4e8e\u9700\u8981\u5b9e\u9645\u9a7b\u7559\u5728\u5185\u5b58\u4e2d\u7684\u53ea\u662f\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u7a0b\u5e8f\u52a0\u8f7d\u548c\u8fd0\u884c\u7684\u901f\u5ea6\u4f1a\u63d0\u5347\uff0c\u4e14\u8fdb\u7a0b\u5bf9\u5185\u5b58\u7684\u5360\u7528\u53ef\u8d85\u51fa\u7269\u7406 RAM \u5bb9\u91cf \u6bcf\u4e2a\u8fdb\u7a0b\u4f7f\u7528\u7684 RAM \u51cf\u5c11\uff0cRAM \u4e2d\u53ef\u540c\u65f6\u5bb9\u7eb3\u66f4\u591a\u8fdb\u7a0b\uff0c\u63d0\u5347\u4e86 CPU \u7684\u5229\u7528\u7387 \u6808\u548c\u6808\u5e27 \u00b6 \u6808\u901a\u5e38\u5728\u6d41\u884c\u7684\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\u9a7b\u7559\u5728\u5185\u5b58\u7684\u9ad8\u7aef\u5e76\u5411\u4e0b\u589e\u957f\uff08\u671d\u7740\u5806\u7684\u65b9\u5411\uff09\uff0c\u5e76\u5b58\u5728\u4e00\u4e2a\u4e13\u7528\u7684\u5bc4\u5b58\u5668 \u6808\u6307\u9488 \u7528\u4e8e\u8ffd\u8e2a\u5f53\u524d\u6808\u9876\u3002\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u5728\u6808\u4e0a\u5206\u914d\u65b0\u7684\u4e00\u4e2a\u5e27\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\u518d\u5c06\u6b64\u5e27\u79fb\u53bb\u3002 \u5728\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u9645\u5b9e\u73b0\u4e2d\uff0c\u91ca\u653e\u6808\u5e27\u540e\u6808\u7684\u5927\u5c0f\u5e76\u4e0d\u4f1a\u51cf\u5c11\uff0c\u5728\u5206\u914d\u65b0\u7684\u6808\u5e27\u65f6\u4f1a\u91cd\u65b0\u5229\u7528\u8fd9\u4e9b\u5185\u5b58\u3002\u4ee5\u4e0a\u7684\u8ba8\u8bba\u53ea\u662f\u903b\u8f91\u4e0a\u7684\u3002 \u6709\u65f6\u4e5f\u79f0\u8fd9\u91cc\u7684\u6808\u4e3a\u7528\u6237\u6808 (user stack)\uff0c\u56e0\u6bcf\u4e2a\u8fdb\u7a0b\u4fdd\u7559\u5728\u5185\u6838\u4e2d\u7684\u5185\u5b58\u533a\u57df\u79f0\u4e3a\u5185\u6838\u6808\uff0c\u4e14\u5185\u6838\u5728\u5904\u7406\u7cfb\u7edf\u8c03\u7528\u65f6\u7531\u4e8e\u5185\u5b58\u4fdd\u62a4\u673a\u5236\u7684\u5b58\u5728\u65e0\u6cd5\u4f7f\u7528\u7528\u6237\u6808\uff0c\u53ea\u80fd\u4f7f\u7528\u9884\u7559\u7684\u5185\u6838\u6808\u3002 \u6bcf\u4e2a\u7528\u6237\u6808\u5e27\u5305\u62ec \u51fd\u6570\u5b9e\u53c2\u548c\u5c40\u90e8\u53d8\u91cf \u51fd\u6570\u8c03\u7528\u7684\u94fe\u63a5\u4fe1\u606f\uff1a\u6bcf\u4e2a\u51fd\u6570\u9700\u8981\u7528\u5230\u4e00\u4e9b CPU \u5bc4\u5b58\u5668\uff0c\u5f53\u51fd\u6570\u8c03\u7528\u53e6\u4e00\u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u88ab\u8c03\u51fd\u6570\u7684\u6808\u5e27\u4e2d\u4fdd\u5b58\u73b0\u5728\u5bc4\u5b58\u5668\u7684\u526f\u672c\uff0c\u4ee5\u4fbf\u51fd\u6570\u5728\u8fd4\u56de\u65f6\u80fd\u4e3a\u51fd\u6570\u8c03\u7528\u8005\u5c06\u5bc4\u5b58\u5668\u6062\u590d\u539f\u72b6 \u56e0\u51fd\u6570\u80fd\u5d4c\u5957\u8c03\u7528\uff0c\u56e0\u6b64\u6808\u4e2d\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u6808\u5e27\uff0c\u82e5\u4e00\u4e2a\u51fd\u6570\u9012\u5f52\u8c03\u7528\uff0c\u5219\u51fd\u6570\u5728\u6808\u4e2d\u4f1a\u5b58\u5728\u591a\u4e2a\u6808\u5e27\u3002 \u547d\u4ee4\u884c\u53c2\u6570 \u00b6 C \u8bed\u8a00\u7a0b\u5e8f\u4f7f\u7528 main() \u51fd\u6570\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff0c\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u901a\u8fc7\u4e24\u4e2a\u5165\u53c2\u4f20\u9012\u7ed9 main() \u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 int argc \u8868\u793a\u547d\u4ee4\u884c\u53c2\u6570\u7684\u4e2a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570 char *argv[] \u662f\u4e00\u4e2a\u6307\u5411\u547d\u4ee4\u884c\u53c2\u6570\u7684\u6307\u9488\u7684\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u53c2\u6570\u662f\u4ee5\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5373 argv[0] \u6307\u5411\u7684\u901a\u5e38\u662f\u8be5\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c argv \u7684\u6307\u9488\u5217\u8868\u4ee5 NULL \u6307\u9488\u7ed3\u5c3e\uff0c\u5373 argv[argc] = NULL argv[0] \u5305\u542b\u4e86\u8c03\u7528\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u4f8b\u5982 busybox \u8fd9\u7c7b\u5355\u6587\u4ef6\u6253\u5305\u7684\u4e8c\u8fdb\u5236\u5373\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6280\u5de7\uff0c\u901a\u8fc7 argv[0] \u5224\u65ad\u4e0d\u540c\u7684\u540d\u79f0\u8df3\u8f6c\u5230\u4e0d\u540c\u7684\u5b9e\u9645\u547d\u4ee4\u3002 \u7531\u4e8e argv \u5217\u8868\u4ee5 NULL \u7ec8\u6b62\uff0c\u53ef\u4ee5\u5c06\u5176\u7528\u4e8e\u5faa\u73af\u7684\u8fb9\u754c\u5224\u65ad\uff1a char ** p ; for ( p = argv ; * p != NULL ; p ++ ) puts ( * p ); \u4e5f\u53ef\u4ee5\u4f7f\u7528 argc \u6765\u5faa\u73af\uff1a int i ; for ( i = 0 ; i < argc ; i ++ ) { puts ( argv [ i ]); } \u53c2\u6570\u673a\u5236\u7684\u95ee\u9898\u662f\u4ed6\u4ec5\u9650 main() \u51fd\u6570\u53ef\u7528\uff0c\u5728\u4fdd\u8bc1\u79fb\u690d\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u82e5\u8981\u4fdd\u8bc1\u547d\u4ee4\u884c\u53c2\u6570\u53ef\u88ab\u5176\u4ed6\u51fd\u6570\u4f7f\u7528\uff0c\u9700\u8981\u5c06 argv \u4ee5\u53c2\u6570\u5f62\u5f0f\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u6216\u662f\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5411 argv \u7684\u5168\u5c40\u53d8\u91cf\u3002 \u8fd8\u6709\u4e00\u4e9b\u4e0d\u53ef\u79fb\u690d\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a Linux \u4e2d\u53ef\u4f7f\u7528 /proc/PID/cmdline \u8bfb\u53d6\u4efb\u610f\u8fdb\u7a0b\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u6bcf\u4e2a\u53c2\u6570\u4ee5\u7a7a\u5b57\u8282\u7ec8\u6b62\u3002 GNU C \u5e93\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u53ef\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u8bbf\u95ee\u8c03\u7528\u7a0b\u5e8f\u65f6\u7684\u7a0b\u5e8f\u540d\uff0c program_invocation_name \u5168\u5c40\u53d8\u91cf\u63d0\u4f9b\u4e86\u7528\u4e8e\u8c03\u8bd5\u7a0b\u5e8f\u7684\u5b8c\u6574\u8def\u5f84\u540d\uff0c program_invocation_short_name \u63d0\u4f9b\u4e86\u4e0d\u542b\u5b8c\u6574\u76ee\u5f55\u7684\u7a0b\u5e8f\u540d\u79f0\u672c\u8eab\u3002\u5b9a\u4e49 _GNU_SOURCE \u5b8f\u540e\u5373\u53ef\u4ece errno.h \u4e2d\u83b7\u5f97\u8fd9\u4e24\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u58f0\u660e\u3002 argv \u548c\u4fdd\u5b58\u73af\u5883\u5217\u8868\u7684 environ \u6570\u7ec4\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\u90fd\u9a7b\u7559\u5728\u8fdb\u7a0b\u6808\u4e0a\u4e00\u4e2a\u5355\u4e00\uff0c\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002\u8be5\u533a\u57df\u6709\u5927\u5c0f\u4e0a\u9650\uff0c\u6807\u51c6\u89c4\u5b9a\u4e86\u6700\u5c0f\u4e0a\u9650\u81f3\u5c11\u4e3a 4096 \u5b57\u8282\uff0c\u4f46\u591a\u6570\u7cfb\u7edf\u8fdc\u5927\u4e8e\u8fd9\u4e2a\u8bbe\u5b9a\u3002 \u53ef\u4ee5\u4f7f\u7528 getopt() \u51fd\u6570\u89e3\u6790\u547d\u4ee4\u884c\u9009\u9879\uff0c\u6ce8\u610f\u8fd9\u4e2a\u5e93\u51fd\u6570\u4ec5\u5b9a\u4e49\u5728 UNIX \u6807\u51c6\u4e2d\u3002 \u73af\u5883\u5217\u8868 \u00b6 \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e0e\u5176\u76f8\u5173\u7684\u79f0\u4e3a\u73af\u5883\u5217\u8868\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u3002\u4e5f\u7b80\u79f0\u4e3a\u73af\u5883 environment \u3002\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u4ee5 name=value \u7684\u5f62\u5f0f\u5b9a\u4e49\u3002\u5c06\u73af\u5883\u5217\u8868\u4e2d\u7684\u540d\u79f0\u79f0\u4e3a\u73af\u5883\u53d8\u91cf\u3002 \u65b0\u7684\u8fdb\u7a0b\u5728\u521b\u5efa\u65f6\u4f1a\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684\u73af\u5883\u526f\u672c\u3002\u8fd9\u4e5f\u662f\u4e00\u79cd\u539f\u59cb\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff0c\u73af\u5883\u53ef\u5c06\u4fe1\u606f\u4ece\u7236\u8fdb\u7a0b\u4f20\u9012\u7ed9\u5b50\u8fdb\u7a0b\uff0c\u4f46\u53ea\u6709\u5b50\u8fdb\u7a0b\u5728\u521b\u5efa\u65f6\u624d\u80fd\u83b7\u5f97\u7236\u8fdb\u7a0b\u7684\u62f7\u8d1d\uff0c\u8fd9\u4e2a\u4fe1\u606f\u4f20\u9012\u56e0\u6b64\u662f\u5355\u5411\u7684\uff0c\u4e00\u6b21\u6027\u7684\u3002\u8fdb\u7a0b\u521b\u5efa\u5b8c\u6bd5\u540e\uff0c\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u6539\u53d8\u4ed6\u4eec\u7684\u73af\u5883\u53d8\u91cf\uff0c\u4e14\u6539\u53d8\u7684\u73af\u5883\u53d8\u91cf\u4e0d\u518d\u88ab\u5bf9\u65b9\u53ef\u89c1\u3002 \u53ef\u4ee5\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u6539\u53d8\u4e00\u4e9b\u5e93\u51fd\u6570\u7684\u884c\u4e3a\u3002 \u591a\u6570 Shell \uff08\u5f53\u7136\u5305\u62ec bash\uff09\u4f7f\u7528 export \u5411\u73af\u5883\u91cc\u6dfb\u52a0\u53d8\u91cf\u503c\uff1a SHELL = /bin/bash export SHELL \u5728 bash \u548c ksh \u4e2d\uff0c\u53ef\u4ee5\u5199\u4f5c\uff1a export SHELL = /bin/bash \u5728 csh \u4e2d\uff0c\u9700\u8981\u4f7f\u7528 setenv \u547d\u4ee4 setenv SHELL /bin/bash \u4ee5\u4e0a\u5c06\u4e00\u4e2a\u503c\u6c38\u4e45\u6dfb\u52a0\u5230\u5f53\u524d Shell \u73af\u5883\u4e2d\uff0c\u6b64 Shell \u4e4b\u540e\u521b\u5efa\u7684\u6240\u6709\u8fdb\u7a0b\u90fd\u7ee7\u627f\u6b64\u73af\u5883\uff0c\u53ef\u4ee5\u4f7f\u7528 unset \u64a4\u9500\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\uff0c csh \u4e2d\u5219\u4f7f\u7528 unsetenv \u3002 \u5728 bash \u53ca\u5176\u517c\u5bb9\u7684 Shell \u4e2d\uff0c\u53ef\u5411\u6267\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u73af\u5883\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u5f71\u54cd\u5f53\u524d\u73af\u5883 NAME = value program printenv \u663e\u793a\u5f53\u524d\u73af\u5883\u5217\u8868\u3002 \u73af\u5883\u5217\u8868\u7684\u6392\u5217\u65e0\u5e8f\u3002 \u901a\u8fc7 /proc/PID/environ \u53ef\u8bbf\u95ee\u4efb\u610f\u8fdb\u7a0b\u7684\u73af\u5883\u5217\u8868\u3002\u6bcf\u5bf9\u4ee5\u7a7a\u5b57\u7b26\u7ec8\u6b62\u3002 \u5728 C \u7a0b\u5e8f\u4e2d\u53ef\u4f7f\u7528\u5168\u5c40\u53d8\u91cf char **environ \u8bbf\u95ee\u73af\u5883\u5217\u8868\u3002 environ \u4e0e argv \u7c7b\u4f3c\uff0c\u6307\u5411\u4e86\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e\u7684\u6307\u9488\u5217\u8868\uff0c\u6bcf\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u4ee5\u7a7a\u5b57\u8282\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002 \u53ef\u4ee5\u901a\u8fc7\u58f0\u660e main() \u4e2d\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u6765\u8bbf\u95ee\u73af\u5883\u5217\u8868\uff0c\u5373 int main ( int argc , char * argv [], char * envp []); \u4f46\u8fd9\u6837\u4e00\u6765\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5728 main() \u51fd\u6570\u4ee5\u5185\uff0c\u4e14\u8fd9\u4e2a\u7279\u6027\u4e0d\u5305\u542b\u5728 SUSv3 \u6807\u51c6\u5185\u3002 getenv() \u4ece\u8fdb\u7a0b\u73af\u5883\u4e2d\u68c0\u7d22\u67d0\u4e2a\u503c\u3002 #include <stdlib.h> char * getenv ( const char * name ); \u53c2\u6570\u63d0\u4f9b\u8981\u67e5\u8be2\u7684\u73af\u5883\u53d8\u91cf\u540d\uff0c\u51fd\u6570\u5c06\u8fd4\u56de\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\u6307\u9488\u3002\u82e5\u4e0d\u5b58\u5728\u6307\u5b9a\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5219 getenv() \u8fd4\u56de NULL\u3002 \u4f7f\u7528\u65f6\u6709\u51e0\u4e2a\u6ce8\u610f\u4e8b\u9879 SUSv3 \u89c4\u5b9a\u7a0b\u5e8f\u4e0d\u80fd\u4fee\u6539 getenv() \u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\uff0c\u7531\u4e8e\u5927\u591a\u5b9e\u73b0\u4e2d\u8be5\u5b57\u7b26\u4e32\u662f\u73af\u5883\u4e2d\u7684\u4e00\u90e8\u5206\u3002\u82e5\u8981\u4fee\u6539\u503c\u5e94\u4f7f\u7528 setenv() \u6216 putenv() \u51fd\u6570\u3002 SUSv3 \u5141\u8bb8 getenv() \u4f7f\u7528\u9759\u6001\u5206\u914d\u7684\u7f13\u51b2\u533a\u8fd4\u56de\u6267\u884c\u7ed3\u679c\uff0c\u540e\u7eed\u5bf9 getenv() \uff0c setenv() , putenv() unsetenv() \u7684\u8c03\u7528\u53ef\u91cd\u5199\u8be5\u7f13\u51b2\u533a\u3002\u4f46 GNU C \u5e93\u5e76\u6ca1\u6709\u4f7f\u7528\u9759\u6001\u7f13\u51b2\u533a\u3002 \u4f7f\u7528 putenv() \u53ef\u6dfb\u52a0\u4e00\u65b0\u53d8\u91cf\uff0c\u6216\u4fee\u6539\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u53d8\u91cf\u503c\u3002 #include <stdlib.h> int putenv ( char * string ) \u53c2\u6570\u662f\u4e00\u4e2a\u6307\u5411\u5f62\u5982 name=value \u7684\u5b57\u7b26\u4e32\u7684\u6307\u9488\u3002\u8c03\u7528\u51fd\u6570\u540e\uff0c\u8be5\u5b57\u7b26\u4e32\u5c31\u76f4\u63a5\u6210\u4e3a\u4e86\u73af\u5883\u7684\u4e00\u90e8\u5206\uff0c\u5373 environ \u4e2d\u7684\u67d0\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u5411\u5c06\u76f4\u63a5\u6307\u5411 string \u6307\u9488\u7684\u5730\u5740\uff0c\u800c\u975e string \u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\u3002\u56e0\u6b64\u82e5\u4e4b\u540e\u518d\u4fee\u6539 string \u6307\u5411\u7684\u5b57\u7b26\u4e32\u4f1a\u5f71\u54cd\u8fdb\u7a0b\u7684\u73af\u5883\u3002\u4e5f\u56e0\u6b64\uff0c string \u6307\u5411\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u5e94\u5206\u914d\u5728\u6808\u4e0a\u3002 putenv() \u51fd\u6570\u8c03\u7528\u5931\u8d25\u8fd4\u56de\u975e 0 \u503c\u3002 GNU \u7248\u672c\u8fd8\u5305\u542b\u4e86\u4e00\u4e2a\u975e\u6807\u51c6\u7684\u6269\u5c55\uff0c\u82e5 string \u53c2\u6570\u4e0d\u5305\u542b\u7b49\u53f7\uff0c\u5219\u4ece\u73af\u5883\u5217\u8868\u4e2d\u79fb\u9664 string \u547d\u540d\u7684\u73af\u5883\u53d8\u91cf\u3002 setenv() \u53ef\u4ee5\u4ee3\u66ff putenv() \u51fd\u6570\uff0c\u540c\u6837\u5411\u73af\u5883\u4e2d\u6dfb\u52a0\u53d8\u91cf #include <stdlib.h> int setenv ( const char * name , const char * value int overwrite ) setenv() \u4f1a\u5206\u914d\u4e00\u6bb5\u5185\u5b58\uff0c\u5c06 name \u548c value \u6307\u5411\u7684\u5185\u5bb9\u590d\u5236\u5230\u8be5\u7f13\u51b2\u533a\u3002 \u82e5 name \u6807\u8bc6\u7684\u53d8\u91cf\u5df2\u7ecf\u5b58\u5728\uff0c\u4e14 overwrite \u503c\u4e3a 0\uff0c\u5219 setenv() \u4e0d\u6539\u53d8\u73af\u5883\uff0c\u82e5 overwrite \u503c\u4e3a 0\uff0c\u5219 setenv() \u5c06\u6539\u53d8\u73af\u5883\u4e2d\u7684\u503c\u3002 unsetenv() \u4ece\u73af\u5883\u4e2d\u79fb\u9664 name \u6807\u8bc6\u7684\u53d8\u91cf #include <stdlib.h> int unsetenv ( const char * name ) \u6709\u65f6\u9700\u8981\u5b8c\u5168\u6e05\u9664\u6574\u4e2a\u73af\u5883\uff0c\u53ef\u4ee5\u5c06 environ \u8d4b\u503c\u4e3a NULL \u6765\u6e05\u9664\u73af\u5883\u3002\u53ef\u4f7f\u7528 clearenv() \u5b8c\u6210\u64cd\u4f5c #define _BSD_SOURCE /* Or #define _SVID_SOURCE */ #include <stdlib.h> int clearenv ( void ) \u8c03\u7528 setenv() \u548c clearenv() \u786e\u5b9e\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u9732\u3002 setenv() \u4f1a\u5206\u914d\u4e00\u6bb5\u7f13\u51b2\u533a\uff0c\u5176\u4f1a\u79f0\u4e3a\u73af\u5883\u7684\u4e00\u90e8\u5206\u3002\u800c clearenv() \u6ca1\u6709\u91ca\u653e\u8be5\u7f13\u51b2\u533a\uff0c\u82e5\u4e0d\u505c\u8c03\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\u786e\u5b9e\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u3002 SUSv3 \u6807\u51c6\u5b9e\u9645\u5b9a\u4e49\uff0c\u82e5\u7a0b\u5e8f\u76f4\u63a5\u4fee\u6539 environ \u53d8\u91cf\uff0c\u5219\u4e0d\u5bf9 setenv() \uff0c unsetenv() \u548c getenv() \u4f5c\u51fa\u5b9a\u4e49\uff0c clearenv() \u7684\u65b9\u5f0f\u5b9e\u9645\u662f\u4e0d\u88ab\u6807\u51c6\u5141\u8bb8\u7684\uff0c\u6807\u51c6\u89c4\u5b9a\u7684\u6e05\u7a7a\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f\u662f\u901a\u8fc7 environ \u53d8\u91cf\u83b7\u53d6\u6240\u6709\u73af\u5883\u53d8\u91cf\u7684\u540d\u79f0\uff0c\u7136\u540e\u9010\u4e00\u4f7f\u7528 unsetenv() \u79fb\u9664\u73af\u5883\u53d8\u91cf\u3002 \u975e\u5c40\u90e8\u8df3\u8f6c \u00b6 C \u548c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\u6709 goto \u5173\u952e\u5b57\uff0c\u4f46\u4e00\u76f4\u4e0d\u88ab\u9f13\u52b1\u4f7f\u7528\u3002\u4f46\u5728\u7279\u5b9a\u7684\u573a\u5408\u4e0b goto \u4e5f\u786e\u5b9e\u6709\u4ed6\u7684\u7528\u6b66\u4e4b\u5730\u3002 C \u7684 goto \u4e0d\u80fd\u4ece\u4e00\u4e2a\u51fd\u6570\u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u7531\u4e8e C \u4e2d\u6240\u6709\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5c42\u7ea7\u76f8\u540c\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u5224\u65ad\u5728\u8c03\u7528\u51fd\u6570 A \u65f6\u51fd\u6570 B \u7684\u6808\u5e27\u662f\u5426\u5728\u6808\u4e0a\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5224\u65ad\u4ece A \u51fd\u6570\u8df3\u8f6c\u5230 B \u51fd\u6570\u662f\u5426\u53ef\u884c\u3002 \u4f46\u5076\u5c14\u8fd8\u662f\u6709\u8fd9\u79cd\u9700\u6c42\u7684\u3002\u4f8b\u5982\u5728\u4e00\u4e2a\u6df1\u5ea6\u5d4c\u5957\u8c03\u7528\u7684\u51fd\u6570\u4e2d\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u6b64\u65f6\u9700\u8981\u653e\u5f03\u4efb\u52a1\uff0c\u4ece\u591a\u5c42\u51fd\u6570\u8c03\u7528\u4e2d\u8fd4\u56de\u3002\u6b64\u65f6\u786e\u5b9e\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u51fd\u6570\u90fd\u8fd4\u56de\u72b6\u6001\u503c\uff0c\u8ba9\u51fd\u6570\u7684\u8c03\u7528\u8005\u505a\u68c0\u67e5\u5e76\u5904\u7406\uff0c\u8fd9\u662f\u6709\u6548\u7684\u4e14\u4e5f\u662f\u6700\u597d\u7684\u65b9\u6cd5\u3002\u4f46\u6709\u7684\u65f6\u5019\u76f4\u63a5\u4ece\u5d4c\u5957\u51fd\u6570\u8df3\u51fa\u4f1a\u4f7f\u7f16\u7a0b\u66f4\u7b80\u5355\u3002 \u6b64\u65f6\uff0c setjmp() \u548c longjmp() \u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002 #include <setjmp.h> int setjmp ( jmp_buf env ) void longjmp ( jmp_buf env , int vol ) setjmp() \u4e3a\u540e\u7eed longjmp() \u8c03\u7528\u786e\u7acb\u4e86\u8df3\u8f6c\u7684\u76ee\u6807\uff0c\u5373\u53d1\u8d77 setjmp() \u8c03\u7528\u7684\u4f4d\u7f6e\u3002\u4ece\u7f16\u7801\u89d2\u5ea6\u6765\u8bf4\uff0c\u8c03\u7528 longjmp() \u4e4b\u540e\u5c31\u548c\u7b2c\u4e8c\u6b21\u8c03\u7528 setjmp() \u4e00\u6837\u3002\u901a\u8fc7\u67e5\u770b setjmp() \u7684\u8fd4\u56de\u503c\u5373\u53ef\u533a\u5206 setjmp \u7684\u8c03\u7528\u662f\u521d\u59cb\u8fd4\u56de\uff08\u5373\u8bbe\u7acb\u8df3\u8f6c\u76ee\u6807\u7684\u7b2c\u4e00\u6b21\u8c03\u7528\uff09\u8fd8\u662f\u7b2c\u4e8c\u6b21\u8fd4\u56de\uff08\u5373\u901a\u8fc7 longjmp() \u8df3\u8f6c\u540e\u56de\u5230 setjmp() \u7684\u4f4d\u7f6e)\u3002\u521d\u59cb\u8fd4\u56de\u503c\u4e3a 0\uff0c\u540e\u7eed\u7684\u8fd4\u56de\u503c\u4e3a longjmp() \u8c03\u7528\u4e2d val \u53c2\u6570\u6307\u5b9a\u7684\u4efb\u610f\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\u6765\u5224\u65ad\u51fa\u7a0b\u5e8f\u8df3\u81f3\u540c\u4e00\u76ee\u6807\u7684\u4e0d\u540c\u8d77\u8df3\u4f4d\u7f6e\u3002\u7279\u6b8a\u7684\uff0c\u82e5 val \u53c2\u6570\u8bbe\u4e3a 0\uff0c\u5219 longjmp() \u4f1a\u5c06\u5176\u66ff\u6362\u4e3a 1 \u4ee5\u4fbf\u4e0e\u521d\u6b21\u8fd4\u56de\u533a\u5206\u5f00\u3002 setjmp() \u51fd\u6570\u5c06\u5f53\u524d\u8fdb\u7a0b\u73af\u5883\u7684\u5404\u79cd\u4fe1\u606f\u4fdd\u5b58\u5230 env \u4e2d\uff0c\u8c03\u7528 lomgjmp() \u65f6\u9700\u6307\u5b9a\u76f8\u540c\u7684 env \u53d8\u91cf\u3002\u81ea\u7136\uff0c\u7531\u4e8e\u8c03\u7528\u5904\u4e8e\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u56e0\u6b64 env \u5e94\u8bbe\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u6216\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u3002 SUSv3 \u548c C99 \u89c4\u5b9a\u4e86 setjmp() \u7684\u4f7f\u7528\u8bed\u5883 \u6784\u6210\u9009\u62e9\u6216\u8fed\u4ee3\u8bed\u53e5\u4e2d (if, switch, while \u7b49)\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f \u4f5c\u4e3a\u4e00\u5143\u64cd\u4f5c\u7b26 ! \u7684\u64cd\u4f5c\u5bf9\u8c61\uff0c\u5176\u6700\u7ec8\u7684\u8868\u8fbe\u5f0f\u6784\u6210\u4e86\u9009\u62e9\u6216\u8fed\u4ee3\u63a7\u5236\u8bed\u53e5\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f \u4f5c\u4e3a\u6bd4\u8f83\u64cd\u4f5c\u7684\u4e00\u90e8\u5206\uff0c\u53e6\u4e00\u4e2a\u5bf9\u8c61\u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u6570\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u4e14\u6700\u7ec8\u7684\u8868\u8fbe\u5f0f\u6784\u6210\u9009\u62e9\u6216\u8fed\u4ee3\u8bed\u53e5\u7684\u6574\u4e2a\u63a7\u5236\u8868\u8fbe\u5f0f \u4f5c\u4e3a\u72ec\u7acb\u7684\u51fd\u6570\u8c03\u7528\uff0c\u4e14\u672a\u5d4c\u5165\u5230\u66f4\u5927\u7684\u8868\u8fbe\u5f0f\u4e2d\u3002 \u6ce8\u610f\uff0c\u8d4b\u503c\u8bed\u53e5\u4e0d\u5728\u4e0a\u8ff0\u4e4b\u5217\uff0c\u5373\u5f62\u5982 s = setjmp(env); \u662f\u4e0d\u7b26\u5408\u6807\u51c6\u7684\u3002 \u7531\u4e8e setjmp() \u4f5c\u4e3a\u4e00\u4e2a\u5e38\u89c4\u7684\u51fd\u6570\u5b9e\u73b0\u65e0\u6cd5\u4fdd\u8bc1\u62e5\u6709\u8db3\u591f\u7684\u4fe1\u606f\u6765\u4fdd\u5b58\u6240\u6709\u7684\u5bc4\u5b58\u5668\u503c\u548c\u5c01\u95ed\u8868\u8fbe\u5f0f\u4e2d\u7528\u5230\u7684\u4e34\u65f6\u6808\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u4e8e\u5728 longjmp() \u8c03\u7528\u540e\u6b64\u7c7b\u4fe1\u606f\u80fd\u6b63\u5e38\u6062\u590d\uff0c\u56e0\u6b64\u53ea\u80fd\u5728\u8db3\u591f\u7b80\u5355\u4e14\u65e0\u9700\u4e34\u65f6\u5b58\u50a8\u7684\u8868\u8fbe\u5f0f\u4e2d\u8c03\u7528 setjmp() longjmp() \u51fd\u6570\u4e0d\u80fd\u8df3\u8f6c\u5230\u4e00\u4e2a\u5df2\u7ecf\u8fd4\u56de\u7684\u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u51fd\u6570\u6240\u4f7f\u7528\u7684\u6808\u5df2\u7ecf\u88ab\u56de\u6536\u5373\u4e0d\u518d\u5b58\u5728\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5c06\u8df3\u8f6c\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6808\u4f4d\u7f6e\u3002\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5d29\u6e83\uff0c\u4e5f\u53ef\u80fd\u5f15\u8d77\u8c03\u7528\u4e0e\u8fd4\u56de\u95f4\u7684\u6b7b\u5faa\u73af\uff0c\u7a0b\u5e8f\u5c31\u50cf\u771f\u7684\u4ece\u4e00\u4e2a\u672a\u6267\u884c\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4e86\u3002 \u5728 SUSv3 \u4e2d\u89c4\u5b9a\u5982\u679c\u4ece\u5d4c\u5957\u7684\u4fe1\u53f7\u5904\u7406\u5668\u4e2d\u8c03\u7528 longjmp() \u5219\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 \u7531\u4e8e setjmp() \u548c longjmp() \u7684\u8df3\u8f6c\u64cd\u4f5c\u5728\u8fd0\u884c\u65f6\u624d\u80fd\u6b63\u786e\u786e\u7acb\u548c\u8fd0\u884c\uff0c\u7f16\u8bd1\u5668\u4f18\u5316\u65f6\u65e0\u6cd5\u8003\u8651\uff0c\u67d0\u4e9b ABI \u63a5\u53e3\u53c8\u8981\u6c42 longjmp() \u6062\u590d\u5148\u524d setjmp() \u8c03\u7528\u6240\u4fdd\u5b58\u7684 CPU \u5bc4\u5b58\u5668\u526f\u672c\uff0c\u6b64\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u88ab\u4f18\u5316\u7684\u53d8\u91cf\u88ab\u8d4b\u4e88\u9519\u8bef\u7684\u503c\u3002\u6b64\u65f6\u5e94\u5c06\u8c03\u7528 setjmp() \u4e2d\u6d89\u53ca\u7684\u53d8\u91cf\u4f7f\u7528 volatile \u5173\u952e\u5b57\u58f0\u660e\uff0c\u8ba9\u7f16\u8bd1\u5668\u4e0d\u5bf9\u6b64\u53d8\u91cf\u8fdb\u884c\u4f18\u5316\u3002 \u5728 gcc \u4e2d\uff0c\u52a0\u5165 -Wextra \u53ef\u8f93\u51fa\u6709\u7528\u7684\u8b66\u544a\u3002 \u663e\u7136\uff0c\u4e0e goto \u7684\u539f\u56e0\u7c7b\u4f3c\uff0c\u5728\u5b9e\u9645\u7f16\u7a0b\u4e2d\u5e94\u907f\u514d\u4f7f\u7528\u975e\u5c40\u90e8\u8df3\u8f6c\u3002 \u7ec3\u4e60 \u00b6 6-1 \u00b6 code: tlpi-dist/proc/mem_segments.c \u663e\u7136\uff0c\u8be5 static char mbuf[10240000]; \u7684\u58f0\u660e\u7531\u4e8e\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u5176\u88ab\u653e\u5165\u4e86\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff0c\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u4e0d\u4f1a\u4fdd\u5b58\u5b9e\u9645\u7684\u6570\u636e\uff0c\u4ec5\u5728\u8fd0\u884c\u65f6\u5c06\u5176\u653e\u5165\u5bf9\u5e94\u7684\u5185\u5b58\u4f4d\u7f6e\u5e76\u521d\u59cb\u5316\u3002 6-2 \u00b6 code: c6/bad_longjmp.c \u7ed3\u679c\u662f\u7531\u4e8e\u8bbf\u95ee\u4e86\u4e0d\u5b58\u5728\u7684\u6808\u7a7a\u95f4\uff0c\u8fd4\u56de\u4e86\u6bb5\u9519\u8bef\u3002 6-3 \u00b6 code: c6/setenv_unsetenv.c \u540c\u6837\u7684\uff0c\u6211\u6ca1\u5199\u6d4b\u8bd5\uff0c main() \u51fd\u6570\u53ea\u4e3a\u4e86\u901a\u8fc7\u7f16\u8bd1\u3002 \u8fd9\u91cc\u9762\u9700\u8981\u505a\u7684\u5224\u65ad\u6761\u4ef6\u8f83\u591a\u3002 \u6bd4\u8f83\u9ebb\u70e6\u7684\u662f unsetenv() \u5728\u627e\u5230\u73af\u5883\u53d8\u91cf\u540e\u9700\u8981\u628a\u6574\u4e2a\u6570\u7ec4\u7ed3\u6784\u5de6\u79fb\u6765\u5220\u9664\u5143\u7d20\u3002\u6211\u731c\u6d4b environ \u5b9e\u9645\u7684\u5b9e\u73b0\u5e94\u8be5\u4e5f\u7c7b\u4f3c\u4e00\u4e2a\u94fe\u8868\u7684\u7ed3\u6784\uff0c\u4f46 putenv() \u7ed9\u6211\u4eec\u62bd\u8c61\u6389\u4e86\u3002 setenv() \u5b9e\u73b0\u65f6\u5927\u53ef\u4ee5\u4f7f\u7528\u4e4b\u524d\u5b9e\u73b0\u7684 unsetenv()","title":"\u7b2c\u516d\u7ae0-\u8fdb\u7a0b"},{"location":"chap6/#cheaper-6","text":"","title":"Cheaper 6 \u8fdb\u7a0b"},{"location":"chap6/#_1","text":"\u8fdb\u7a0b process \u7528\u6237\u5185\u5b58\u7a7a\u95f4 user-space memory \u8fdb\u7a0b\u53f7 process ID \u7236\u8fdb\u7a0b\u53f7 parent process ID \u6bb5 segment \u6808\uff1astack \u6808\u5e27\uff1astack frames \u5806\uff1aheap \u5806\u9876: program break \u4e0d\u53ef\u91cd\u5165\u7684: nonreentrant \u91cd\u5165\uff1areentrancy \u8bbf\u95ee\u5c40\u90e8\u6027\uff1alocality of reference \u7a7a\u95f4\u5c40\u9650\u6027\uff1aSpatial locality \u65f6\u95f4\u5c40\u90e8\u6027\uff1aTemporal locality \u9a7b\u7559\u96c6\uff1aresident set \u9875\u9762\u9519\u8bef\uff1apage fault \u9875\u8868\uff1apage table \u865a\u62df\u5730\u5740\u7a7a\u95f4\uff1avirtual address space \u6808\u6307\u9488\uff1astack pointer \u73af\u5883\u5217\u8868\uff1aenvironment list","title":"\u8bcd\u6c47\u901f\u67e5"},{"location":"chap6/#_2","text":"\u8fdb\u7a0b\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5b9e\u4f8b\uff0c\u6362\u8a00\u4e4b\uff0c\u5b9e\u9645\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\u79f0\u4e3a\u8fdb\u7a0b\u3002 \u7a0b\u5e8f\u662f\u5305\u542b\u4e00\u7cfb\u5217\u4fe1\u606f\u7684\u6587\u4ef6\u3002\u5305\u62ec \u4e8c\u8fdb\u5236\u683c\u5f0f\u6807\u8bc6\uff1a\u65e9\u5e74\u4e3a\u6c47\u7f16\u8f93\u51fa a.out\uff0cCOFF\uff0c\u73b0\u5728\u4e00\u822c\u4f7f\u7528 ELF \u683c\u5f0f \u673a\u5668\u8bed\u8a00\u6307\u4ee4 \u7a0b\u5e8f\u5165\u53e3\u5730\u5740 \u6570\u636e\uff1a\u5305\u542b\u53d8\u91cf\u521d\u59cb\u5316\u7684\u503c\u548c\u7a0b\u5e8f\u4f7f\u7528\u7684\u5b57\u9762\u5e38\u91cf\u503c \u7b26\u53f7\u8868\u53ca\u91cd\u5b9a\u5411\u8868\uff1a\u63cf\u8ff0\u7a0b\u5e8f\u4e2d\u51fd\u6570\u548c\u53d8\u91cf\u7684\u4f4d\u7f6e\u548c\u540d\u79f0\uff0c\u7528\u4e8e\u8c03\u8bd5\u548c\u8fd0\u884c\u65f6\u7684\u7b26\u53f7\u89e3\u6790\uff08\u52a8\u6001\u94fe\u63a5\uff09 \u5171\u4eab\u5e93\u548c\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\uff1a\u5217\u51fa\u7a0b\u5e8f\u8fd0\u884c\u65f6\u9700\u8981\u4f7f\u7528\u7684\u5171\u4eab\u5e93\uff0c\u4ee5\u53ca\u52a0\u8f7d\u5171\u4eab\u5e93\u7684\u52a8\u6001\u94fe\u63a5\u5668\u7684\u8def\u5f84 \u5176\u4ed6\u4fe1\u606f \u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u8bb8\u591a\u8fdb\u7a0b\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u7a0b\u5e8f\u3002 \u4ece\u5185\u6838\u7684\u89d2\u5ea6\uff0c\u8fdb\u7a0b\u7531\u7528\u6237\u5185\u5b58\u7a7a\u95f4\u548c\u4e00\u4e9b\u5185\u6838\u6570\u636e\u7ed3\u6784\u6784\u6210\u3002\u7528\u6237\u5185\u5b58\u7a7a\u95f4\u5305\u542b\u7a0b\u5e8f\u4ee3\u7801\u53ca\u4ee3\u7801\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u5185\u6838\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8fdb\u7a0b\u72b6\u6001\u4fe1\u606f\u3002\u5185\u6838\u6570\u636e\u7ed3\u6784\u5305\u62ec\u4e0e\u8fdb\u7a0b\u76f8\u5173\u7684\u6807\u8bc6\u53f7\uff0c\u865a\u62df\u5185\u5b58\u8868\uff0c\u6253\u5f00\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u8868\uff0c\u4fe1\u53f7\u4f20\u9012\u53ca\u5904\u7406\u7684\u4fe1\u606f\uff0c\u8fdb\u7a0b\u8d44\u6e90\u7684\u4f7f\u7528\u4e0e\u9650\u5236\uff0c\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u548c\u5927\u91cf\u7684\u5176\u4ed6\u4fe1\u606f\u3002","title":"\u7b14\u8bb0"},{"location":"chap6/#_3","text":"\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53f7 (PID)\uff0c\u8fdb\u7a0b\u53f7\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u7528\u4e8e\u552f\u4e00\u6807\u8bc6\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e2a\u8fdb\u7a0b\u3002 getpid() \u8fd4\u56de\u5f53\u524d\u8c03\u7528\u7684\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53f7 #include <unistd.h> pid_t getpid ( void ) \u9664\u4e86\u4e2a\u522b\u7279\u6b8a\u7684\u8fdb\u7a0b\uff08\u5982 init ) \u4ee5\u5916\uff0c \u8fdb\u7a0b\u53f7\u548c\u7a0b\u5e8f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 Linux \u5185\u6838\u7684\u8fdb\u7a0b\u53f7\u5927\u5c0f\u9650\u5236\u53ef\u4ee5\u4ece /proc/sys/kernel/pid_max \u4e2d\u67e5\u770b\uff0c\u65b0\u8fdb\u7a0b\u521b\u5efa\u65f6\uff0c\u5185\u6838\u5c06\u6309\u987a\u5e8f\u5c06\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 PID \u5206\u914d\u7ed9\u8fdb\u7a0b\uff0c\u5f53\u8fdb\u7a0b\u53f7\u8fbe\u5230\u9650\u5236\u65f6\uff0c\u5185\u6838\u5c06 reset \u8ba1\u6570\u5668\u3002 \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a\u521b\u5efa\u81ea\u5df1\u7684\u7236\u8fdb\u7a0b\uff0c\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528 getppid() \u53ef\u67e5\u770b\u3002 #include <unistd.h> pid_t getppid ( void ); \u6bcf\u4e2a\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u53f7\u53cd\u6620\u4e86\u7cfb\u7edf\u8fdb\u7a0b\u95f4\u7684\u6811\u72b6\u5173\u7cfb\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u6700\u7ec8\u90fd\u80fd\u5f52\u5bbf\u5230 PID \u4e3a 1 \u7684\u8fdb\u7a0b init \u3002\u4f7f\u7528 pstree(1) \u53ef\u67e5\u770b\u7cfb\u7edf\u8fdb\u7a0b\u6811\u3002 \u5982\u679c\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u5219\u5b50\u8fdb\u7a0b\u4f1a\u53d8\u6210\u5b64\u513f\u8fdb\u7a0b\uff0c init \u8fdb\u7a0b\u5c31\u4f1a\u6536\u517b\u8be5\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u5bf9 getppid() \u7684\u8c03\u7528\u5c06\u8fd4\u56de 1. \u901a\u8fc7 /proc/PID/status \u4e2d\u7684 PPid \u5b57\u6bb5\uff0c\u4e5f\u53ef\u83b7\u77e5\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u3002","title":"\u8fdb\u7a0b\u53f7\u548c\u7236\u8fdb\u7a0b\u53f7"},{"location":"chap6/#_4","text":"\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u7531\u591a\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u79f0\u4e4b\u4e3a \u6bb5 \u6587\u672c\u6bb5\uff1a\u5305\u542b\u8fdb\u7a0b\u8fd0\u884c\u7684\u673a\u5668\u8bed\u8a00\u547d\u4ee4\uff0c\u53ea\u8bfb\uff0c\u53ef\u5171\u4eab\uff0c\u540c\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5171\u4eab\u540c\u4e00\u6587\u672c\u6bb5\u5185\u5b58 \u5df2\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff1a\u53c8\u540d\u7528\u6237\u521d\u59cb\u5316\u6570\u636e\u6bb5 (user-initialized data segment)\uff0c\u5305\u542b\u663e\u5f0f\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u3002 \u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff1a\u53c8\u540d\u96f6\u521d\u59cb\u5316\u6570\u636e\u6bb5 (zero-initialized data segment)\uff0c\u5305\u542b\u672a\u8fdb\u884c\u663e\u5f0f\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u3002\u7a0b\u5e8f\u542f\u52a8\u524d\u8be5\u6bb5\u88ab\u521d\u59cb\u5316\u4e3a 0\u3002\u5386\u53f2\u4e0a\u8be5\u6bb5\u88ab\u79f0\u4f5c BSS \u6bb5\uff0c\u4e14\u7a0b\u5e8f\u5728\u786c\u76d8\u5b58\u50a8\u65f6\u4e0d\u9700\u8981\u5bf9\u8be5\u6bb5\u5206\u914d\u786c\u76d8\u7a7a\u95f4\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\u7684\u4f4d\u7f6e\u548c\u6240\u9700\u5927\u5c0f\uff0c\u5728\u8fd0\u884c\u65f6\u518d\u5206\u914d\u7a7a\u95f4 \u6808\uff1a\u4e00\u4e2a\u52a8\u6001\u589e\u957f\u548c\u6536\u7f29\u7684\u6bb5\uff0c\u7531\u6808\u5e27\u7ec4\u6210\u3002\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u5f53\u524d\u8c03\u7528\u7684\u51fd\u6570\u5206\u914d\u4e00\u4e2a\u6808\u5e27\uff0c\u6808\u5e27\u4e2d\u5b58\u50a8\u4e86\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5b9e\u53c2\u548c\u8fd4\u56de\u503c\u3002 \u5806\uff1a\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u4e00\u5757\u533a\u57df\uff0c\u5806\u9876\u79f0\u4f5c program break. \u6b64\u5904\u8ba8\u8bba\u7684\u6bb5\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u865a\u62df\u5185\u5b58\u7684\u6982\u5ff5\uff0c\u800c\u975e\u786c\u4ef6\u4f53\u7cfb\u4e2d\u7684\u6982\u5ff5\u3002 \u6709\u65f6\u51fd\u6570\u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u662f\u9759\u6001\u5206\u914d\u7684\uff0c\u5373\u5185\u5b58\u53ef\u80fd\u5206\u914d\u5728\u5df2\u521d\u59cb\u5316\u6216\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\u4e2d\u3002\u5373\u82e5\u8fd4\u56de\u7684\u5185\u5bb9\u5b58\u5728\u4e8e\u9759\u6001\u7684\u5185\u5b58\u4e2d\uff0c\u5219\u4e0b\u4e00\u6b21\u5bf9\u8be5\u51fd\u6570\u7684\u8c03\u7528\u53ef\u80fd\u4f1a\u8986\u76d6\u4e0a\u4e00\u6b21\u7684\u7ed3\u679c\u3002\u79f0\u4f5c\u8be5\u51fd\u6570 \u4e0d\u53ef\u91cd\u5165 \u5927\u591a UNIX \u5b9e\u73b0\u63d0\u4f9b\u4e86\u4e09\u4e2a\u5168\u5c40\u7b26\u53f7\u6765\u83b7\u53d6\u76f8\u5e94\u6587\u672c\u6bb5\u7684\u5730\u5740\uff0c\u4f46\u8be5\u505a\u6cd5\u672a\u7ecf SUSv3 \u6807\u51c6\u5316 \u8981\u4f7f\u7528\u8be5\u7b26\u53f7\u9700\u5148\u663e\u5f0f\u58f0\u660e extern char etext , edata , end ; // \u5206\u522b\u4e3a\u7a0b\u5e8f\u6587\u672c\u6bb5\uff0c\u5df2\u521d\u59cb\u5316\u6570\u636e\u6bb5\u548c\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\u7ed3\u5c3e\u5904\u4e0b\u4e00\u5b57\u8282\u3002\u53ef\u4f7f\u7528\u53d6\u5730\u5740\u7b26\u83b7\u53d6\u5730\u5740\u3002","title":"\u8fdb\u7a0b\u7684\u5185\u5b58\u5e03\u5c40"},{"location":"chap6/#_5","text":"\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u57fa\u672c\u90fd\u4f7f\u7528\u4e86\u865a\u62df\u5185\u5b58\u7ba1\u7406\u6280\u672f\u3002 \u5927\u591a\u7a0b\u5e8f\u4f53\u73b0\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u8bbf\u95ee\u5c40\u90e8\u6027: \u7a7a\u95f4\u5c40\u90e8\u6027\uff1a\u7a0b\u5e8f\u503e\u5411\u4e8e\u8bbf\u95ee\u5728\u6700\u8fd1\u8bbf\u95ee\u8fc7\u7684\u5185\u5b58\u5730\u5740\u9644\u8fd1\u7684\u5185\u5b58\u3002 \u65f6\u95f4\u5c40\u90e8\u6027\uff1a\u7a0b\u5e8f\u503e\u5411\u4e8e\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u518d\u6b21\u8bbf\u95ee\u6700\u8fd1\u521a\u8bbf\u95ee\u8fc7\u7684\u5185\u5b58\u3002\uff08\u7531\u4e8e\u5faa\u73af\uff09 \u56e0\u6b64\uff0c\u5373\u4fbf\u53ea\u6709\u90e8\u5206\u5730\u5740\u7a7a\u95f4\u771f\u6b63\u5b58\u5728\u4e8e RAM \u4e2d\uff0c\u7a0b\u5e8f\u4ecd\u7136\u53ef\u4ee5\u8fd0\u884c\u3002 \u865a\u62df\u5185\u5b58\u5373\u5c06\u7a0b\u5e8f\u4f7f\u7528\u7684\u5185\u5b58\u5206\u5272\u6210\u5c0f\u7684\uff0c\u56fa\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\u9875 (page) \u5355\u5143\uff0c\u5c06 RAM \u5212\u5206\u6210\u4e00\u7cfb\u5217\u4e0e\u865a\u62df\u5185\u5b58\u9875\u5927\u5c0f\u76f8\u540c\u7684\u9875\u5e27\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u5728\u7279\u5b9a\u65f6\u95f4\u5185\u53ea\u6709\u90e8\u5206\u9875\u9700\u8981\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u8fd9\u4e9b\u9875\u5373\u4e3a \u9a7b\u7559\u96c6 \u3002\u7a0b\u5e8f\u672a\u4f7f\u7528\u7684\u9875\u62f7\u8d1d\u5b58\u653e\u5728\u4ea4\u6362\u533a\u4e2d (swap area)\uff0c\u4ec5\u5728\u9700\u8981\u65f6\u624d\u4f1a\u8f7d\u5165\u5185\u5b58\u3002\u82e5\u8fdb\u7a0b\u8981\u8bbf\u95ee\u7684\u9875\u9762\u76ee\u524d\u672a\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u4f1a\u53d1\u751f\u9875\u9762\u9519\u8bef\uff0c\u6b64\u65f6\u5185\u6838\u6302\u8d77\u8fdb\u7a0b\uff0c\u4ece\u78c1\u76d8\u7684\u4ea4\u6362\u533a\u4e2d\u5c06\u8be5\u9875\u9762\u8f7d\u5165\u5185\u5b58\u3002 \u901a\u5e38\uff0cx86_32 \u5e73\u53f0\u9875\u5927\u5c0f\u4e3a 4096 \u5b57\u8282\u3002\u82e5 CPU \u652f\u6301\u4e14\u7cfb\u7edf\u914d\u7f6e\u4f7f\u7528\u53ef\u4ee5\u8c03\u7528\u5927\u9875\u3002 \u5185\u6838\u4f1a\u4e3a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u5f20\u9875\u8868\uff0c\u8be5\u8868\u63cf\u8ff0\u6bcf\u4e2a\u5185\u5b58\u9875\u5728\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4f4d\u7f6e\u3002\u6bcf\u4e2a\u6761\u76ee\u8981\u4e48\u6307\u51fa\u4e00\u4e2a\u9875\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8981\u4e48\u6307\u51fa\u5f53\u524d\u9a7b\u7559\u5728\u786c\u76d8\u4e0a\u3002 \u53ef\u80fd\u5b58\u5728\u5927\u6bb5\u865a\u62df\u5730\u5740\u7a7a\u95f4\u672a\u88ab\u4f7f\u7528\uff0c\u6545\u4e5f\u65e0\u5fc5\u8981\u7ef4\u62a4\u5176\u9875\u8868\u6761\u76ee\uff0c\u4f46\u5f53\u8fdb\u7a0b\u8bd5\u56fe\u8bbf\u95ee\u65e0\u9875\u8868\u6761\u76ee\u5bf9\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u8fdb\u7a0b\u5c06\u6536\u5230\u4e00\u4e2a SIGSEGV \u4fe1\u53f7\u3002 \u8fdb\u7a0b\u7684\u6709\u6548\u865a\u62df\u5730\u5740\u8303\u56f4\u4e5f\u4f1a\u5728\u8fdb\u7a0b\u7684\u751f\u547d\u5468\u671f\u4e2d\u53d1\u751f\u53d8\u5316\uff0c\u4f8b\u5982\uff1a \u7531\u4e8e\u6808\u5411\u4e0b\u589e\u957f\u8d85\u51fa\u4e4b\u524d\u8fbe\u5230\u8fc7\u7684\u4f4d\u7f6e \u5f53\u5728\u5806\u4e2d\u5206\u914d\u6216\u91ca\u653e\u5185\u5b58\u65f6 \u5f53\u8c03\u7528 shmat() \u8fde\u63a5 SysV \u5171\u4eab\u5185\u5b58\u533a\u65f6\uff0c\u6216\u8c03\u7528 shmdt() \u8131\u79bb\u5171\u4eab\u5185\u5b58\u533a\u65f6\u3002 \u5f53\u8c03\u7528 mmap() \u521b\u5efa\u5185\u5b58\u6620\u5c04\u8c03\u7528 munmap() \u89e3\u9664\u5185\u5b58\u6620\u5c04\u65f6\u3002 \u865a\u62df\u5185\u5b58\u5e26\u6765\u4e86\u8bb8\u591a\u4f18\u70b9\uff1a \u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u95f4\uff0c\u8fdb\u7a0b\u4e0e\u5185\u6838\u95f4\u4e92\u76f8\u9694\u79bb\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4e0d\u80fd\u8bfb\u5199\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6216\u5185\u6838\u7684\u5185\u5b58\u3002 \u4e24\u4e2a\u6216\u66f4\u591a\u8fdb\u7a0b\u53ef\u4ee5\u5728\u7279\u5b9a\u6761\u4ef6\u4e0b\u5171\u4eab\u5185\u5b58\u3002 \u4fbf\u4e8e\u5b9e\u73b0\u5185\u5b58\u4fdd\u62a4\u673a\u5236 \u7a0b\u5e8f\u5458\u548c\u7f16\u8bd1\u5668\uff0c\u94fe\u63a5\u5668\u7b49\u65e0\u9700\u5173\u6ce8\u7a0b\u5e8f\u5728 RAM \u4e2d\u7684\u5b9e\u9645\u7269\u7406\u5e03\u5c40 \u7531\u4e8e\u9700\u8981\u5b9e\u9645\u9a7b\u7559\u5728\u5185\u5b58\u4e2d\u7684\u53ea\u662f\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u7a0b\u5e8f\u52a0\u8f7d\u548c\u8fd0\u884c\u7684\u901f\u5ea6\u4f1a\u63d0\u5347\uff0c\u4e14\u8fdb\u7a0b\u5bf9\u5185\u5b58\u7684\u5360\u7528\u53ef\u8d85\u51fa\u7269\u7406 RAM \u5bb9\u91cf \u6bcf\u4e2a\u8fdb\u7a0b\u4f7f\u7528\u7684 RAM \u51cf\u5c11\uff0cRAM \u4e2d\u53ef\u540c\u65f6\u5bb9\u7eb3\u66f4\u591a\u8fdb\u7a0b\uff0c\u63d0\u5347\u4e86 CPU \u7684\u5229\u7528\u7387","title":"\u865a\u62df\u5185\u5b58\u7ba1\u7406"},{"location":"chap6/#_6","text":"\u6808\u901a\u5e38\u5728\u6d41\u884c\u7684\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\u9a7b\u7559\u5728\u5185\u5b58\u7684\u9ad8\u7aef\u5e76\u5411\u4e0b\u589e\u957f\uff08\u671d\u7740\u5806\u7684\u65b9\u5411\uff09\uff0c\u5e76\u5b58\u5728\u4e00\u4e2a\u4e13\u7528\u7684\u5bc4\u5b58\u5668 \u6808\u6307\u9488 \u7528\u4e8e\u8ffd\u8e2a\u5f53\u524d\u6808\u9876\u3002\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u5728\u6808\u4e0a\u5206\u914d\u65b0\u7684\u4e00\u4e2a\u5e27\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\u518d\u5c06\u6b64\u5e27\u79fb\u53bb\u3002 \u5728\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u9645\u5b9e\u73b0\u4e2d\uff0c\u91ca\u653e\u6808\u5e27\u540e\u6808\u7684\u5927\u5c0f\u5e76\u4e0d\u4f1a\u51cf\u5c11\uff0c\u5728\u5206\u914d\u65b0\u7684\u6808\u5e27\u65f6\u4f1a\u91cd\u65b0\u5229\u7528\u8fd9\u4e9b\u5185\u5b58\u3002\u4ee5\u4e0a\u7684\u8ba8\u8bba\u53ea\u662f\u903b\u8f91\u4e0a\u7684\u3002 \u6709\u65f6\u4e5f\u79f0\u8fd9\u91cc\u7684\u6808\u4e3a\u7528\u6237\u6808 (user stack)\uff0c\u56e0\u6bcf\u4e2a\u8fdb\u7a0b\u4fdd\u7559\u5728\u5185\u6838\u4e2d\u7684\u5185\u5b58\u533a\u57df\u79f0\u4e3a\u5185\u6838\u6808\uff0c\u4e14\u5185\u6838\u5728\u5904\u7406\u7cfb\u7edf\u8c03\u7528\u65f6\u7531\u4e8e\u5185\u5b58\u4fdd\u62a4\u673a\u5236\u7684\u5b58\u5728\u65e0\u6cd5\u4f7f\u7528\u7528\u6237\u6808\uff0c\u53ea\u80fd\u4f7f\u7528\u9884\u7559\u7684\u5185\u6838\u6808\u3002 \u6bcf\u4e2a\u7528\u6237\u6808\u5e27\u5305\u62ec \u51fd\u6570\u5b9e\u53c2\u548c\u5c40\u90e8\u53d8\u91cf \u51fd\u6570\u8c03\u7528\u7684\u94fe\u63a5\u4fe1\u606f\uff1a\u6bcf\u4e2a\u51fd\u6570\u9700\u8981\u7528\u5230\u4e00\u4e9b CPU \u5bc4\u5b58\u5668\uff0c\u5f53\u51fd\u6570\u8c03\u7528\u53e6\u4e00\u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u88ab\u8c03\u51fd\u6570\u7684\u6808\u5e27\u4e2d\u4fdd\u5b58\u73b0\u5728\u5bc4\u5b58\u5668\u7684\u526f\u672c\uff0c\u4ee5\u4fbf\u51fd\u6570\u5728\u8fd4\u56de\u65f6\u80fd\u4e3a\u51fd\u6570\u8c03\u7528\u8005\u5c06\u5bc4\u5b58\u5668\u6062\u590d\u539f\u72b6 \u56e0\u51fd\u6570\u80fd\u5d4c\u5957\u8c03\u7528\uff0c\u56e0\u6b64\u6808\u4e2d\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u6808\u5e27\uff0c\u82e5\u4e00\u4e2a\u51fd\u6570\u9012\u5f52\u8c03\u7528\uff0c\u5219\u51fd\u6570\u5728\u6808\u4e2d\u4f1a\u5b58\u5728\u591a\u4e2a\u6808\u5e27\u3002","title":"\u6808\u548c\u6808\u5e27"},{"location":"chap6/#_7","text":"C \u8bed\u8a00\u7a0b\u5e8f\u4f7f\u7528 main() \u51fd\u6570\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff0c\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u901a\u8fc7\u4e24\u4e2a\u5165\u53c2\u4f20\u9012\u7ed9 main() \u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 int argc \u8868\u793a\u547d\u4ee4\u884c\u53c2\u6570\u7684\u4e2a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570 char *argv[] \u662f\u4e00\u4e2a\u6307\u5411\u547d\u4ee4\u884c\u53c2\u6570\u7684\u6307\u9488\u7684\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u53c2\u6570\u662f\u4ee5\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5373 argv[0] \u6307\u5411\u7684\u901a\u5e38\u662f\u8be5\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c argv \u7684\u6307\u9488\u5217\u8868\u4ee5 NULL \u6307\u9488\u7ed3\u5c3e\uff0c\u5373 argv[argc] = NULL argv[0] \u5305\u542b\u4e86\u8c03\u7528\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u4f8b\u5982 busybox \u8fd9\u7c7b\u5355\u6587\u4ef6\u6253\u5305\u7684\u4e8c\u8fdb\u5236\u5373\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6280\u5de7\uff0c\u901a\u8fc7 argv[0] \u5224\u65ad\u4e0d\u540c\u7684\u540d\u79f0\u8df3\u8f6c\u5230\u4e0d\u540c\u7684\u5b9e\u9645\u547d\u4ee4\u3002 \u7531\u4e8e argv \u5217\u8868\u4ee5 NULL \u7ec8\u6b62\uff0c\u53ef\u4ee5\u5c06\u5176\u7528\u4e8e\u5faa\u73af\u7684\u8fb9\u754c\u5224\u65ad\uff1a char ** p ; for ( p = argv ; * p != NULL ; p ++ ) puts ( * p ); \u4e5f\u53ef\u4ee5\u4f7f\u7528 argc \u6765\u5faa\u73af\uff1a int i ; for ( i = 0 ; i < argc ; i ++ ) { puts ( argv [ i ]); } \u53c2\u6570\u673a\u5236\u7684\u95ee\u9898\u662f\u4ed6\u4ec5\u9650 main() \u51fd\u6570\u53ef\u7528\uff0c\u5728\u4fdd\u8bc1\u79fb\u690d\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u82e5\u8981\u4fdd\u8bc1\u547d\u4ee4\u884c\u53c2\u6570\u53ef\u88ab\u5176\u4ed6\u51fd\u6570\u4f7f\u7528\uff0c\u9700\u8981\u5c06 argv \u4ee5\u53c2\u6570\u5f62\u5f0f\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u6216\u662f\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5411 argv \u7684\u5168\u5c40\u53d8\u91cf\u3002 \u8fd8\u6709\u4e00\u4e9b\u4e0d\u53ef\u79fb\u690d\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a Linux \u4e2d\u53ef\u4f7f\u7528 /proc/PID/cmdline \u8bfb\u53d6\u4efb\u610f\u8fdb\u7a0b\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u6bcf\u4e2a\u53c2\u6570\u4ee5\u7a7a\u5b57\u8282\u7ec8\u6b62\u3002 GNU C \u5e93\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u53ef\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u8bbf\u95ee\u8c03\u7528\u7a0b\u5e8f\u65f6\u7684\u7a0b\u5e8f\u540d\uff0c program_invocation_name \u5168\u5c40\u53d8\u91cf\u63d0\u4f9b\u4e86\u7528\u4e8e\u8c03\u8bd5\u7a0b\u5e8f\u7684\u5b8c\u6574\u8def\u5f84\u540d\uff0c program_invocation_short_name \u63d0\u4f9b\u4e86\u4e0d\u542b\u5b8c\u6574\u76ee\u5f55\u7684\u7a0b\u5e8f\u540d\u79f0\u672c\u8eab\u3002\u5b9a\u4e49 _GNU_SOURCE \u5b8f\u540e\u5373\u53ef\u4ece errno.h \u4e2d\u83b7\u5f97\u8fd9\u4e24\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u58f0\u660e\u3002 argv \u548c\u4fdd\u5b58\u73af\u5883\u5217\u8868\u7684 environ \u6570\u7ec4\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\u90fd\u9a7b\u7559\u5728\u8fdb\u7a0b\u6808\u4e0a\u4e00\u4e2a\u5355\u4e00\uff0c\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002\u8be5\u533a\u57df\u6709\u5927\u5c0f\u4e0a\u9650\uff0c\u6807\u51c6\u89c4\u5b9a\u4e86\u6700\u5c0f\u4e0a\u9650\u81f3\u5c11\u4e3a 4096 \u5b57\u8282\uff0c\u4f46\u591a\u6570\u7cfb\u7edf\u8fdc\u5927\u4e8e\u8fd9\u4e2a\u8bbe\u5b9a\u3002 \u53ef\u4ee5\u4f7f\u7528 getopt() \u51fd\u6570\u89e3\u6790\u547d\u4ee4\u884c\u9009\u9879\uff0c\u6ce8\u610f\u8fd9\u4e2a\u5e93\u51fd\u6570\u4ec5\u5b9a\u4e49\u5728 UNIX \u6807\u51c6\u4e2d\u3002","title":"\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"chap6/#_8","text":"\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e0e\u5176\u76f8\u5173\u7684\u79f0\u4e3a\u73af\u5883\u5217\u8868\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u3002\u4e5f\u7b80\u79f0\u4e3a\u73af\u5883 environment \u3002\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u4ee5 name=value \u7684\u5f62\u5f0f\u5b9a\u4e49\u3002\u5c06\u73af\u5883\u5217\u8868\u4e2d\u7684\u540d\u79f0\u79f0\u4e3a\u73af\u5883\u53d8\u91cf\u3002 \u65b0\u7684\u8fdb\u7a0b\u5728\u521b\u5efa\u65f6\u4f1a\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684\u73af\u5883\u526f\u672c\u3002\u8fd9\u4e5f\u662f\u4e00\u79cd\u539f\u59cb\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff0c\u73af\u5883\u53ef\u5c06\u4fe1\u606f\u4ece\u7236\u8fdb\u7a0b\u4f20\u9012\u7ed9\u5b50\u8fdb\u7a0b\uff0c\u4f46\u53ea\u6709\u5b50\u8fdb\u7a0b\u5728\u521b\u5efa\u65f6\u624d\u80fd\u83b7\u5f97\u7236\u8fdb\u7a0b\u7684\u62f7\u8d1d\uff0c\u8fd9\u4e2a\u4fe1\u606f\u4f20\u9012\u56e0\u6b64\u662f\u5355\u5411\u7684\uff0c\u4e00\u6b21\u6027\u7684\u3002\u8fdb\u7a0b\u521b\u5efa\u5b8c\u6bd5\u540e\uff0c\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u6539\u53d8\u4ed6\u4eec\u7684\u73af\u5883\u53d8\u91cf\uff0c\u4e14\u6539\u53d8\u7684\u73af\u5883\u53d8\u91cf\u4e0d\u518d\u88ab\u5bf9\u65b9\u53ef\u89c1\u3002 \u53ef\u4ee5\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u6539\u53d8\u4e00\u4e9b\u5e93\u51fd\u6570\u7684\u884c\u4e3a\u3002 \u591a\u6570 Shell \uff08\u5f53\u7136\u5305\u62ec bash\uff09\u4f7f\u7528 export \u5411\u73af\u5883\u91cc\u6dfb\u52a0\u53d8\u91cf\u503c\uff1a SHELL = /bin/bash export SHELL \u5728 bash \u548c ksh \u4e2d\uff0c\u53ef\u4ee5\u5199\u4f5c\uff1a export SHELL = /bin/bash \u5728 csh \u4e2d\uff0c\u9700\u8981\u4f7f\u7528 setenv \u547d\u4ee4 setenv SHELL /bin/bash \u4ee5\u4e0a\u5c06\u4e00\u4e2a\u503c\u6c38\u4e45\u6dfb\u52a0\u5230\u5f53\u524d Shell \u73af\u5883\u4e2d\uff0c\u6b64 Shell \u4e4b\u540e\u521b\u5efa\u7684\u6240\u6709\u8fdb\u7a0b\u90fd\u7ee7\u627f\u6b64\u73af\u5883\uff0c\u53ef\u4ee5\u4f7f\u7528 unset \u64a4\u9500\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\uff0c csh \u4e2d\u5219\u4f7f\u7528 unsetenv \u3002 \u5728 bash \u53ca\u5176\u517c\u5bb9\u7684 Shell \u4e2d\uff0c\u53ef\u5411\u6267\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u73af\u5883\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u5f71\u54cd\u5f53\u524d\u73af\u5883 NAME = value program printenv \u663e\u793a\u5f53\u524d\u73af\u5883\u5217\u8868\u3002 \u73af\u5883\u5217\u8868\u7684\u6392\u5217\u65e0\u5e8f\u3002 \u901a\u8fc7 /proc/PID/environ \u53ef\u8bbf\u95ee\u4efb\u610f\u8fdb\u7a0b\u7684\u73af\u5883\u5217\u8868\u3002\u6bcf\u5bf9\u4ee5\u7a7a\u5b57\u7b26\u7ec8\u6b62\u3002 \u5728 C \u7a0b\u5e8f\u4e2d\u53ef\u4f7f\u7528\u5168\u5c40\u53d8\u91cf char **environ \u8bbf\u95ee\u73af\u5883\u5217\u8868\u3002 environ \u4e0e argv \u7c7b\u4f3c\uff0c\u6307\u5411\u4e86\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e\u7684\u6307\u9488\u5217\u8868\uff0c\u6bcf\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u4ee5\u7a7a\u5b57\u8282\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002 \u53ef\u4ee5\u901a\u8fc7\u58f0\u660e main() \u4e2d\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u6765\u8bbf\u95ee\u73af\u5883\u5217\u8868\uff0c\u5373 int main ( int argc , char * argv [], char * envp []); \u4f46\u8fd9\u6837\u4e00\u6765\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5728 main() \u51fd\u6570\u4ee5\u5185\uff0c\u4e14\u8fd9\u4e2a\u7279\u6027\u4e0d\u5305\u542b\u5728 SUSv3 \u6807\u51c6\u5185\u3002 getenv() \u4ece\u8fdb\u7a0b\u73af\u5883\u4e2d\u68c0\u7d22\u67d0\u4e2a\u503c\u3002 #include <stdlib.h> char * getenv ( const char * name ); \u53c2\u6570\u63d0\u4f9b\u8981\u67e5\u8be2\u7684\u73af\u5883\u53d8\u91cf\u540d\uff0c\u51fd\u6570\u5c06\u8fd4\u56de\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\u6307\u9488\u3002\u82e5\u4e0d\u5b58\u5728\u6307\u5b9a\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5219 getenv() \u8fd4\u56de NULL\u3002 \u4f7f\u7528\u65f6\u6709\u51e0\u4e2a\u6ce8\u610f\u4e8b\u9879 SUSv3 \u89c4\u5b9a\u7a0b\u5e8f\u4e0d\u80fd\u4fee\u6539 getenv() \u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\uff0c\u7531\u4e8e\u5927\u591a\u5b9e\u73b0\u4e2d\u8be5\u5b57\u7b26\u4e32\u662f\u73af\u5883\u4e2d\u7684\u4e00\u90e8\u5206\u3002\u82e5\u8981\u4fee\u6539\u503c\u5e94\u4f7f\u7528 setenv() \u6216 putenv() \u51fd\u6570\u3002 SUSv3 \u5141\u8bb8 getenv() \u4f7f\u7528\u9759\u6001\u5206\u914d\u7684\u7f13\u51b2\u533a\u8fd4\u56de\u6267\u884c\u7ed3\u679c\uff0c\u540e\u7eed\u5bf9 getenv() \uff0c setenv() , putenv() unsetenv() \u7684\u8c03\u7528\u53ef\u91cd\u5199\u8be5\u7f13\u51b2\u533a\u3002\u4f46 GNU C \u5e93\u5e76\u6ca1\u6709\u4f7f\u7528\u9759\u6001\u7f13\u51b2\u533a\u3002 \u4f7f\u7528 putenv() \u53ef\u6dfb\u52a0\u4e00\u65b0\u53d8\u91cf\uff0c\u6216\u4fee\u6539\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u53d8\u91cf\u503c\u3002 #include <stdlib.h> int putenv ( char * string ) \u53c2\u6570\u662f\u4e00\u4e2a\u6307\u5411\u5f62\u5982 name=value \u7684\u5b57\u7b26\u4e32\u7684\u6307\u9488\u3002\u8c03\u7528\u51fd\u6570\u540e\uff0c\u8be5\u5b57\u7b26\u4e32\u5c31\u76f4\u63a5\u6210\u4e3a\u4e86\u73af\u5883\u7684\u4e00\u90e8\u5206\uff0c\u5373 environ \u4e2d\u7684\u67d0\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u5411\u5c06\u76f4\u63a5\u6307\u5411 string \u6307\u9488\u7684\u5730\u5740\uff0c\u800c\u975e string \u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\u3002\u56e0\u6b64\u82e5\u4e4b\u540e\u518d\u4fee\u6539 string \u6307\u5411\u7684\u5b57\u7b26\u4e32\u4f1a\u5f71\u54cd\u8fdb\u7a0b\u7684\u73af\u5883\u3002\u4e5f\u56e0\u6b64\uff0c string \u6307\u5411\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u5e94\u5206\u914d\u5728\u6808\u4e0a\u3002 putenv() \u51fd\u6570\u8c03\u7528\u5931\u8d25\u8fd4\u56de\u975e 0 \u503c\u3002 GNU \u7248\u672c\u8fd8\u5305\u542b\u4e86\u4e00\u4e2a\u975e\u6807\u51c6\u7684\u6269\u5c55\uff0c\u82e5 string \u53c2\u6570\u4e0d\u5305\u542b\u7b49\u53f7\uff0c\u5219\u4ece\u73af\u5883\u5217\u8868\u4e2d\u79fb\u9664 string \u547d\u540d\u7684\u73af\u5883\u53d8\u91cf\u3002 setenv() \u53ef\u4ee5\u4ee3\u66ff putenv() \u51fd\u6570\uff0c\u540c\u6837\u5411\u73af\u5883\u4e2d\u6dfb\u52a0\u53d8\u91cf #include <stdlib.h> int setenv ( const char * name , const char * value int overwrite ) setenv() \u4f1a\u5206\u914d\u4e00\u6bb5\u5185\u5b58\uff0c\u5c06 name \u548c value \u6307\u5411\u7684\u5185\u5bb9\u590d\u5236\u5230\u8be5\u7f13\u51b2\u533a\u3002 \u82e5 name \u6807\u8bc6\u7684\u53d8\u91cf\u5df2\u7ecf\u5b58\u5728\uff0c\u4e14 overwrite \u503c\u4e3a 0\uff0c\u5219 setenv() \u4e0d\u6539\u53d8\u73af\u5883\uff0c\u82e5 overwrite \u503c\u4e3a 0\uff0c\u5219 setenv() \u5c06\u6539\u53d8\u73af\u5883\u4e2d\u7684\u503c\u3002 unsetenv() \u4ece\u73af\u5883\u4e2d\u79fb\u9664 name \u6807\u8bc6\u7684\u53d8\u91cf #include <stdlib.h> int unsetenv ( const char * name ) \u6709\u65f6\u9700\u8981\u5b8c\u5168\u6e05\u9664\u6574\u4e2a\u73af\u5883\uff0c\u53ef\u4ee5\u5c06 environ \u8d4b\u503c\u4e3a NULL \u6765\u6e05\u9664\u73af\u5883\u3002\u53ef\u4f7f\u7528 clearenv() \u5b8c\u6210\u64cd\u4f5c #define _BSD_SOURCE /* Or #define _SVID_SOURCE */ #include <stdlib.h> int clearenv ( void ) \u8c03\u7528 setenv() \u548c clearenv() \u786e\u5b9e\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u9732\u3002 setenv() \u4f1a\u5206\u914d\u4e00\u6bb5\u7f13\u51b2\u533a\uff0c\u5176\u4f1a\u79f0\u4e3a\u73af\u5883\u7684\u4e00\u90e8\u5206\u3002\u800c clearenv() \u6ca1\u6709\u91ca\u653e\u8be5\u7f13\u51b2\u533a\uff0c\u82e5\u4e0d\u505c\u8c03\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\u786e\u5b9e\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u3002 SUSv3 \u6807\u51c6\u5b9e\u9645\u5b9a\u4e49\uff0c\u82e5\u7a0b\u5e8f\u76f4\u63a5\u4fee\u6539 environ \u53d8\u91cf\uff0c\u5219\u4e0d\u5bf9 setenv() \uff0c unsetenv() \u548c getenv() \u4f5c\u51fa\u5b9a\u4e49\uff0c clearenv() \u7684\u65b9\u5f0f\u5b9e\u9645\u662f\u4e0d\u88ab\u6807\u51c6\u5141\u8bb8\u7684\uff0c\u6807\u51c6\u89c4\u5b9a\u7684\u6e05\u7a7a\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f\u662f\u901a\u8fc7 environ \u53d8\u91cf\u83b7\u53d6\u6240\u6709\u73af\u5883\u53d8\u91cf\u7684\u540d\u79f0\uff0c\u7136\u540e\u9010\u4e00\u4f7f\u7528 unsetenv() \u79fb\u9664\u73af\u5883\u53d8\u91cf\u3002","title":"\u73af\u5883\u5217\u8868"},{"location":"chap6/#_9","text":"C \u548c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\u6709 goto \u5173\u952e\u5b57\uff0c\u4f46\u4e00\u76f4\u4e0d\u88ab\u9f13\u52b1\u4f7f\u7528\u3002\u4f46\u5728\u7279\u5b9a\u7684\u573a\u5408\u4e0b goto \u4e5f\u786e\u5b9e\u6709\u4ed6\u7684\u7528\u6b66\u4e4b\u5730\u3002 C \u7684 goto \u4e0d\u80fd\u4ece\u4e00\u4e2a\u51fd\u6570\u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u7531\u4e8e C \u4e2d\u6240\u6709\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5c42\u7ea7\u76f8\u540c\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u5224\u65ad\u5728\u8c03\u7528\u51fd\u6570 A \u65f6\u51fd\u6570 B \u7684\u6808\u5e27\u662f\u5426\u5728\u6808\u4e0a\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5224\u65ad\u4ece A \u51fd\u6570\u8df3\u8f6c\u5230 B \u51fd\u6570\u662f\u5426\u53ef\u884c\u3002 \u4f46\u5076\u5c14\u8fd8\u662f\u6709\u8fd9\u79cd\u9700\u6c42\u7684\u3002\u4f8b\u5982\u5728\u4e00\u4e2a\u6df1\u5ea6\u5d4c\u5957\u8c03\u7528\u7684\u51fd\u6570\u4e2d\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u6b64\u65f6\u9700\u8981\u653e\u5f03\u4efb\u52a1\uff0c\u4ece\u591a\u5c42\u51fd\u6570\u8c03\u7528\u4e2d\u8fd4\u56de\u3002\u6b64\u65f6\u786e\u5b9e\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u51fd\u6570\u90fd\u8fd4\u56de\u72b6\u6001\u503c\uff0c\u8ba9\u51fd\u6570\u7684\u8c03\u7528\u8005\u505a\u68c0\u67e5\u5e76\u5904\u7406\uff0c\u8fd9\u662f\u6709\u6548\u7684\u4e14\u4e5f\u662f\u6700\u597d\u7684\u65b9\u6cd5\u3002\u4f46\u6709\u7684\u65f6\u5019\u76f4\u63a5\u4ece\u5d4c\u5957\u51fd\u6570\u8df3\u51fa\u4f1a\u4f7f\u7f16\u7a0b\u66f4\u7b80\u5355\u3002 \u6b64\u65f6\uff0c setjmp() \u548c longjmp() \u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002 #include <setjmp.h> int setjmp ( jmp_buf env ) void longjmp ( jmp_buf env , int vol ) setjmp() \u4e3a\u540e\u7eed longjmp() \u8c03\u7528\u786e\u7acb\u4e86\u8df3\u8f6c\u7684\u76ee\u6807\uff0c\u5373\u53d1\u8d77 setjmp() \u8c03\u7528\u7684\u4f4d\u7f6e\u3002\u4ece\u7f16\u7801\u89d2\u5ea6\u6765\u8bf4\uff0c\u8c03\u7528 longjmp() \u4e4b\u540e\u5c31\u548c\u7b2c\u4e8c\u6b21\u8c03\u7528 setjmp() \u4e00\u6837\u3002\u901a\u8fc7\u67e5\u770b setjmp() \u7684\u8fd4\u56de\u503c\u5373\u53ef\u533a\u5206 setjmp \u7684\u8c03\u7528\u662f\u521d\u59cb\u8fd4\u56de\uff08\u5373\u8bbe\u7acb\u8df3\u8f6c\u76ee\u6807\u7684\u7b2c\u4e00\u6b21\u8c03\u7528\uff09\u8fd8\u662f\u7b2c\u4e8c\u6b21\u8fd4\u56de\uff08\u5373\u901a\u8fc7 longjmp() \u8df3\u8f6c\u540e\u56de\u5230 setjmp() \u7684\u4f4d\u7f6e)\u3002\u521d\u59cb\u8fd4\u56de\u503c\u4e3a 0\uff0c\u540e\u7eed\u7684\u8fd4\u56de\u503c\u4e3a longjmp() \u8c03\u7528\u4e2d val \u53c2\u6570\u6307\u5b9a\u7684\u4efb\u610f\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\u6765\u5224\u65ad\u51fa\u7a0b\u5e8f\u8df3\u81f3\u540c\u4e00\u76ee\u6807\u7684\u4e0d\u540c\u8d77\u8df3\u4f4d\u7f6e\u3002\u7279\u6b8a\u7684\uff0c\u82e5 val \u53c2\u6570\u8bbe\u4e3a 0\uff0c\u5219 longjmp() \u4f1a\u5c06\u5176\u66ff\u6362\u4e3a 1 \u4ee5\u4fbf\u4e0e\u521d\u6b21\u8fd4\u56de\u533a\u5206\u5f00\u3002 setjmp() \u51fd\u6570\u5c06\u5f53\u524d\u8fdb\u7a0b\u73af\u5883\u7684\u5404\u79cd\u4fe1\u606f\u4fdd\u5b58\u5230 env \u4e2d\uff0c\u8c03\u7528 lomgjmp() \u65f6\u9700\u6307\u5b9a\u76f8\u540c\u7684 env \u53d8\u91cf\u3002\u81ea\u7136\uff0c\u7531\u4e8e\u8c03\u7528\u5904\u4e8e\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u56e0\u6b64 env \u5e94\u8bbe\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u6216\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u3002 SUSv3 \u548c C99 \u89c4\u5b9a\u4e86 setjmp() \u7684\u4f7f\u7528\u8bed\u5883 \u6784\u6210\u9009\u62e9\u6216\u8fed\u4ee3\u8bed\u53e5\u4e2d (if, switch, while \u7b49)\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f \u4f5c\u4e3a\u4e00\u5143\u64cd\u4f5c\u7b26 ! \u7684\u64cd\u4f5c\u5bf9\u8c61\uff0c\u5176\u6700\u7ec8\u7684\u8868\u8fbe\u5f0f\u6784\u6210\u4e86\u9009\u62e9\u6216\u8fed\u4ee3\u63a7\u5236\u8bed\u53e5\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f \u4f5c\u4e3a\u6bd4\u8f83\u64cd\u4f5c\u7684\u4e00\u90e8\u5206\uff0c\u53e6\u4e00\u4e2a\u5bf9\u8c61\u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u6570\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u4e14\u6700\u7ec8\u7684\u8868\u8fbe\u5f0f\u6784\u6210\u9009\u62e9\u6216\u8fed\u4ee3\u8bed\u53e5\u7684\u6574\u4e2a\u63a7\u5236\u8868\u8fbe\u5f0f \u4f5c\u4e3a\u72ec\u7acb\u7684\u51fd\u6570\u8c03\u7528\uff0c\u4e14\u672a\u5d4c\u5165\u5230\u66f4\u5927\u7684\u8868\u8fbe\u5f0f\u4e2d\u3002 \u6ce8\u610f\uff0c\u8d4b\u503c\u8bed\u53e5\u4e0d\u5728\u4e0a\u8ff0\u4e4b\u5217\uff0c\u5373\u5f62\u5982 s = setjmp(env); \u662f\u4e0d\u7b26\u5408\u6807\u51c6\u7684\u3002 \u7531\u4e8e setjmp() \u4f5c\u4e3a\u4e00\u4e2a\u5e38\u89c4\u7684\u51fd\u6570\u5b9e\u73b0\u65e0\u6cd5\u4fdd\u8bc1\u62e5\u6709\u8db3\u591f\u7684\u4fe1\u606f\u6765\u4fdd\u5b58\u6240\u6709\u7684\u5bc4\u5b58\u5668\u503c\u548c\u5c01\u95ed\u8868\u8fbe\u5f0f\u4e2d\u7528\u5230\u7684\u4e34\u65f6\u6808\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u4e8e\u5728 longjmp() \u8c03\u7528\u540e\u6b64\u7c7b\u4fe1\u606f\u80fd\u6b63\u5e38\u6062\u590d\uff0c\u56e0\u6b64\u53ea\u80fd\u5728\u8db3\u591f\u7b80\u5355\u4e14\u65e0\u9700\u4e34\u65f6\u5b58\u50a8\u7684\u8868\u8fbe\u5f0f\u4e2d\u8c03\u7528 setjmp() longjmp() \u51fd\u6570\u4e0d\u80fd\u8df3\u8f6c\u5230\u4e00\u4e2a\u5df2\u7ecf\u8fd4\u56de\u7684\u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u51fd\u6570\u6240\u4f7f\u7528\u7684\u6808\u5df2\u7ecf\u88ab\u56de\u6536\u5373\u4e0d\u518d\u5b58\u5728\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5c06\u8df3\u8f6c\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6808\u4f4d\u7f6e\u3002\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5d29\u6e83\uff0c\u4e5f\u53ef\u80fd\u5f15\u8d77\u8c03\u7528\u4e0e\u8fd4\u56de\u95f4\u7684\u6b7b\u5faa\u73af\uff0c\u7a0b\u5e8f\u5c31\u50cf\u771f\u7684\u4ece\u4e00\u4e2a\u672a\u6267\u884c\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4e86\u3002 \u5728 SUSv3 \u4e2d\u89c4\u5b9a\u5982\u679c\u4ece\u5d4c\u5957\u7684\u4fe1\u53f7\u5904\u7406\u5668\u4e2d\u8c03\u7528 longjmp() \u5219\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 \u7531\u4e8e setjmp() \u548c longjmp() \u7684\u8df3\u8f6c\u64cd\u4f5c\u5728\u8fd0\u884c\u65f6\u624d\u80fd\u6b63\u786e\u786e\u7acb\u548c\u8fd0\u884c\uff0c\u7f16\u8bd1\u5668\u4f18\u5316\u65f6\u65e0\u6cd5\u8003\u8651\uff0c\u67d0\u4e9b ABI \u63a5\u53e3\u53c8\u8981\u6c42 longjmp() \u6062\u590d\u5148\u524d setjmp() \u8c03\u7528\u6240\u4fdd\u5b58\u7684 CPU \u5bc4\u5b58\u5668\u526f\u672c\uff0c\u6b64\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u88ab\u4f18\u5316\u7684\u53d8\u91cf\u88ab\u8d4b\u4e88\u9519\u8bef\u7684\u503c\u3002\u6b64\u65f6\u5e94\u5c06\u8c03\u7528 setjmp() \u4e2d\u6d89\u53ca\u7684\u53d8\u91cf\u4f7f\u7528 volatile \u5173\u952e\u5b57\u58f0\u660e\uff0c\u8ba9\u7f16\u8bd1\u5668\u4e0d\u5bf9\u6b64\u53d8\u91cf\u8fdb\u884c\u4f18\u5316\u3002 \u5728 gcc \u4e2d\uff0c\u52a0\u5165 -Wextra \u53ef\u8f93\u51fa\u6709\u7528\u7684\u8b66\u544a\u3002 \u663e\u7136\uff0c\u4e0e goto \u7684\u539f\u56e0\u7c7b\u4f3c\uff0c\u5728\u5b9e\u9645\u7f16\u7a0b\u4e2d\u5e94\u907f\u514d\u4f7f\u7528\u975e\u5c40\u90e8\u8df3\u8f6c\u3002","title":"\u975e\u5c40\u90e8\u8df3\u8f6c"},{"location":"chap6/#_10","text":"","title":"\u7ec3\u4e60"},{"location":"chap6/#6-1","text":"code: tlpi-dist/proc/mem_segments.c \u663e\u7136\uff0c\u8be5 static char mbuf[10240000]; \u7684\u58f0\u660e\u7531\u4e8e\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u5176\u88ab\u653e\u5165\u4e86\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff0c\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u4e0d\u4f1a\u4fdd\u5b58\u5b9e\u9645\u7684\u6570\u636e\uff0c\u4ec5\u5728\u8fd0\u884c\u65f6\u5c06\u5176\u653e\u5165\u5bf9\u5e94\u7684\u5185\u5b58\u4f4d\u7f6e\u5e76\u521d\u59cb\u5316\u3002","title":"6-1"},{"location":"chap6/#6-2","text":"code: c6/bad_longjmp.c \u7ed3\u679c\u662f\u7531\u4e8e\u8bbf\u95ee\u4e86\u4e0d\u5b58\u5728\u7684\u6808\u7a7a\u95f4\uff0c\u8fd4\u56de\u4e86\u6bb5\u9519\u8bef\u3002","title":"6-2"},{"location":"chap6/#6-3","text":"code: c6/setenv_unsetenv.c \u540c\u6837\u7684\uff0c\u6211\u6ca1\u5199\u6d4b\u8bd5\uff0c main() \u51fd\u6570\u53ea\u4e3a\u4e86\u901a\u8fc7\u7f16\u8bd1\u3002 \u8fd9\u91cc\u9762\u9700\u8981\u505a\u7684\u5224\u65ad\u6761\u4ef6\u8f83\u591a\u3002 \u6bd4\u8f83\u9ebb\u70e6\u7684\u662f unsetenv() \u5728\u627e\u5230\u73af\u5883\u53d8\u91cf\u540e\u9700\u8981\u628a\u6574\u4e2a\u6570\u7ec4\u7ed3\u6784\u5de6\u79fb\u6765\u5220\u9664\u5143\u7d20\u3002\u6211\u731c\u6d4b environ \u5b9e\u9645\u7684\u5b9e\u73b0\u5e94\u8be5\u4e5f\u7c7b\u4f3c\u4e00\u4e2a\u94fe\u8868\u7684\u7ed3\u6784\uff0c\u4f46 putenv() \u7ed9\u6211\u4eec\u62bd\u8c61\u6389\u4e86\u3002 setenv() \u5b9e\u73b0\u65f6\u5927\u53ef\u4ee5\u4f7f\u7528\u4e4b\u524d\u5b9e\u73b0\u7684 unsetenv()","title":"6-3"},{"location":"chap7/","text":"Cheaper 7 \u5185\u5b58\u5206\u914d \u00b6 \u8bcd\u6c47\u901f\u67e5 \u00b6 \u7b14\u8bb0 \u00b6 \u5806\u662f\u4e00\u6bb5\u957f\u5ea6\u53ef\u53d8\u7684\u865a\u62df\u5185\u5b58\u3002 \u5728 program break \u7684\u4f4d\u7f6e\u62ac\u5347\u540e\uff0c\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u8bbf\u95ee\u65b0\u5206\u914d\u7684\u533a\u57df\u5185\u7684\u4efb\u4f55\u5185\u5b58\u3002\u6b64\u65f6\u7269\u7406\u5185\u5b58\u9875\u4f1a\u5728\u7a0b\u5e8f\u9996\u6b21\u8bd5\u56fe\u8bbf\u95ee\u65b0\u5206\u914d\u7684\u5185\u5b58\u65f6\u53c8\u5185\u6838\u5206\u914d\u65b0\u7684\u7269\u7406\u5185\u5b58\u9875\u3002 UNIX \u4e2d\u4f7f\u7528 brk() \u548c sbrk() \u7cfb\u7edf\u8c03\u7528\u6765\u64cd\u4f5c program break\u3002 #include <unistd.h> int brk ( void * end_data_segment ); void * sbrk ( intptr_t increment ); syscall brk() \u4f1a\u5c06 program break \u8bbe\u5b9a\u5230 end_data_segment \u6307\u5b9a\u7684\u4f4d\u7f6e\u3002\u4e14\u5b9e\u9645\u4f1a\u56db\u820d\u4e94\u5165\u5230\u4e0b\u4e00\u4e2a\u5185\u5b58\u9875\u7684\u8fb9\u754c\u3002 \u82e5\u5c06 program break \u8bbe\u5b9a\u4e3a\u4f4e\u4e8e\u521d\u59cb\u503c\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u9884\u77e5\u7684\u884c\u4e3a\u3002 sbrk() \u5c06 program break \u5728\u539f\u6709\u5730\u5740\u57fa\u7840\u4e0a\u589e\u52a0 increment \u53c2\u6570\u4e2a\u5927\u5c0f\u3002 intptr_t \u662f\u4e00\u4e2a\u6574\u6570\u6570\u636e\u7c7b\u578b\uff0c\u82e5\u8c03\u7528\u6210\u529f\u5219\u8fd4\u56de\u524d\u4e00\u4e2a program break \u7684\u5730\u5740\uff0c\u5373\u82e5 program break \u589e\u52a0\uff0c\u8fd4\u56de\u503c\u662f\u6307\u5411\u65b0\u5206\u914d\u5185\u5b58\u8d77\u59cb\u4f4d\u7f6e\u7684\u6307\u9488\u3002 sbrk(0) \u8c03\u7528\u5c06\u8fd4\u56de program break \u7684\u5f53\u524d\u4f4d\u7f6e\u3002 \u901a\u5e38\u6211\u4eec\u4f7f\u7528 malloc() \u51fd\u6570\u5305\u6765\u5728\u5806\u4e0a\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\uff0c\u6bd4\u8d77 syscall \u6709\u5f88\u591a\u4f18\u52bf\u3002 #include <stdlib.h> void * malloc ( size_t stze ); malloc() \u5206\u914d size \u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4e14\u5206\u914d\u7684\u5185\u5b58\u533a\u57df\u672a\u521d\u59cb\u5316\u3002\u8fd4\u56de\u6307\u5411\u65b0\u5206\u914d\u5185\u5b58\u8d77\u59cb\u4f4d\u7f6e\u7684\u6307\u9488\u3002\u82e5\u5206\u914d\u5931\u8d25\u5219\u8fd4\u56de NULL \u3002 \u7531\u4e8e\u8fd4\u56de\u503c\u4e3a void* \u6240\u4ee5\u53ef\u4ee5\u5c06\u8fd4\u56de\u7684\u6307\u9488\u8f6c\u6362\u8d4b\u7ed9\u4efb\u4f55\u7c7b\u578b\u7684\u6307\u9488\u3002\u8fd4\u56de\u7684\u5185\u5b58\u5757\u662f\u5b57\u8282\u5bf9\u9f50\u7684\u3002 \u8c03\u7528 malloc(0) \u8981\u4e48\u8fd4\u56de NULL \u8981\u4e48\u8fd4\u56de\u4e00\u5c0f\u5757\u53ef\u4ee5\u7528 free() \u91ca\u653e\u7684\u5185\u5b58\uff0cLinux \u9075\u5faa\u540e\u8005\u3002 #include <stdlib.h> void free ( void * ptr ) free() \u91ca\u653e ptr \u6307\u5411\u7684\u5185\u5b58\u5757\uff0c\u8be5\u53c2\u6570\u5e94\u662f\u7531 malloc() \u5206\u914d\u7684\uff0c\u6216\u5176\u4ed6\u95f4\u63a5\u4f7f\u7528\u5176\u5728\u5806\u4e0a\u5206\u914d\u7684\u5185\u5b58\u7684\u5730\u5740\u7684\u6307\u9488\u3002 \u4e00\u822c\uff0c free() \u5e76\u4e0d\u4f1a\u964d\u4f4e program break \u7684\u4f4d\u7f6e\uff0c\u800c\u662f\u5c06\u5185\u5b58\u6dfb\u52a0\u5230\u7a7a\u95f2\u5185\u5b58\u5217\u8868\u4e2d\uff0c\u53ef\u4f9b\u540e\u7eed\u7684 malloc() \u4f7f\u7528\u3002\u4f18\u52bf\u5728\u4e8e \u88ab\u91ca\u653e\u7684\u5185\u5b58\u5757\u53ef\u80fd\u4f4d\u4e8e\u5806\u7684\u4e2d\u95f4\uff0c\u800c\u975e\u9876\u90e8\uff0c\u6b64\u65f6\u4e0d\u80fd\u964d\u4f4e program break \u51cf\u5c11\u4e86 syscall \u6b21\u6570 \u591a\u6570\u65f6\u5019\u7acb\u5373\u964d\u4f4e program break \u5e76\u4e0d\u4f1a\u5e26\u6765\u5f88\u591a\u6536\u76ca free() \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u51fd\u6570\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u5bf9\u6307\u5411\u5df2\u7ecf\u91ca\u653e\u7684\u5185\u5b58\u7684\u6307\u9488\u518d\u6b21\u8c03\u7528\uff0c\u5982\u518d\u6b21\u4f20\u9012\u7ed9 free() \u53ef\u80fd\u4ea7\u751f\u4e0d\u53ef\u9884\u77e5\u7684\u540e\u679c\u3002 \u5f53\u8fdb\u7a0b\u7ec8\u6b62\u65f6\uff0c\u4f7f\u7528\u7684\u6240\u6709\u5185\u5b58\u90fd\u4f1a\u88ab\u56de\u6536\uff0c\u5305\u62ec\u5728\u5806\u4e2d\u4f7f\u7528 malloc() \u5206\u914d\u7684\u5185\u5b58\u3002\u5bf9\u4e8e\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5c31\u5206\u914d\u5e76\u4e14\u5728\u7a0b\u5e8f\u7ed3\u675f\u540e\u624d\u91ca\u653e\u7684\u7a0b\u5e8f\u6765\u8bf4\u53ef\u4ee5\u7701\u7565 free() \u3002\u4f46\u6700\u597d\u8fd8\u662f\u663e\u5f0f\u6307\u5b9a\u91ca\u653e\u5185\u5b58\u3002\u5c24\u5176\u5bf9\u4e8e malloc() \u8c03\u8bd5\u5e93\u800c\u8a00\u53ef\u80fd\u5c06\u672a\u663e\u5f0f\u91ca\u653e\u7684\u5185\u5b58\u8ba4\u4e3a\u662f\u5185\u5b58\u6cc4\u6f0f\u3002 malloc() \u548c free() \u7684\u5b9e\u73b0\u539f\u7406 \u00b6 malloc() \u4f1a\u5148\u626b\u63cf\u7531 free() \u91ca\u653e\u7684\u7a7a\u95f2\u5185\u5b58\u5757\u5217\u8868\uff0c\u82e5\u627e\u5230\u5c3a\u5bf8\u5927\u4e8e\u6216\u7b49\u4e8e\u8981\u6c42\u7684\u4e00\u5757\u7a7a\u95f2\u7684\u5185\u5b58\uff0c\u82e5\u5b8c\u5168\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u82e5\u8f83\u5927\uff0c\u5219\u4f1a\u5148\u5bf9\u5185\u5b58\u8fdb\u884c\u5206\u5272\uff0c\u5c06\u5927\u5c0f\u76f8\u5f53\u7684\u5185\u5b58\u8fd4\u56de\uff0c\u5269\u4f59\u7684\u90e8\u5206\u4fdd\u7559\u3002 \u82e5\u627e\u4e0d\u5230\u8db3\u591f\u5927\u7684\u5185\u5b58\uff0c\u5219 malloc() \u8c03\u7528 sbrk() \u5206\u914d\u4e00\u6bb5\u5185\u5b58\uff0c\u4e3a\u4e86\u51cf\u5c11 syscall \u8c03\u7528\uff0c malloc() \u4f1a\u4e00\u6b21\u6027\u5206\u914d\u66f4\u591a\u5185\u5b58\u3002 \u5728 malloc() \u5206\u914d\u5185\u5b58\u65f6\u4f1a\u989d\u5916\u5206\u914d\u51e0\u4e2a\u5b57\u8282\u7528\u6765\u5b58\u653e\u8fd9\u6bb5\u5185\u5b58\u5927\u5c0f\u7684\u6574\u6570\u503c\uff0c\u8be5\u533a\u57df\u4f4d\u4e8e\u5206\u914d\u7684\u5730\u5740\u5934\u90e8\uff0c\u5b9e\u9645\u8fd4\u56de\u7684\u6307\u9488\u5219\u6307\u5411\u8fd9\u4e2a\u5b57\u8282\u4e4b\u540e\u3002 \u7a7a\u95f2\u5185\u5b58\u5217\u8868\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5f53\u5185\u5b58\u5757\u5904\u5728\u7a7a\u95f2\u5185\u5b58\u5217\u8868\u65f6\uff0c free() \u4f7f\u7528\u5185\u5b58\u5757\u672c\u8eab\u7684\u7a7a\u95f4\u6765\u5b58\u653e\u94fe\u8868\u6307\u9488\uff0c\u5c06\u81ea\u8eab\u6dfb\u52a0\u5230\u94fe\u8868\u4e2d\u3002 \u5f53\u5185\u5b58\u4e0d\u65ad\u7684\u91ca\u653e\u548c\u91cd\u65b0\u5206\u914d\uff0c\u7a7a\u95f2\u5217\u8868\u4e2d\u7684\u7a7a\u95f2\u5185\u5b58\u548c\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u4f1a\u6df7\u5408\u5728\u4e00\u8d77\u3002\u7531\u4e8e C \u53ef\u4ee5\u4f7f\u6307\u9488\u6307\u5411\u4efb\u610f\u4f4d\u7f6e\uff0c\u82e5\u7a0b\u5e8f\u65e0\u610f\u95f4\u4fee\u6539\u6216\u8986\u76d6\u4e86\u5185\u5b58\u5206\u914d\u7684\u957f\u5ea6\u503c\uff0c\u5219 free() \u4e5f\u4f1a\u5728\u5185\u5b58\u5217\u8868\u4e2d\u6309\u7167\u9519\u8bef\u7684\u65b9\u5f0f\u8bb0\u5f55\uff0c\u8fd9\u9020\u6210\u4e86\u6392\u67e5\u56f0\u96be\u7684\u9519\u8bef\u3002 \u4f7f\u7528 calloc() \u548c realloc() \u00b6 #include <stdlib.h> void * calloc ( size_t numitems , size_t size ) calloc() \u7528\u4e8e\u7ed9\u4e00\u7ec4\u76f8\u540c\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u3002\u53c2\u6570 numitems \u6307\u5b9a\u5206\u914d\u6570\u91cf\uff0c size \u6307\u5b9a\u5bf9\u8c61\u5927\u5c0f\u3002\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u82e5\u51fa\u9519\u5219\u8fd4\u56de NULL \u3002 calloc() \u4f1a\u5c06\u5206\u914d\u7684\u5185\u5b58\u521d\u59cb\u5316\u4e3a 0\u3002 #include <stdlib.h> void * realloc ( void * ptr , size_t size ) realloc() \u7528\u6765\u8c03\u6574\u4e00\u5757\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u6b64\u5185\u5b58\u5e94\u662f\u7531 malloc() \u51fd\u6570\u5305\u5206\u914d\u7684\u3002 ptr \u4e3a\u6307\u5411\u9700\u8981\u8c03\u6574\u5927\u5c0f\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\uff0c size \u4e3a\u8981\u8c03\u6574\u5230\u7684\u5927\u5c0f\u503c\u3002 \u82e5\u6210\u529f\uff0c\u5219\u8fd4\u56de\u6307\u5411\u5927\u5c0f\u8c03\u6574\u540e\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\uff0c\u8be5\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u4e0e\u4e4b\u524d\u7684\u4e0d\u540c\u3002\u82e5\u53d1\u751f\u9519\u8bef\u5219\u8fd4\u56de NULL \uff0c\u6b64\u65f6\u5bf9 ptr \u6307\u5411\u7684\u5185\u5b58\u5757\u539f\u5c01\u4e0d\u52a8\u3002\u82e5\u589e\u52a0\u4e86\u5185\u5b58\uff0c\u5bf9\u589e\u52a0\u7684\u90e8\u5206\u4e0d\u4f1a\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5c3d\u53ef\u80fd\u4e0d\u4f7f\u7528 realloc() \u8c03\u6574\u5185\u5b58\uff0c\u7531\u4e8e\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u65e0\u6cd5\u5c31\u539f\u6709\u7684\u5185\u5b58\u5757\u6269\u5c55\uff0c\u6b64\u65f6\u9700\u8981\u5206\u914d\u65b0\u7684\u5185\u5b58\u5757\u5e76\u5c06\u539f\u6570\u636e\u590d\u5236\u5230\u65b0\u5185\u5b58\uff0c\u8fd9\u79cd\u884c\u4e3a\u4f1a\u5e26\u6765\u5927\u91cf CPU \u635f\u8017\u3002 \u4e14\u5bf9\u540e\u7eed\u5185\u5b58\u7684\u5f15\u7528\u5e94\u4f7f\u7528 realloc() \u7684\u8fd4\u56de\u5185\u5b58\u3002\u5e76\u7531\u4e8e realloc() \u53ef\u80fd\u5931\u8d25\uff0c\u4e14\u5931\u8d25\u65f6\u4f1a\u8fd4\u56de NULL \uff0c\u5728\u8c03\u7528 realloc() \u65f6\u4e0d\u5e94\u76f4\u63a5\u5c06\u539f\u6307\u9488\u8d4b\u4e88\u65b0\u7684\u503c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f53 realloc() \u6267\u884c\u5931\u8d25\u65f6\u65e0\u6cd5\u518d\u8bbf\u95ee\u539f\u6709\u7684\u5185\u5b58\u5757\u3002\u5e94\u4f7f\u7528\u5982\u4e0b\u7684 code snippets nptr = realloc ( ptr , newsize ); if ( nptr == NULL ) { /* Handle Error */ ; } else { /* realloc() succeeded */ ptr = nptr ; } \u5728\u6808\u4e0a\u5206\u914d\u5185\u5b58 \u00b6 #include <alloca.h> void * alloca ( size_t size ); \u53ef\u4ee5\u4f7f\u7528 alloca() \u5728\u6808\u4e0a\u52a8\u6001\u5206\u914d\u5185\u5b58\u3002 size \u6307\u5b9a\u5206\u914d\u7684\u5b57\u8282\u6570\u3002\u5e76\u8fd4\u56de\u6307\u5411\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\u3002 \u4e0d\u9700\u4e5f\u7edd\u4e0d\u80fd\u8c03\u7528 free() \u91ca\u653e alloca() \u5206\u914d\u7684\u5185\u5b58\u3002\u4e5f\u4e0d\u53ef\u80fd\u8c03\u7528 realloc() \u4fee\u6539 alloca() \u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u3002 \u82e5 alloca() \u8c03\u7528\u540e\u53d1\u751f\u5806\u6808\u6ea2\u51fa\uff0c\u5219\u7a0b\u5e8f\u884c\u4e3a\u4e0d\u53ef\u9884\u77e5\uff0c\u6b64\u65f6\u4e00\u822c\u7a0b\u5e8f\u4f1a\u6536\u5230 SIGSEGV \u4fe1\u53f7\u3002 \u4e0d\u80fd\u5728\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u91cc\u8c03\u7528 alloca() \uff0c\u800c\u5e94\u5728\u8c03\u7528\u51fd\u6570\u524d\u5206\u914d\u5185\u5b58\u5e76\u4f20\u9012\u6307\u9488\u3002\u5426\u5219\u5206\u914d\u7684\u5806\u6808\u7a7a\u95f4\u4f1a\u51fa\u73b0\u5728\u51fd\u6570\u53c2\u6570\u7684\u7a7a\u95f4\u5185\u3002 func ( x , alloca ( size ), z ); /* Wrong! */ /* Right */ void * y ; y = alloca ( size ); func ( x , y , z ); \u5728\u6808\u4e0a\u5206\u914d\u5185\u5b58\u6bd4\u8d77\u5728\u5806\u4e0a\u7684\u5185\u5b58\u6709\u4e00\u5b9a\u4f18\u52bf \u901f\u5ea6\u5feb\u4e8e malloc() \u51fd\u6570\u5305\uff0c\u4e14\u4e0d\u9700\u8981\u7ef4\u62a4\u7a7a\u95f2\u5185\u5b58\u5757\u5217\u8868 \u5185\u5b58\u4f1a\u968f\u6808\u5e27\u7684\u79fb\u9664\u800c\u81ea\u52a8\u91ca\u653e \u7ec3\u4e60 \u00b6 7-1 \u00b6 code: c7/free_and_sbrk.c ./free_and_sbrk 10 102400 Initial program break: 0x55e470df6000 Allocating 10 *102400 bytes Times 0 : Program break is now: 0x55e470df6000 Times 1 : Program break is now: 0x55e470e28000 Times 2 : Program break is now: 0x55e470e28000 Times 3 : Program break is now: 0x55e470e5a000 Times 4 : Program break is now: 0x55e470e5a000 Times 5 : Program break is now: 0x55e470e8c000 Times 6 : Program break is now: 0x55e470e8c000 Times 7 : Program break is now: 0x55e470ebe000 Times 8 : Program break is now: 0x55e470ebe000 Times 9 : Program break is now: 0x55e470ef0000 Program break is now: 0x55e470ef0000 Freeing blocks from 1 to 10 in steps of 1 After free () , program break is: 0x55e470df6000 7-2 \u00b6 \u8fd9\u4e2a\u5c31\u9976\u4e86\u6211\u5427\uff0cCS\uff1aAPP \u7684\u65f6\u5019\u4f1a\u505a\u7684\uff0c\u4e00\u5b9a\u4f1a\u505a\u7684\u3002","title":"\u7b2c\u4e03\u7ae0-\u5185\u5b58\u5206\u914d"},{"location":"chap7/#cheaper-7","text":"","title":"Cheaper 7 \u5185\u5b58\u5206\u914d"},{"location":"chap7/#_1","text":"","title":"\u8bcd\u6c47\u901f\u67e5"},{"location":"chap7/#_2","text":"\u5806\u662f\u4e00\u6bb5\u957f\u5ea6\u53ef\u53d8\u7684\u865a\u62df\u5185\u5b58\u3002 \u5728 program break \u7684\u4f4d\u7f6e\u62ac\u5347\u540e\uff0c\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u8bbf\u95ee\u65b0\u5206\u914d\u7684\u533a\u57df\u5185\u7684\u4efb\u4f55\u5185\u5b58\u3002\u6b64\u65f6\u7269\u7406\u5185\u5b58\u9875\u4f1a\u5728\u7a0b\u5e8f\u9996\u6b21\u8bd5\u56fe\u8bbf\u95ee\u65b0\u5206\u914d\u7684\u5185\u5b58\u65f6\u53c8\u5185\u6838\u5206\u914d\u65b0\u7684\u7269\u7406\u5185\u5b58\u9875\u3002 UNIX \u4e2d\u4f7f\u7528 brk() \u548c sbrk() \u7cfb\u7edf\u8c03\u7528\u6765\u64cd\u4f5c program break\u3002 #include <unistd.h> int brk ( void * end_data_segment ); void * sbrk ( intptr_t increment ); syscall brk() \u4f1a\u5c06 program break \u8bbe\u5b9a\u5230 end_data_segment \u6307\u5b9a\u7684\u4f4d\u7f6e\u3002\u4e14\u5b9e\u9645\u4f1a\u56db\u820d\u4e94\u5165\u5230\u4e0b\u4e00\u4e2a\u5185\u5b58\u9875\u7684\u8fb9\u754c\u3002 \u82e5\u5c06 program break \u8bbe\u5b9a\u4e3a\u4f4e\u4e8e\u521d\u59cb\u503c\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u9884\u77e5\u7684\u884c\u4e3a\u3002 sbrk() \u5c06 program break \u5728\u539f\u6709\u5730\u5740\u57fa\u7840\u4e0a\u589e\u52a0 increment \u53c2\u6570\u4e2a\u5927\u5c0f\u3002 intptr_t \u662f\u4e00\u4e2a\u6574\u6570\u6570\u636e\u7c7b\u578b\uff0c\u82e5\u8c03\u7528\u6210\u529f\u5219\u8fd4\u56de\u524d\u4e00\u4e2a program break \u7684\u5730\u5740\uff0c\u5373\u82e5 program break \u589e\u52a0\uff0c\u8fd4\u56de\u503c\u662f\u6307\u5411\u65b0\u5206\u914d\u5185\u5b58\u8d77\u59cb\u4f4d\u7f6e\u7684\u6307\u9488\u3002 sbrk(0) \u8c03\u7528\u5c06\u8fd4\u56de program break \u7684\u5f53\u524d\u4f4d\u7f6e\u3002 \u901a\u5e38\u6211\u4eec\u4f7f\u7528 malloc() \u51fd\u6570\u5305\u6765\u5728\u5806\u4e0a\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\uff0c\u6bd4\u8d77 syscall \u6709\u5f88\u591a\u4f18\u52bf\u3002 #include <stdlib.h> void * malloc ( size_t stze ); malloc() \u5206\u914d size \u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4e14\u5206\u914d\u7684\u5185\u5b58\u533a\u57df\u672a\u521d\u59cb\u5316\u3002\u8fd4\u56de\u6307\u5411\u65b0\u5206\u914d\u5185\u5b58\u8d77\u59cb\u4f4d\u7f6e\u7684\u6307\u9488\u3002\u82e5\u5206\u914d\u5931\u8d25\u5219\u8fd4\u56de NULL \u3002 \u7531\u4e8e\u8fd4\u56de\u503c\u4e3a void* \u6240\u4ee5\u53ef\u4ee5\u5c06\u8fd4\u56de\u7684\u6307\u9488\u8f6c\u6362\u8d4b\u7ed9\u4efb\u4f55\u7c7b\u578b\u7684\u6307\u9488\u3002\u8fd4\u56de\u7684\u5185\u5b58\u5757\u662f\u5b57\u8282\u5bf9\u9f50\u7684\u3002 \u8c03\u7528 malloc(0) \u8981\u4e48\u8fd4\u56de NULL \u8981\u4e48\u8fd4\u56de\u4e00\u5c0f\u5757\u53ef\u4ee5\u7528 free() \u91ca\u653e\u7684\u5185\u5b58\uff0cLinux \u9075\u5faa\u540e\u8005\u3002 #include <stdlib.h> void free ( void * ptr ) free() \u91ca\u653e ptr \u6307\u5411\u7684\u5185\u5b58\u5757\uff0c\u8be5\u53c2\u6570\u5e94\u662f\u7531 malloc() \u5206\u914d\u7684\uff0c\u6216\u5176\u4ed6\u95f4\u63a5\u4f7f\u7528\u5176\u5728\u5806\u4e0a\u5206\u914d\u7684\u5185\u5b58\u7684\u5730\u5740\u7684\u6307\u9488\u3002 \u4e00\u822c\uff0c free() \u5e76\u4e0d\u4f1a\u964d\u4f4e program break \u7684\u4f4d\u7f6e\uff0c\u800c\u662f\u5c06\u5185\u5b58\u6dfb\u52a0\u5230\u7a7a\u95f2\u5185\u5b58\u5217\u8868\u4e2d\uff0c\u53ef\u4f9b\u540e\u7eed\u7684 malloc() \u4f7f\u7528\u3002\u4f18\u52bf\u5728\u4e8e \u88ab\u91ca\u653e\u7684\u5185\u5b58\u5757\u53ef\u80fd\u4f4d\u4e8e\u5806\u7684\u4e2d\u95f4\uff0c\u800c\u975e\u9876\u90e8\uff0c\u6b64\u65f6\u4e0d\u80fd\u964d\u4f4e program break \u51cf\u5c11\u4e86 syscall \u6b21\u6570 \u591a\u6570\u65f6\u5019\u7acb\u5373\u964d\u4f4e program break \u5e76\u4e0d\u4f1a\u5e26\u6765\u5f88\u591a\u6536\u76ca free() \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u51fd\u6570\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u5bf9\u6307\u5411\u5df2\u7ecf\u91ca\u653e\u7684\u5185\u5b58\u7684\u6307\u9488\u518d\u6b21\u8c03\u7528\uff0c\u5982\u518d\u6b21\u4f20\u9012\u7ed9 free() \u53ef\u80fd\u4ea7\u751f\u4e0d\u53ef\u9884\u77e5\u7684\u540e\u679c\u3002 \u5f53\u8fdb\u7a0b\u7ec8\u6b62\u65f6\uff0c\u4f7f\u7528\u7684\u6240\u6709\u5185\u5b58\u90fd\u4f1a\u88ab\u56de\u6536\uff0c\u5305\u62ec\u5728\u5806\u4e2d\u4f7f\u7528 malloc() \u5206\u914d\u7684\u5185\u5b58\u3002\u5bf9\u4e8e\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5c31\u5206\u914d\u5e76\u4e14\u5728\u7a0b\u5e8f\u7ed3\u675f\u540e\u624d\u91ca\u653e\u7684\u7a0b\u5e8f\u6765\u8bf4\u53ef\u4ee5\u7701\u7565 free() \u3002\u4f46\u6700\u597d\u8fd8\u662f\u663e\u5f0f\u6307\u5b9a\u91ca\u653e\u5185\u5b58\u3002\u5c24\u5176\u5bf9\u4e8e malloc() \u8c03\u8bd5\u5e93\u800c\u8a00\u53ef\u80fd\u5c06\u672a\u663e\u5f0f\u91ca\u653e\u7684\u5185\u5b58\u8ba4\u4e3a\u662f\u5185\u5b58\u6cc4\u6f0f\u3002","title":"\u7b14\u8bb0"},{"location":"chap7/#malloc-free","text":"malloc() \u4f1a\u5148\u626b\u63cf\u7531 free() \u91ca\u653e\u7684\u7a7a\u95f2\u5185\u5b58\u5757\u5217\u8868\uff0c\u82e5\u627e\u5230\u5c3a\u5bf8\u5927\u4e8e\u6216\u7b49\u4e8e\u8981\u6c42\u7684\u4e00\u5757\u7a7a\u95f2\u7684\u5185\u5b58\uff0c\u82e5\u5b8c\u5168\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u82e5\u8f83\u5927\uff0c\u5219\u4f1a\u5148\u5bf9\u5185\u5b58\u8fdb\u884c\u5206\u5272\uff0c\u5c06\u5927\u5c0f\u76f8\u5f53\u7684\u5185\u5b58\u8fd4\u56de\uff0c\u5269\u4f59\u7684\u90e8\u5206\u4fdd\u7559\u3002 \u82e5\u627e\u4e0d\u5230\u8db3\u591f\u5927\u7684\u5185\u5b58\uff0c\u5219 malloc() \u8c03\u7528 sbrk() \u5206\u914d\u4e00\u6bb5\u5185\u5b58\uff0c\u4e3a\u4e86\u51cf\u5c11 syscall \u8c03\u7528\uff0c malloc() \u4f1a\u4e00\u6b21\u6027\u5206\u914d\u66f4\u591a\u5185\u5b58\u3002 \u5728 malloc() \u5206\u914d\u5185\u5b58\u65f6\u4f1a\u989d\u5916\u5206\u914d\u51e0\u4e2a\u5b57\u8282\u7528\u6765\u5b58\u653e\u8fd9\u6bb5\u5185\u5b58\u5927\u5c0f\u7684\u6574\u6570\u503c\uff0c\u8be5\u533a\u57df\u4f4d\u4e8e\u5206\u914d\u7684\u5730\u5740\u5934\u90e8\uff0c\u5b9e\u9645\u8fd4\u56de\u7684\u6307\u9488\u5219\u6307\u5411\u8fd9\u4e2a\u5b57\u8282\u4e4b\u540e\u3002 \u7a7a\u95f2\u5185\u5b58\u5217\u8868\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5f53\u5185\u5b58\u5757\u5904\u5728\u7a7a\u95f2\u5185\u5b58\u5217\u8868\u65f6\uff0c free() \u4f7f\u7528\u5185\u5b58\u5757\u672c\u8eab\u7684\u7a7a\u95f4\u6765\u5b58\u653e\u94fe\u8868\u6307\u9488\uff0c\u5c06\u81ea\u8eab\u6dfb\u52a0\u5230\u94fe\u8868\u4e2d\u3002 \u5f53\u5185\u5b58\u4e0d\u65ad\u7684\u91ca\u653e\u548c\u91cd\u65b0\u5206\u914d\uff0c\u7a7a\u95f2\u5217\u8868\u4e2d\u7684\u7a7a\u95f2\u5185\u5b58\u548c\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u4f1a\u6df7\u5408\u5728\u4e00\u8d77\u3002\u7531\u4e8e C \u53ef\u4ee5\u4f7f\u6307\u9488\u6307\u5411\u4efb\u610f\u4f4d\u7f6e\uff0c\u82e5\u7a0b\u5e8f\u65e0\u610f\u95f4\u4fee\u6539\u6216\u8986\u76d6\u4e86\u5185\u5b58\u5206\u914d\u7684\u957f\u5ea6\u503c\uff0c\u5219 free() \u4e5f\u4f1a\u5728\u5185\u5b58\u5217\u8868\u4e2d\u6309\u7167\u9519\u8bef\u7684\u65b9\u5f0f\u8bb0\u5f55\uff0c\u8fd9\u9020\u6210\u4e86\u6392\u67e5\u56f0\u96be\u7684\u9519\u8bef\u3002","title":"malloc() \u548c free() \u7684\u5b9e\u73b0\u539f\u7406"},{"location":"chap7/#calloc-realloc","text":"#include <stdlib.h> void * calloc ( size_t numitems , size_t size ) calloc() \u7528\u4e8e\u7ed9\u4e00\u7ec4\u76f8\u540c\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u3002\u53c2\u6570 numitems \u6307\u5b9a\u5206\u914d\u6570\u91cf\uff0c size \u6307\u5b9a\u5bf9\u8c61\u5927\u5c0f\u3002\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u82e5\u51fa\u9519\u5219\u8fd4\u56de NULL \u3002 calloc() \u4f1a\u5c06\u5206\u914d\u7684\u5185\u5b58\u521d\u59cb\u5316\u4e3a 0\u3002 #include <stdlib.h> void * realloc ( void * ptr , size_t size ) realloc() \u7528\u6765\u8c03\u6574\u4e00\u5757\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u6b64\u5185\u5b58\u5e94\u662f\u7531 malloc() \u51fd\u6570\u5305\u5206\u914d\u7684\u3002 ptr \u4e3a\u6307\u5411\u9700\u8981\u8c03\u6574\u5927\u5c0f\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\uff0c size \u4e3a\u8981\u8c03\u6574\u5230\u7684\u5927\u5c0f\u503c\u3002 \u82e5\u6210\u529f\uff0c\u5219\u8fd4\u56de\u6307\u5411\u5927\u5c0f\u8c03\u6574\u540e\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\uff0c\u8be5\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u4e0e\u4e4b\u524d\u7684\u4e0d\u540c\u3002\u82e5\u53d1\u751f\u9519\u8bef\u5219\u8fd4\u56de NULL \uff0c\u6b64\u65f6\u5bf9 ptr \u6307\u5411\u7684\u5185\u5b58\u5757\u539f\u5c01\u4e0d\u52a8\u3002\u82e5\u589e\u52a0\u4e86\u5185\u5b58\uff0c\u5bf9\u589e\u52a0\u7684\u90e8\u5206\u4e0d\u4f1a\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5c3d\u53ef\u80fd\u4e0d\u4f7f\u7528 realloc() \u8c03\u6574\u5185\u5b58\uff0c\u7531\u4e8e\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u65e0\u6cd5\u5c31\u539f\u6709\u7684\u5185\u5b58\u5757\u6269\u5c55\uff0c\u6b64\u65f6\u9700\u8981\u5206\u914d\u65b0\u7684\u5185\u5b58\u5757\u5e76\u5c06\u539f\u6570\u636e\u590d\u5236\u5230\u65b0\u5185\u5b58\uff0c\u8fd9\u79cd\u884c\u4e3a\u4f1a\u5e26\u6765\u5927\u91cf CPU \u635f\u8017\u3002 \u4e14\u5bf9\u540e\u7eed\u5185\u5b58\u7684\u5f15\u7528\u5e94\u4f7f\u7528 realloc() \u7684\u8fd4\u56de\u5185\u5b58\u3002\u5e76\u7531\u4e8e realloc() \u53ef\u80fd\u5931\u8d25\uff0c\u4e14\u5931\u8d25\u65f6\u4f1a\u8fd4\u56de NULL \uff0c\u5728\u8c03\u7528 realloc() \u65f6\u4e0d\u5e94\u76f4\u63a5\u5c06\u539f\u6307\u9488\u8d4b\u4e88\u65b0\u7684\u503c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f53 realloc() \u6267\u884c\u5931\u8d25\u65f6\u65e0\u6cd5\u518d\u8bbf\u95ee\u539f\u6709\u7684\u5185\u5b58\u5757\u3002\u5e94\u4f7f\u7528\u5982\u4e0b\u7684 code snippets nptr = realloc ( ptr , newsize ); if ( nptr == NULL ) { /* Handle Error */ ; } else { /* realloc() succeeded */ ptr = nptr ; }","title":"\u4f7f\u7528 calloc() \u548c realloc()"},{"location":"chap7/#_3","text":"#include <alloca.h> void * alloca ( size_t size ); \u53ef\u4ee5\u4f7f\u7528 alloca() \u5728\u6808\u4e0a\u52a8\u6001\u5206\u914d\u5185\u5b58\u3002 size \u6307\u5b9a\u5206\u914d\u7684\u5b57\u8282\u6570\u3002\u5e76\u8fd4\u56de\u6307\u5411\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\u3002 \u4e0d\u9700\u4e5f\u7edd\u4e0d\u80fd\u8c03\u7528 free() \u91ca\u653e alloca() \u5206\u914d\u7684\u5185\u5b58\u3002\u4e5f\u4e0d\u53ef\u80fd\u8c03\u7528 realloc() \u4fee\u6539 alloca() \u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u3002 \u82e5 alloca() \u8c03\u7528\u540e\u53d1\u751f\u5806\u6808\u6ea2\u51fa\uff0c\u5219\u7a0b\u5e8f\u884c\u4e3a\u4e0d\u53ef\u9884\u77e5\uff0c\u6b64\u65f6\u4e00\u822c\u7a0b\u5e8f\u4f1a\u6536\u5230 SIGSEGV \u4fe1\u53f7\u3002 \u4e0d\u80fd\u5728\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u91cc\u8c03\u7528 alloca() \uff0c\u800c\u5e94\u5728\u8c03\u7528\u51fd\u6570\u524d\u5206\u914d\u5185\u5b58\u5e76\u4f20\u9012\u6307\u9488\u3002\u5426\u5219\u5206\u914d\u7684\u5806\u6808\u7a7a\u95f4\u4f1a\u51fa\u73b0\u5728\u51fd\u6570\u53c2\u6570\u7684\u7a7a\u95f4\u5185\u3002 func ( x , alloca ( size ), z ); /* Wrong! */ /* Right */ void * y ; y = alloca ( size ); func ( x , y , z ); \u5728\u6808\u4e0a\u5206\u914d\u5185\u5b58\u6bd4\u8d77\u5728\u5806\u4e0a\u7684\u5185\u5b58\u6709\u4e00\u5b9a\u4f18\u52bf \u901f\u5ea6\u5feb\u4e8e malloc() \u51fd\u6570\u5305\uff0c\u4e14\u4e0d\u9700\u8981\u7ef4\u62a4\u7a7a\u95f2\u5185\u5b58\u5757\u5217\u8868 \u5185\u5b58\u4f1a\u968f\u6808\u5e27\u7684\u79fb\u9664\u800c\u81ea\u52a8\u91ca\u653e","title":"\u5728\u6808\u4e0a\u5206\u914d\u5185\u5b58"},{"location":"chap7/#_4","text":"","title":"\u7ec3\u4e60"},{"location":"chap7/#7-1","text":"code: c7/free_and_sbrk.c ./free_and_sbrk 10 102400 Initial program break: 0x55e470df6000 Allocating 10 *102400 bytes Times 0 : Program break is now: 0x55e470df6000 Times 1 : Program break is now: 0x55e470e28000 Times 2 : Program break is now: 0x55e470e28000 Times 3 : Program break is now: 0x55e470e5a000 Times 4 : Program break is now: 0x55e470e5a000 Times 5 : Program break is now: 0x55e470e8c000 Times 6 : Program break is now: 0x55e470e8c000 Times 7 : Program break is now: 0x55e470ebe000 Times 8 : Program break is now: 0x55e470ebe000 Times 9 : Program break is now: 0x55e470ef0000 Program break is now: 0x55e470ef0000 Freeing blocks from 1 to 10 in steps of 1 After free () , program break is: 0x55e470df6000","title":"7-1"},{"location":"chap7/#7-2","text":"\u8fd9\u4e2a\u5c31\u9976\u4e86\u6211\u5427\uff0cCS\uff1aAPP \u7684\u65f6\u5019\u4f1a\u505a\u7684\uff0c\u4e00\u5b9a\u4f1a\u505a\u7684\u3002","title":"7-2"},{"location":"chap8/","text":"Cheaper 8 \u7528\u6237\u548c\u7ec4 \u00b6 \u8bcd\u6c47\u901f\u67e5 \u00b6 \u7b14\u8bb0 \u00b6 /etc/passwd \u00b6 \u5bf9\u4e8e\u6bcf\u4e2a\u8d26\u6237\uff0c\u5728\u7cfb\u7edf\u5bc6\u7801\u6587\u4ef6\u5373 /etc/passwd \u4e2d\u6709\u4e00\u5217\u8fdb\u884c\u63cf\u8ff0\uff0c\u4ed6\u53ef\u80fd\u957f\u6210\u8fd9\u4e2a\u6837\u5b50 panxiao81:x:1000:1000:,,,:/home/panxiao81:/bin/bash \u6bcf\u4e2a\u5b57\u6bb5\u7528 : \u5206\u5272\uff0c\u8fd9 7 \u4e2a\u5b57\u6bb5\u5206\u522b\u4e3a \u767b\u5f55\u540d\uff1a\u767b\u5f55\u7cfb\u7edf\u65f6\u4f7f\u7528\u7684\u540d\u79f0\uff0c\u5373\u8d26\u53f7\u540d \u7ecf\u8fc7\u52a0\u5bc6\u7684\u5bc6\u7801\uff1a\u8be5\u5b57\u6bb5\u4fdd\u5b58\u7528\u6237\u7684\u52a0\u5bc6\u5bc6\u7801\uff0c\u4f46\u73b0\u5982\u4eca\u7684\u7cfb\u7edf\u4e00\u822c\u542f\u7528\u4e13\u7528\u7684 shadow \u5bc6\u7801\u6587\u4ef6\uff0c\u8be5\u5b57\u6bb5\u901a\u5e38\u4f1a\u4f7f\u7528 x \u5b57\u7b26\u5360\u4f4d\uff0c\u800c\u5b9e\u9645\u7684\u5bc6\u7801\u4f1a\u52a0\u5bc6\u5e76\u4fdd\u5b58\u5728 /etc/shadow \u4e2d\u3002\u5373\u4fbf\u542f\u7528 shadow \u5bc6\u7801\uff0c\u82e5\u6b64\u5904\u5bc6\u7801\u4e3a\u7a7a\uff0c\u5219\u4ecd\u5141\u8bb8\u7528\u6237\u65e0\u5bc6\u7801\u767b\u5f55\u7cfb\u7edf\u3002 \u7528\u6237 ID (UID)\uff1a\u7528\u6237\u7684\u6570\u503c\u578b ID\uff0c\u82e5 UID=0 \u5219\u8be5\u8d26\u53f7\u62e5\u6709\u7279\u6743\uff0c\u4e00\u822c\u8be5\u8d26\u53f7\u53ea\u6709\u4e00\u4e2a\uff0c\u4e14\u767b\u5f55\u540d\u4e3a root \u3002\u65e9\u671f Linux \u4e2d UID \u4e3a 16 \u4f4d\u503c\uff0c\u5f53\u524d Linux \u4e2d UID \u4e3a 32 \u4f4d\u3002 \u7ec4 ID (GID)\uff1a\u7528\u6237\u5c5e\u7ec4\u4e2d\u9996\u9009\u5c5e\u7ec4\u7684\u6570\u503c\u578b ID\u3002\u8fdb\u4e00\u6b65\u5173\u7cfb\u4f1a\u5728 /etc/group \u4e2d\u5b9a\u4e49 \u6ce8\u91ca\uff1a\u5b58\u653e\u7528\u6237\u7684\u63cf\u8ff0\u6027\u6587\u5b57 \u4e3b\u76ee\u5f55\uff1a\u7528\u6237\u767b\u5f55\u540e\u6240\u5904\u7684\u521d\u59cb\u8def\u5f84\uff0c\u4e14\u4f1a\u4ee5\u6b64\u5b57\u6bb5\u5185\u5bb9\u8bbe\u7f6e HOME \u73af\u5883\u53d8\u91cf \u767b\u5f55 Shell\uff1a\u7528\u6237\u767b\u5f55\u540e\u4ea4\u7ed9\u6b64\u7a0b\u5e8f\u63a7\u5236\u3002\u901a\u5e38\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a Shell\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7a0b\u5e8f\u3002\u82e5\u8be5\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u5219\u9ed8\u8ba4\u7a0b\u5e8f\u4e3a /bin/sh \u3002\u4f1a\u4ee5\u6b64\u503c\u6765\u8bbe\u5b9a SHELL \u73af\u5883\u53d8\u91cf\u3002 \u5728\u5355\u673a\u7cfb\u7edf\u4e2d\u7528\u6237\u5bc6\u7801\u5b58\u50a8\u5728 /etc/passwd \u4e2d\uff0c\u4f46\u82e5\u4f7f\u7528\u4e86 NIS \u6216 LDAP \u7b49\u8ba4\u8bc1\u65b9\u5f0f\u5219\u90e8\u5206\u4fe1\u606f\u53ef\u80fd\u7531\u670d\u52a1\u5668\u4fdd\u5b58\u3002\u5bf9\u7a0b\u5e8f\u6765\u8bf4\uff0c\u53ea\u8981\u4f7f\u7528\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u5219\u8be5\u8fc7\u7a0b\u5bf9\u7a0b\u5e8f\u662f\u900f\u660e\u7684\u3002 /etc/shadow \u00b6 \u7531\u4e8e\u7a0b\u5e8f\u9700\u8981\u8bfb\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u56e0\u6b64 /etc/passwd \u4e0d\u5f97\u4e0d\u5bf9\u6240\u6709\u7528\u6237\u5f00\u653e\u8bbf\u95ee\u6743\u9650\uff0c\u82e5\u5c06\u5bc6\u7801\u4fdd\u5b58\u5728 /etc/passwd \u4e2d\u662f\u975e\u5e38\u4e0d\u5b89\u5168\u7684\u3002\u56e0\u6b64\u5c06\u5bc6\u7801\u5355\u72ec\u5b58\u653e\u81f3 /etc/shadow \u6587\u4ef6\u4e2d\uff0c\u5e76\u9650\u5236\u8be5\u6587\u4ef6\u4ec5\u5141\u8bb8\u7279\u6743\u7528\u6237\u8bbf\u95ee\u3002 shadow \u6587\u4ef6\u901a\u5e38\u5305\u542b\u767b\u5f55\u540d\uff0c\u7ecf\u8fc7\u52a0\u5bc6\u7684\u5bc6\u7801\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e0e\u5b89\u5168\u76f8\u5173\u7684\u5b57\u6bb5\u3002 SUSv3 \u5e76\u672a\u6807\u51c6\u5316 /etc/shadow \u3002\u56e0\u6b64\u5e76\u975e\u6240\u6709 UNIX \u90fd\u63d0\u4f9b\u8fd9\u4e2a\u7279\u6027\u3002\u4e14\u5728\u4e0d\u540c\u7684 UNIX \u4e4b\u95f4\u5b9e\u73b0\u4e5f\u672a\u5fc5\u76f8\u540c\u3002 /etc/group \u00b6 \u7528\u6237\u7684\u7ec4\u7531\u4e24\u90e8\u5206\u6784\u6210\uff0c\u4e00\u662f\u5bc6\u7801\u6587\u4ef6\u4e2d\u7528\u6237\u8bb0\u5f55\u7684\u7ec4 ID \u5b57\u6bb5\uff0c\u4e8c\u662f\u7ec4\u6587\u4ef6\u4e2d\u5217\u51fa\u7684\u7528\u6237\u6240\u5c5e\u7684\u5404\u4e2a\u7ec4\u3002 \u7531\u4e8e\u65e9\u671f UNIX \u53ea\u5141\u8bb8\u7528\u6237\u96b6\u5c5e\u4e8e\u4e00\u4e2a\u7ec4\uff0c\u5728 4.2BSD \u4e2d\u5f15\u5165\u4e86 \u5e76\u53d1\u591a\u5c5e\u7ec4 \u6982\u5ff5\uff0c\u4f7f\u4e00\u4e2a\u7528\u6237\u53ef\u4ee5\u96b6\u5c5e\u591a\u4e2a\u7ec4\u3002\u4e14 POSIX.1-1990 \u5bf9\u5176\u8fdb\u884c\u4e86\u6807\u51c6\u5316\u3002\u8fd9\u65f6\uff0c\u7ec4\u6587\u4ef6\u4f1a\u5217\u51fa\u7528\u6237\u6240\u5c5e\u7684\u5176\u4ed6\u5c5e\u7ec4\u3002 /etc/group \u4e2d\u5305\u542b 4 \u4e2a\u5b57\u6bb5\uff0c\u4e14\u6bcf\u4e2a\u5b57\u6bb5\u540c\u6837\u4f7f\u7528 : \u5206\u5272\u3002 \u7ec4\u540d\uff1a\u7ec4\u7684\u540d\u79f0 \u7ecf\u8fc7\u52a0\u5bc6\u5904\u7406\u7684\u5bc6\u7801\uff1a\u7ec4\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u5bc6\u7801\uff0c\u4f46\u5f53\u4eca\u5df2\u7ecf\u5f88\u5c11\u4f7f\u7528\u7ec4\u5bc6\u7801\u7279\u6027\u3002\u5728\u542f\u7528 shadow \u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u7ec4\u5bc6\u7801\u4f7f\u7528\u5360\u4f4d\uff0c\u800c\u5b9e\u9645\u7684\u5bc6\u7801\u5b58\u653e\u5728 /etc/gshadow \u4e2d\u3002 \u7ec4 ID (GID)\uff1a\u8be5\u7ec4\u7684\u6570\u503c\u578b ID\u3002\u901a\u5e38\u5bf9\u4e8e GID=0 \u53ea\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a root \u7684\u7ec4\u3002\u7c7b\u4f3c\u7684\uff0cGID \u5f53\u524d\u4e5f\u4e3a 32 \u4f4d\u503c\u3002 \u7528\u6237\u5217\u8868\uff1a\u5c5e\u4e8e\u8be5\u7ec4\u7684\u7528\u6237\u5217\u8868\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u5272 \u83b7\u53d6\u7528\u6237\u548c\u7ec4\u7684\u4fe1\u606f \u00b6 #include <pwd.h> struct passwd * getpwnam ( const char * name ); struct passwd * getpwuid ( uid_t uid ); \u8be5\u51fd\u6570\u4ece\u5bc6\u7801\u6587\u4ef6\u4e2d\u83b7\u53d6\u8bb0\u5f55\u3002 \u4e3a name \u63d0\u4f9b\u4e00\u4e2a\u7528\u6237\u540d\uff0c\u6216\u4e3a uid \u63d0\u4f9b\u4e00\u4e2a UID\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5982\u4e0b\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488 struct passwd { char * pw_name ; /* Login name (username) */ char * pw_passwd ; /* Encrypted passwd */ uid_t pw_uid ; /* User ID */ gid_t pw_gid ; /* Group ID */ char * pw_gecos ; /* Comment (user information) */ char * pw_dir ; /* Initial working (home) directory */ char * pw_shell ; /* Login shell */ }; \u4ec5\u5f53\u672a\u542f\u7528 shadow \u5bc6\u7801\u7684\u60c5\u51b5\u4e0b\uff0c pw_passwd \u624d\u5305\u542b\u6709\u6548\u4fe1\u606f\u3002\u53ef\u5728\u6210\u529f\u8c03\u7528 getpwnam() \u540e\u8c03\u7528 getspnam() \uff0c\u5e76\u68c0\u67e5\u662f\u5426\u80fd\u591f\u8fd4\u56de shadow \u5bc6\u7801\u8bb0\u5f55\u6765\u5224\u65ad\u662f\u5426\u542f\u7528 shadow \u5bc6\u7801\u3002 pw_gecos \u5b57\u6bb5\u540d\u5b57\u7684\u6765\u6e90\u662f\u65e9\u671f\u7684 UNIX \u5b9e\u73b0\uff0c\u8be5\u5b57\u6bb5\u7528\u4e8e\u548c GECOS \u7684\u8ba1\u7b97\u673a\u901a\u4fe1\u4f7f\u7528\uff0c\u8be5\u540d\u5b57\u6cbf\u7528\u81f3\u4eca\uff0c\u800c\u7528\u9014\u53d8\u4e3a\u8bb0\u5f55\u7528\u6237\u7684\u4fe1\u606f\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u7684\u6570\u636e\u7ed3\u6784\u662f\u5728\u5185\u5b58\u4e2d\u9759\u6001\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u8be5\u51fd\u6570\u662f\u4e0d\u53ef\u91cd\u5165\u7684\u3002 SUSv3 \u89c4\u5b9a\u82e5 passwd \u672a\u53d1\u73b0\u5339\u914d\u8bb0\u5f55\uff0c\u5219\u51fd\u6570\u8fd4\u56de NULL \u4e14\u4e0d\u6539\u53d8 errno \u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b code snippet \u533a\u5206\u51fa\u9519\u548c\u672a\u53d1\u73b0\u5339\u914d\u8bb0\u5f55 struct passwd * pwd ; errno = 0 ; pwd = getpwnam ( name ); if ( pwd == NULL ) { if ( errno == 0 ) /* not found */ ; else /* Error */ ; } \u4f46\u5b9e\u9645\u5b9e\u73b0\u4e2d\uff0c\u4e0d\u5c11\u5b9e\u73b0\u5e76\u672a\u9075\u5b88\u6807\u51c6\uff0c\u82e5\u8981\u533a\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u4fdd\u9669\u671f\u95f4\u9700\u8981\u67e5\u9605\u5f53\u524d\u7cfb\u7edf\u7684 man \u624b\u518c\u3002 #include <pwd.h> struct group * getgrnam ( const char * name ); struct group * getgrgid ( gid_t gid ); \u8be5\u51fd\u6570\u4ece\u7ec4\u6587\u4ef6\u4e2d\u83b7\u53d6\u8bb0\u5f55\u3002\u7c7b\u4f3c\u7684\uff0c\u4e24\u4e2a\u51fd\u6570\u901a\u8fc7\u7ec4\u540d\u6216\u7ec4 ID \u6765\u83b7\u53d6\u4fe1\u606f\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u4e0b\u5217\u7ed3\u6784\u4f53\u7684\u6307\u9488 struct group { char * gr_name ; /* Group name */ char * gr_passwd ; /* Encrypted passwd */ gid_t gr_gid ; /* Group ID */ char ** gr_mem ; /* NULL-terminated array of pointers to names of members listed in /etc/group */ }; \u8be5\u51fd\u6570\u540c\u6837\u4e0d\u53ef\u91cd\u5165\u3002 \u82e5\u672a\u53d1\u73b0\u5339\u914d\u8bb0\u5f55\uff0c\u884c\u4e3a\u4e0e\u524d\u8ff0\u51fd\u6570\u7c7b\u4f3c\u3002 \u904d\u5386 passwd \u6587\u4ef6 \u00b6 #include <pwd.h> struct passwd * getpwent ( void ); void setpwent ( void ); void endpwent ( void ); getpwent() \u51fd\u6570\u4ece\u5bc6\u7801\u6587\u4ef6\u9010\u6761\u8fd4\u56de\u8bb0\u5f55\uff0c\u5f53\u51fa\u9519\u6216\u5230\u6587\u4ef6\u672b\u7aef\u65f6\u8fd4\u56de NULL\u3002 getpwent() \u8c03\u7528\u540e\u4f1a\u6253\u5f00\u5bc6\u7801\u6587\u4ef6\uff0c\u5f53\u5904\u7406\u5b8c\u6bd5\u540e\u9700\u8c03\u7528 endpwent() \u5173\u95ed\u6587\u4ef6\u3002 \u53ef\u4f7f\u7528\u5982\u4e0b code snippet \u904d\u5386\u5bc6\u7801\u6587\u4ef6\uff0c\u5e76\u6253\u5370\u7528\u6237\u540d\u548c\u7528\u6237 ID struct passwd * pwd ; while (( pwd = getpwent ()) != NULL ) { printf ( \"%-8s %5ld \\n \" , pwd -> pw_name , ( long ) pwd -> pw_uid ); } endpwent (); \u53ef\u4ee5\u4f7f\u7528 setpwent() \u51fd\u6570\u8fd4\u56de\u6587\u4ef6\u8d77\u59cb\u5904\u3002 getgrent() , setgrent() \u548c endgrent() \u4e0e\u4e0a\u8ff0\u7c7b\u4f3c\u4f46\u5bf9\u7ec4\u5bc6\u7801\u6587\u4ef6\u8fdb\u884c\u7c7b\u4f3c\u64cd\u4f5c\u3002 \u5b58\u53d6 shadow \u6587\u4ef6 \u00b6 #include <shadow.h> struct spwd * getspnam ( const char * name ); struct spwd * getspent ( void ); void setspent ( void ); void endspent ( void ); \u4ee5\u4e0a\u51fd\u6570\u4f7f\u7528\u65b9\u5f0f\u4e0e passwd \u4e00\u5957\u7c7b\u4f3c\u3002 spwd \u7ed3\u6784\u4f53\u7684\u7ed3\u6784\u5982\u4e0b\uff1a struct spwd { char * sp_namp ; /* Login name */ char * sp_pwdp ; /* Encrypted passwd */ /* \u4ee5\u4e0b\u7528\u4e8e\u5bc6\u7801\u6709\u6548\u671f\u7b49\u8bbe\u5b9a */ long sp_lstchg ; /* Time of last password change (days since 1 Jan. 1970) */ long sp_min ; /* Min. number of days between password changes */ long sp_max ; /* Max. number of days before change required */ long sp_warn ; /* Number of days beforehand that user is warned of upcoming password expiration */ long sp_inact ; /* Number of days after expiration that account is considered inactive and locked */ long sp_expire ; /* Date when account expires (days since 1 Jan. 1970) */ unsigned long sp_flag ; /* Reserved for future use */ }; \u7528\u6237\u52a0\u5bc6\u4e0e\u7528\u6237\u8ba4\u8bc1 \u00b6 \u82e5\u7a0b\u5e8f\u9700\u8981\u8bfb\u53d6 shadow \u5bc6\u7801\uff0c\u7531\u4e8e\u5b89\u5168\u539f\u56e0\uff0cUNIX \u4f7f\u7528\u5355\u5411\u52a0\u5bc6\u7b97\u6cd5\u5bf9\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\u3002\u56e0\u6b64\u9a8c\u8bc1\u5bc6\u7801\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5c06\u5bc6\u7801\u7684\u660e\u6587\u5b57\u7b26\u4e32\u4f7f\u7528\u540c\u4e00\u7b97\u6cd5\u52a0\u5bc6\uff0c\u5e76\u4e0e\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u4e0e shadow \u4e2d\u5b58\u50a8\u7684\u5bc6\u7801\u8fdb\u884c\u6bd4\u8f83\u3002 \u52a0\u5bc6\u7b97\u6cd5\u5c01\u88c5\u5728 crypt() \u51fd\u6570\u4e2d\u3002 #define _XOPEN_SOURCE #include <unistd.h> char * crypt ( const char * key , const char * salt ); crypt() \u63a5\u53d7\u4e00\u4e2a\u5bc6\u7801\uff0c\u548c\u4e00\u4e2a\u7b97\u6cd5\u7684\u53d8\u4f53\u3002 salt \u6307\u5411\u4e00\u4e2a\u81f3\u5c11\u4e24\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u6765\u6539\u53d8\u7b97\u6cd5\u4f7f\u7528\u7684\u52a0\u5bc6\u5f3a\u5ea6\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u4e32\u7684\u6307\u9488\uff0c\u5185\u5bb9\u4e3a\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u3002 \u53ef\u5c06\u4ece shadow \u4e2d\u83b7\u53d6\u7684\u5bc6\u7801\u76f4\u63a5\u4f5c\u4e3a salt \u53c2\u6570\u3002 \u5728\u4f7f\u7528 crypt \u51fd\u6570\u65f6\u9700\u5728\u7f16\u8bd1\u65f6\u5f00\u542f -lcrypt \u9009\u9879\uff0c\u94fe\u63a5 crypt \u5e93\u3002 \u53ef\u4f7f\u7528 getpass() \u51fd\u6570\u4ece\u7ec8\u7aef\u83b7\u53d6\u5bc6\u7801\u3002 #define _BSD_SOURCE #include <unistd.h> char * getpass ( const char * prompt ); \u8be5\u51fd\u6570\u5148\u5c4f\u853d\u56de\u663e\u529f\u80fd\uff0c\u5e76\u505c\u6b62\u5bf9\u7ec8\u7aef\u7279\u6b8a\u5b57\u7b26\u4e32\u7684\u5904\u7406\uff0c\u4e4b\u540e\u6253\u5370 prompt \u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u8bfb\u53d6\u4e00\u884c\u8f93\u5165\u5e76\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u3002(\u4e0d\u542b\u7ed3\u5c3e\u7684\u6362\u884c\u7b26) \u8fd4\u56de\u524d\uff0c\u8be5\u51fd\u6570\u5c06\u7ec8\u7aef\u8bbe\u7f6e\u590d\u539f\u3002 \u8be5\u51fd\u6570\u4e0d\u53ef\u91cd\u5165\u3002 \u4e3a\u5b89\u5168\u8d77\u89c1\uff0c\u5728\u4f7f\u7528\u5b8c\u660e\u6587\u5bc6\u7801\u540e\u5e94\u7acb\u5373\u5c06\u660e\u6587\u4ece\u5185\u5b58\u4e2d\u62b9\u53bb\uff0c\u5426\u5219\u7a0b\u5e8f\u5d29\u6e83\u65f6\u53ef\u4ece\u5185\u6838\u8f6c\u50a8\u4e2d\u8bfb\u53d6\u660e\u6587\u5bc6\u7801\u3002 \u7ec3\u4e60 \u00b6 8-1 \u00b6 \u4e24\u6b21 getowuid() \u8c03\u7528\u5747\u53d1\u751f\u5728 printf() \u6784\u5efa\u5b57\u7b26\u4e32\u4e4b\u524d\uff0c\u800c getpwuid() \u51fd\u6570\u662f\u4e0d\u53ef\u91cd\u5165\u7684\uff0c\u5373\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u7ed3\u679c\u88ab\u8986\u76d6\u4e86\u3002 8-2 \u00b6 code: c8/getpwnam.c \u975e\u5e38\u7b80\u5355\u3002 \u59d1\u4e14\u8fd8\u662f\u505a\u4e86\u7a7a\u6307\u9488\u5224\u65ad\uff0c\u4f46\u5176\u5b9e\u4e0d\u5224\u4e5f\u6ca1\u4ec0\u4e48\u5927\u95ee\u9898\u3002 \u59d1\u4e14\u5199\u4e86 Test\uff0c\u53ef\u4ee5\u8fd0\u884c\u7a0b\u5e8f\u67e5\u770b\u7528\u6cd5\u3002","title":"\u7b2c\u516b\u7ae0-\u7528\u6237\u548c\u7ec4"},{"location":"chap8/#cheaper-8","text":"","title":"Cheaper 8 \u7528\u6237\u548c\u7ec4"},{"location":"chap8/#_1","text":"","title":"\u8bcd\u6c47\u901f\u67e5"},{"location":"chap8/#_2","text":"","title":"\u7b14\u8bb0"},{"location":"chap8/#etcpasswd","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u8d26\u6237\uff0c\u5728\u7cfb\u7edf\u5bc6\u7801\u6587\u4ef6\u5373 /etc/passwd \u4e2d\u6709\u4e00\u5217\u8fdb\u884c\u63cf\u8ff0\uff0c\u4ed6\u53ef\u80fd\u957f\u6210\u8fd9\u4e2a\u6837\u5b50 panxiao81:x:1000:1000:,,,:/home/panxiao81:/bin/bash \u6bcf\u4e2a\u5b57\u6bb5\u7528 : \u5206\u5272\uff0c\u8fd9 7 \u4e2a\u5b57\u6bb5\u5206\u522b\u4e3a \u767b\u5f55\u540d\uff1a\u767b\u5f55\u7cfb\u7edf\u65f6\u4f7f\u7528\u7684\u540d\u79f0\uff0c\u5373\u8d26\u53f7\u540d \u7ecf\u8fc7\u52a0\u5bc6\u7684\u5bc6\u7801\uff1a\u8be5\u5b57\u6bb5\u4fdd\u5b58\u7528\u6237\u7684\u52a0\u5bc6\u5bc6\u7801\uff0c\u4f46\u73b0\u5982\u4eca\u7684\u7cfb\u7edf\u4e00\u822c\u542f\u7528\u4e13\u7528\u7684 shadow \u5bc6\u7801\u6587\u4ef6\uff0c\u8be5\u5b57\u6bb5\u901a\u5e38\u4f1a\u4f7f\u7528 x \u5b57\u7b26\u5360\u4f4d\uff0c\u800c\u5b9e\u9645\u7684\u5bc6\u7801\u4f1a\u52a0\u5bc6\u5e76\u4fdd\u5b58\u5728 /etc/shadow \u4e2d\u3002\u5373\u4fbf\u542f\u7528 shadow \u5bc6\u7801\uff0c\u82e5\u6b64\u5904\u5bc6\u7801\u4e3a\u7a7a\uff0c\u5219\u4ecd\u5141\u8bb8\u7528\u6237\u65e0\u5bc6\u7801\u767b\u5f55\u7cfb\u7edf\u3002 \u7528\u6237 ID (UID)\uff1a\u7528\u6237\u7684\u6570\u503c\u578b ID\uff0c\u82e5 UID=0 \u5219\u8be5\u8d26\u53f7\u62e5\u6709\u7279\u6743\uff0c\u4e00\u822c\u8be5\u8d26\u53f7\u53ea\u6709\u4e00\u4e2a\uff0c\u4e14\u767b\u5f55\u540d\u4e3a root \u3002\u65e9\u671f Linux \u4e2d UID \u4e3a 16 \u4f4d\u503c\uff0c\u5f53\u524d Linux \u4e2d UID \u4e3a 32 \u4f4d\u3002 \u7ec4 ID (GID)\uff1a\u7528\u6237\u5c5e\u7ec4\u4e2d\u9996\u9009\u5c5e\u7ec4\u7684\u6570\u503c\u578b ID\u3002\u8fdb\u4e00\u6b65\u5173\u7cfb\u4f1a\u5728 /etc/group \u4e2d\u5b9a\u4e49 \u6ce8\u91ca\uff1a\u5b58\u653e\u7528\u6237\u7684\u63cf\u8ff0\u6027\u6587\u5b57 \u4e3b\u76ee\u5f55\uff1a\u7528\u6237\u767b\u5f55\u540e\u6240\u5904\u7684\u521d\u59cb\u8def\u5f84\uff0c\u4e14\u4f1a\u4ee5\u6b64\u5b57\u6bb5\u5185\u5bb9\u8bbe\u7f6e HOME \u73af\u5883\u53d8\u91cf \u767b\u5f55 Shell\uff1a\u7528\u6237\u767b\u5f55\u540e\u4ea4\u7ed9\u6b64\u7a0b\u5e8f\u63a7\u5236\u3002\u901a\u5e38\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a Shell\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7a0b\u5e8f\u3002\u82e5\u8be5\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u5219\u9ed8\u8ba4\u7a0b\u5e8f\u4e3a /bin/sh \u3002\u4f1a\u4ee5\u6b64\u503c\u6765\u8bbe\u5b9a SHELL \u73af\u5883\u53d8\u91cf\u3002 \u5728\u5355\u673a\u7cfb\u7edf\u4e2d\u7528\u6237\u5bc6\u7801\u5b58\u50a8\u5728 /etc/passwd \u4e2d\uff0c\u4f46\u82e5\u4f7f\u7528\u4e86 NIS \u6216 LDAP \u7b49\u8ba4\u8bc1\u65b9\u5f0f\u5219\u90e8\u5206\u4fe1\u606f\u53ef\u80fd\u7531\u670d\u52a1\u5668\u4fdd\u5b58\u3002\u5bf9\u7a0b\u5e8f\u6765\u8bf4\uff0c\u53ea\u8981\u4f7f\u7528\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u5219\u8be5\u8fc7\u7a0b\u5bf9\u7a0b\u5e8f\u662f\u900f\u660e\u7684\u3002","title":"/etc/passwd"},{"location":"chap8/#etcshadow","text":"\u7531\u4e8e\u7a0b\u5e8f\u9700\u8981\u8bfb\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u56e0\u6b64 /etc/passwd \u4e0d\u5f97\u4e0d\u5bf9\u6240\u6709\u7528\u6237\u5f00\u653e\u8bbf\u95ee\u6743\u9650\uff0c\u82e5\u5c06\u5bc6\u7801\u4fdd\u5b58\u5728 /etc/passwd \u4e2d\u662f\u975e\u5e38\u4e0d\u5b89\u5168\u7684\u3002\u56e0\u6b64\u5c06\u5bc6\u7801\u5355\u72ec\u5b58\u653e\u81f3 /etc/shadow \u6587\u4ef6\u4e2d\uff0c\u5e76\u9650\u5236\u8be5\u6587\u4ef6\u4ec5\u5141\u8bb8\u7279\u6743\u7528\u6237\u8bbf\u95ee\u3002 shadow \u6587\u4ef6\u901a\u5e38\u5305\u542b\u767b\u5f55\u540d\uff0c\u7ecf\u8fc7\u52a0\u5bc6\u7684\u5bc6\u7801\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e0e\u5b89\u5168\u76f8\u5173\u7684\u5b57\u6bb5\u3002 SUSv3 \u5e76\u672a\u6807\u51c6\u5316 /etc/shadow \u3002\u56e0\u6b64\u5e76\u975e\u6240\u6709 UNIX \u90fd\u63d0\u4f9b\u8fd9\u4e2a\u7279\u6027\u3002\u4e14\u5728\u4e0d\u540c\u7684 UNIX \u4e4b\u95f4\u5b9e\u73b0\u4e5f\u672a\u5fc5\u76f8\u540c\u3002","title":"/etc/shadow"},{"location":"chap8/#etcgroup","text":"\u7528\u6237\u7684\u7ec4\u7531\u4e24\u90e8\u5206\u6784\u6210\uff0c\u4e00\u662f\u5bc6\u7801\u6587\u4ef6\u4e2d\u7528\u6237\u8bb0\u5f55\u7684\u7ec4 ID \u5b57\u6bb5\uff0c\u4e8c\u662f\u7ec4\u6587\u4ef6\u4e2d\u5217\u51fa\u7684\u7528\u6237\u6240\u5c5e\u7684\u5404\u4e2a\u7ec4\u3002 \u7531\u4e8e\u65e9\u671f UNIX \u53ea\u5141\u8bb8\u7528\u6237\u96b6\u5c5e\u4e8e\u4e00\u4e2a\u7ec4\uff0c\u5728 4.2BSD \u4e2d\u5f15\u5165\u4e86 \u5e76\u53d1\u591a\u5c5e\u7ec4 \u6982\u5ff5\uff0c\u4f7f\u4e00\u4e2a\u7528\u6237\u53ef\u4ee5\u96b6\u5c5e\u591a\u4e2a\u7ec4\u3002\u4e14 POSIX.1-1990 \u5bf9\u5176\u8fdb\u884c\u4e86\u6807\u51c6\u5316\u3002\u8fd9\u65f6\uff0c\u7ec4\u6587\u4ef6\u4f1a\u5217\u51fa\u7528\u6237\u6240\u5c5e\u7684\u5176\u4ed6\u5c5e\u7ec4\u3002 /etc/group \u4e2d\u5305\u542b 4 \u4e2a\u5b57\u6bb5\uff0c\u4e14\u6bcf\u4e2a\u5b57\u6bb5\u540c\u6837\u4f7f\u7528 : \u5206\u5272\u3002 \u7ec4\u540d\uff1a\u7ec4\u7684\u540d\u79f0 \u7ecf\u8fc7\u52a0\u5bc6\u5904\u7406\u7684\u5bc6\u7801\uff1a\u7ec4\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u5bc6\u7801\uff0c\u4f46\u5f53\u4eca\u5df2\u7ecf\u5f88\u5c11\u4f7f\u7528\u7ec4\u5bc6\u7801\u7279\u6027\u3002\u5728\u542f\u7528 shadow \u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u7ec4\u5bc6\u7801\u4f7f\u7528\u5360\u4f4d\uff0c\u800c\u5b9e\u9645\u7684\u5bc6\u7801\u5b58\u653e\u5728 /etc/gshadow \u4e2d\u3002 \u7ec4 ID (GID)\uff1a\u8be5\u7ec4\u7684\u6570\u503c\u578b ID\u3002\u901a\u5e38\u5bf9\u4e8e GID=0 \u53ea\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a root \u7684\u7ec4\u3002\u7c7b\u4f3c\u7684\uff0cGID \u5f53\u524d\u4e5f\u4e3a 32 \u4f4d\u503c\u3002 \u7528\u6237\u5217\u8868\uff1a\u5c5e\u4e8e\u8be5\u7ec4\u7684\u7528\u6237\u5217\u8868\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u5272","title":"/etc/group"},{"location":"chap8/#_3","text":"#include <pwd.h> struct passwd * getpwnam ( const char * name ); struct passwd * getpwuid ( uid_t uid ); \u8be5\u51fd\u6570\u4ece\u5bc6\u7801\u6587\u4ef6\u4e2d\u83b7\u53d6\u8bb0\u5f55\u3002 \u4e3a name \u63d0\u4f9b\u4e00\u4e2a\u7528\u6237\u540d\uff0c\u6216\u4e3a uid \u63d0\u4f9b\u4e00\u4e2a UID\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5982\u4e0b\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488 struct passwd { char * pw_name ; /* Login name (username) */ char * pw_passwd ; /* Encrypted passwd */ uid_t pw_uid ; /* User ID */ gid_t pw_gid ; /* Group ID */ char * pw_gecos ; /* Comment (user information) */ char * pw_dir ; /* Initial working (home) directory */ char * pw_shell ; /* Login shell */ }; \u4ec5\u5f53\u672a\u542f\u7528 shadow \u5bc6\u7801\u7684\u60c5\u51b5\u4e0b\uff0c pw_passwd \u624d\u5305\u542b\u6709\u6548\u4fe1\u606f\u3002\u53ef\u5728\u6210\u529f\u8c03\u7528 getpwnam() \u540e\u8c03\u7528 getspnam() \uff0c\u5e76\u68c0\u67e5\u662f\u5426\u80fd\u591f\u8fd4\u56de shadow \u5bc6\u7801\u8bb0\u5f55\u6765\u5224\u65ad\u662f\u5426\u542f\u7528 shadow \u5bc6\u7801\u3002 pw_gecos \u5b57\u6bb5\u540d\u5b57\u7684\u6765\u6e90\u662f\u65e9\u671f\u7684 UNIX \u5b9e\u73b0\uff0c\u8be5\u5b57\u6bb5\u7528\u4e8e\u548c GECOS \u7684\u8ba1\u7b97\u673a\u901a\u4fe1\u4f7f\u7528\uff0c\u8be5\u540d\u5b57\u6cbf\u7528\u81f3\u4eca\uff0c\u800c\u7528\u9014\u53d8\u4e3a\u8bb0\u5f55\u7528\u6237\u7684\u4fe1\u606f\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u7684\u6570\u636e\u7ed3\u6784\u662f\u5728\u5185\u5b58\u4e2d\u9759\u6001\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u8be5\u51fd\u6570\u662f\u4e0d\u53ef\u91cd\u5165\u7684\u3002 SUSv3 \u89c4\u5b9a\u82e5 passwd \u672a\u53d1\u73b0\u5339\u914d\u8bb0\u5f55\uff0c\u5219\u51fd\u6570\u8fd4\u56de NULL \u4e14\u4e0d\u6539\u53d8 errno \u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b code snippet \u533a\u5206\u51fa\u9519\u548c\u672a\u53d1\u73b0\u5339\u914d\u8bb0\u5f55 struct passwd * pwd ; errno = 0 ; pwd = getpwnam ( name ); if ( pwd == NULL ) { if ( errno == 0 ) /* not found */ ; else /* Error */ ; } \u4f46\u5b9e\u9645\u5b9e\u73b0\u4e2d\uff0c\u4e0d\u5c11\u5b9e\u73b0\u5e76\u672a\u9075\u5b88\u6807\u51c6\uff0c\u82e5\u8981\u533a\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u4fdd\u9669\u671f\u95f4\u9700\u8981\u67e5\u9605\u5f53\u524d\u7cfb\u7edf\u7684 man \u624b\u518c\u3002 #include <pwd.h> struct group * getgrnam ( const char * name ); struct group * getgrgid ( gid_t gid ); \u8be5\u51fd\u6570\u4ece\u7ec4\u6587\u4ef6\u4e2d\u83b7\u53d6\u8bb0\u5f55\u3002\u7c7b\u4f3c\u7684\uff0c\u4e24\u4e2a\u51fd\u6570\u901a\u8fc7\u7ec4\u540d\u6216\u7ec4 ID \u6765\u83b7\u53d6\u4fe1\u606f\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u4e0b\u5217\u7ed3\u6784\u4f53\u7684\u6307\u9488 struct group { char * gr_name ; /* Group name */ char * gr_passwd ; /* Encrypted passwd */ gid_t gr_gid ; /* Group ID */ char ** gr_mem ; /* NULL-terminated array of pointers to names of members listed in /etc/group */ }; \u8be5\u51fd\u6570\u540c\u6837\u4e0d\u53ef\u91cd\u5165\u3002 \u82e5\u672a\u53d1\u73b0\u5339\u914d\u8bb0\u5f55\uff0c\u884c\u4e3a\u4e0e\u524d\u8ff0\u51fd\u6570\u7c7b\u4f3c\u3002","title":"\u83b7\u53d6\u7528\u6237\u548c\u7ec4\u7684\u4fe1\u606f"},{"location":"chap8/#passwd","text":"#include <pwd.h> struct passwd * getpwent ( void ); void setpwent ( void ); void endpwent ( void ); getpwent() \u51fd\u6570\u4ece\u5bc6\u7801\u6587\u4ef6\u9010\u6761\u8fd4\u56de\u8bb0\u5f55\uff0c\u5f53\u51fa\u9519\u6216\u5230\u6587\u4ef6\u672b\u7aef\u65f6\u8fd4\u56de NULL\u3002 getpwent() \u8c03\u7528\u540e\u4f1a\u6253\u5f00\u5bc6\u7801\u6587\u4ef6\uff0c\u5f53\u5904\u7406\u5b8c\u6bd5\u540e\u9700\u8c03\u7528 endpwent() \u5173\u95ed\u6587\u4ef6\u3002 \u53ef\u4f7f\u7528\u5982\u4e0b code snippet \u904d\u5386\u5bc6\u7801\u6587\u4ef6\uff0c\u5e76\u6253\u5370\u7528\u6237\u540d\u548c\u7528\u6237 ID struct passwd * pwd ; while (( pwd = getpwent ()) != NULL ) { printf ( \"%-8s %5ld \\n \" , pwd -> pw_name , ( long ) pwd -> pw_uid ); } endpwent (); \u53ef\u4ee5\u4f7f\u7528 setpwent() \u51fd\u6570\u8fd4\u56de\u6587\u4ef6\u8d77\u59cb\u5904\u3002 getgrent() , setgrent() \u548c endgrent() \u4e0e\u4e0a\u8ff0\u7c7b\u4f3c\u4f46\u5bf9\u7ec4\u5bc6\u7801\u6587\u4ef6\u8fdb\u884c\u7c7b\u4f3c\u64cd\u4f5c\u3002","title":"\u904d\u5386 passwd \u6587\u4ef6"},{"location":"chap8/#shadow","text":"#include <shadow.h> struct spwd * getspnam ( const char * name ); struct spwd * getspent ( void ); void setspent ( void ); void endspent ( void ); \u4ee5\u4e0a\u51fd\u6570\u4f7f\u7528\u65b9\u5f0f\u4e0e passwd \u4e00\u5957\u7c7b\u4f3c\u3002 spwd \u7ed3\u6784\u4f53\u7684\u7ed3\u6784\u5982\u4e0b\uff1a struct spwd { char * sp_namp ; /* Login name */ char * sp_pwdp ; /* Encrypted passwd */ /* \u4ee5\u4e0b\u7528\u4e8e\u5bc6\u7801\u6709\u6548\u671f\u7b49\u8bbe\u5b9a */ long sp_lstchg ; /* Time of last password change (days since 1 Jan. 1970) */ long sp_min ; /* Min. number of days between password changes */ long sp_max ; /* Max. number of days before change required */ long sp_warn ; /* Number of days beforehand that user is warned of upcoming password expiration */ long sp_inact ; /* Number of days after expiration that account is considered inactive and locked */ long sp_expire ; /* Date when account expires (days since 1 Jan. 1970) */ unsigned long sp_flag ; /* Reserved for future use */ };","title":"\u5b58\u53d6 shadow \u6587\u4ef6"},{"location":"chap8/#_4","text":"\u82e5\u7a0b\u5e8f\u9700\u8981\u8bfb\u53d6 shadow \u5bc6\u7801\uff0c\u7531\u4e8e\u5b89\u5168\u539f\u56e0\uff0cUNIX \u4f7f\u7528\u5355\u5411\u52a0\u5bc6\u7b97\u6cd5\u5bf9\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\u3002\u56e0\u6b64\u9a8c\u8bc1\u5bc6\u7801\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5c06\u5bc6\u7801\u7684\u660e\u6587\u5b57\u7b26\u4e32\u4f7f\u7528\u540c\u4e00\u7b97\u6cd5\u52a0\u5bc6\uff0c\u5e76\u4e0e\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u4e0e shadow \u4e2d\u5b58\u50a8\u7684\u5bc6\u7801\u8fdb\u884c\u6bd4\u8f83\u3002 \u52a0\u5bc6\u7b97\u6cd5\u5c01\u88c5\u5728 crypt() \u51fd\u6570\u4e2d\u3002 #define _XOPEN_SOURCE #include <unistd.h> char * crypt ( const char * key , const char * salt ); crypt() \u63a5\u53d7\u4e00\u4e2a\u5bc6\u7801\uff0c\u548c\u4e00\u4e2a\u7b97\u6cd5\u7684\u53d8\u4f53\u3002 salt \u6307\u5411\u4e00\u4e2a\u81f3\u5c11\u4e24\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u6765\u6539\u53d8\u7b97\u6cd5\u4f7f\u7528\u7684\u52a0\u5bc6\u5f3a\u5ea6\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u4e32\u7684\u6307\u9488\uff0c\u5185\u5bb9\u4e3a\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u3002 \u53ef\u5c06\u4ece shadow \u4e2d\u83b7\u53d6\u7684\u5bc6\u7801\u76f4\u63a5\u4f5c\u4e3a salt \u53c2\u6570\u3002 \u5728\u4f7f\u7528 crypt \u51fd\u6570\u65f6\u9700\u5728\u7f16\u8bd1\u65f6\u5f00\u542f -lcrypt \u9009\u9879\uff0c\u94fe\u63a5 crypt \u5e93\u3002 \u53ef\u4f7f\u7528 getpass() \u51fd\u6570\u4ece\u7ec8\u7aef\u83b7\u53d6\u5bc6\u7801\u3002 #define _BSD_SOURCE #include <unistd.h> char * getpass ( const char * prompt ); \u8be5\u51fd\u6570\u5148\u5c4f\u853d\u56de\u663e\u529f\u80fd\uff0c\u5e76\u505c\u6b62\u5bf9\u7ec8\u7aef\u7279\u6b8a\u5b57\u7b26\u4e32\u7684\u5904\u7406\uff0c\u4e4b\u540e\u6253\u5370 prompt \u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u8bfb\u53d6\u4e00\u884c\u8f93\u5165\u5e76\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u3002(\u4e0d\u542b\u7ed3\u5c3e\u7684\u6362\u884c\u7b26) \u8fd4\u56de\u524d\uff0c\u8be5\u51fd\u6570\u5c06\u7ec8\u7aef\u8bbe\u7f6e\u590d\u539f\u3002 \u8be5\u51fd\u6570\u4e0d\u53ef\u91cd\u5165\u3002 \u4e3a\u5b89\u5168\u8d77\u89c1\uff0c\u5728\u4f7f\u7528\u5b8c\u660e\u6587\u5bc6\u7801\u540e\u5e94\u7acb\u5373\u5c06\u660e\u6587\u4ece\u5185\u5b58\u4e2d\u62b9\u53bb\uff0c\u5426\u5219\u7a0b\u5e8f\u5d29\u6e83\u65f6\u53ef\u4ece\u5185\u6838\u8f6c\u50a8\u4e2d\u8bfb\u53d6\u660e\u6587\u5bc6\u7801\u3002","title":"\u7528\u6237\u52a0\u5bc6\u4e0e\u7528\u6237\u8ba4\u8bc1"},{"location":"chap8/#_5","text":"","title":"\u7ec3\u4e60"},{"location":"chap8/#8-1","text":"\u4e24\u6b21 getowuid() \u8c03\u7528\u5747\u53d1\u751f\u5728 printf() \u6784\u5efa\u5b57\u7b26\u4e32\u4e4b\u524d\uff0c\u800c getpwuid() \u51fd\u6570\u662f\u4e0d\u53ef\u91cd\u5165\u7684\uff0c\u5373\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u7ed3\u679c\u88ab\u8986\u76d6\u4e86\u3002","title":"8-1"},{"location":"chap8/#8-2","text":"code: c8/getpwnam.c \u975e\u5e38\u7b80\u5355\u3002 \u59d1\u4e14\u8fd8\u662f\u505a\u4e86\u7a7a\u6307\u9488\u5224\u65ad\uff0c\u4f46\u5176\u5b9e\u4e0d\u5224\u4e5f\u6ca1\u4ec0\u4e48\u5927\u95ee\u9898\u3002 \u59d1\u4e14\u5199\u4e86 Test\uff0c\u53ef\u4ee5\u8fd0\u884c\u7a0b\u5e8f\u67e5\u770b\u7528\u6cd5\u3002","title":"8-2"},{"location":"chap9/","text":"Cheaper 9 \u8fdb\u7a0b\u51ed\u8bc1 \u00b6 \u8bcd\u6c47\u901f\u67e5 \u00b6 \u7279\u6743\u7ea7\u8fdb\u7a0b: privileged process \u8f85\u52a9\u7ec4: supplementary group \u7b14\u8bb0 \u00b6 **\u6bcf\u4e2a\u8fdb\u7a0b**\u90fd\u6709\u4e00\u5957 UID \u548c GID\uff0c\u8fd9\u4e9b ID \u88ab\u79f0\u4e3a\u8fdb\u7a0b\u51ed\u8bc1\u3002 \u5305\u62ec\u5982\u4e0b\uff1a \u5b9e\u9645\u7528\u6237 ID (real user ID) \u548c \u5b9e\u9645\u7ec4 ID (real group ID) \u6709\u6548\u7528\u6237 ID (effective user ID) \u548c \u6709\u6548\u7ec4 ID (effective group ID) \u4fdd\u5b58\u7684 set-user-id (saved set-user-id) \u548c \u4fdd\u5b58\u7684 set-group-id (saved set-group-id) \u6587\u4ef6\u7cfb\u7edf\u7528\u6237 ID (file-system user ID) \u548c \u6587\u4ef6\u7cfb\u7edf\u7ec4 ID (file-system group id) (\u6b64\u4e3a Linux \u4e13\u6709\u7279\u6027) \u8f85\u52a9\u7ec4 ID \u5b9e\u9645 UID \u548c \u5b9e\u9645 GID \u00b6 \u5b9e\u9645\u7528\u6237\u548c\u7ec4 ID \u5373\u8fdb\u7a0b\u6240\u5c5e\u7684\u7528\u6237\u548c\u7ec4\u3002\u5f53\u7528\u6237\u767b\u5f55\u65f6\uff0c\u767b\u5f55 Shell \u4ece\u5bc6\u7801\u6587\u4ef6\u4e2d\u8bfb\u53d6\u76f8\u5e94\u7684\u7528\u6237\u5bc6\u7801\u8bb0\u5f55\u7684\u7b2c\u4e09\u5b50\u6bb5\u548c\u7b2c\u56db\u5b50\u6bb5 (\u5373 UID \u5b50\u6bb5\u548c GID \u5b50\u6bb5)\uff0c\u7f6e\u4e3a\u5b9e\u9645\u7528\u6237 ID \u548c\u7ec4 ID\u3002\u5f53\u521b\u5efa\u65b0\u8fdb\u7a0b\u65f6\u5c06\u4ece\u7236\u8fdb\u7a0b\u4e2d\u7ee7\u627f\u8be5\u503c\u3002 \u6709\u6548 UID \u548c\u6709\u6548 GID \u00b6 \u5f53\u8fdb\u7a0b\u6267\u884c\u5404\u79cd\u64cd\u4f5c\u65f6\uff0c\u5c06\u7ed3\u5408\u6709\u6548\u7528\u6237 ID\uff0c\u6709\u6548\u7ec4 ID \u548c\u8f85\u52a9\u7ec4 ID \u6765\u5171\u540c\u786e\u5b9a\u8d4b\u4e88\u8fdb\u7a0b\u7684\u6743\u9650\u3002 \u6709\u6548 ID \u4e3a 0 \u7684\u8fdb\u7a0b\u62e5\u6709\u8d85\u7ea7\u7528\u6237\u7684\u6240\u6709\u6743\u9650\uff0c\u8fd9\u79cd\u8fdb\u7a0b\u79f0\u4e3a\u7279\u6743\u7ea7\u8fdb\u7a0b\u3002\u67d0\u4e9b\u7cfb\u7edf\u8c03\u7528\u4ec5\u652f\u6301\u7279\u6743\u7528\u6237\u8fd0\u884c\u3002 \u901a\u5e38\u6709\u6548\u7528\u6237\u548c\u7ec4 ID \u4e0e\u5b9e\u9645\u7528\u6237\u548c\u7ec4 ID \u76f8\u7b49\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 syscall \u6216 set-user-ID \u548c set-group-ID \u6765\u6539\u53d8\u3002 set-user-id \u548c set-group-id \u00b6 set-user-ID (\u5373 setuid) \u5c06\u628a\u8fdb\u7a0b\u7684\u6709\u6548\u7528\u6237 ID \u7f6e\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u7684 UID\uff0c\u4ece\u800c\u83b7\u5f97\u5e38\u89c4\u60c5\u51b5\u4e0b\u4e0d\u5177\u6709\u7684\u6743\u9650\uff0cset-group-ID (\u5373 setGID) \u5c06\u8fdb\u7a0b\u7684\u6709\u6548 GID \u7f6e\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u7684 GID\u3002 \u6bcf\u4e2a\u6587\u4ef6\u90fd\u5177\u6709\u989d\u5916\u7684 setUID \u548c setGID \u4f4d\uff0c\u53ef\u901a\u8fc7 chmod(1) \u6765\u8bbe\u7f6e\u3002\u975e\u7279\u6743\u7528\u6237\u4ec5\u80fd\u5bf9\u7528\u6237\u672c\u8eab\u62e5\u6709\u7684\u7a0b\u5e8f\u8bbe\u7f6e\uff0c\u7279\u6743\u7528\u6237\u6216\u5177\u6709\u7279\u5b9a\u6743\u9650\u7684\u7528\u6237 (CAP_FOWNER) \u80fd\u5bf9\u4efb\u4f55\u6587\u4ef6\u8fdb\u884c\u8bbe\u7f6e\u3002 chmod u+s prog chmod g+s prog \u5728 Linux \u4e2d setUID \u548c setGID \u5bf9 Shell \u811a\u672c\u65e0\u6548\u3002 \u5e38\u89c1\u7684 setUID \u7a0b\u5e8f\u6709 passwd(1) \u7528\u4e8e\u4fee\u6539\u7528\u6237\u5bc6\u7801\uff0c mount(8) \u548c umount(8) \u7528\u4e8e\u6302\u8f7d\u548c\u5378\u8f7d\u6587\u4ef6\u7cfb\u7edf\uff0c su(1) \u5141\u8bb8\u7528\u6237\u4ee5\u53e6\u4e00\u7528\u6237\u7684\u8eab\u4efd\u8fd0\u884c Shell\uff0c\u4ee5\u53ca sudo(1) \u5b9e\u7528\u7a0b\u5e8f\uff0c\u7528\u4e8e\u5c06\u547d\u4ee4\u4e34\u65f6\u63d0\u6743\u6267\u884c\u3002 \u5e38\u89c1\u7684 setGID \u7a0b\u5e8f\u6709 wall(1) \uff0c\u7528\u4e8e\u5411 tty \u7ec4\u4e0b\u7684\u6240\u6709\u7ec8\u7aef\u53d1\u9001\u6d88\u606f\u3002 setUID \u7279\u6027\u548c setGID \u7279\u6027\u82e5\u4f7f\u7528\u4e0d\u5f53\u53ef\u80fd\u9020\u6210\u5b89\u5168\u9690\u60a3\u3002 \u4fdd\u5b58 set-user-id \u548c \u4fdd\u5b58 set-group-id \u00b6 \u8be5\u8bbe\u8ba1\u7528\u4e8e\u548c setUID \u548c setGID \u7ed3\u5408\u4f7f\u7528\u3002\u5f53\u6267\u884c\u7a0b\u5e8f\u65f6\u4f1a\u53d1\u751f\u4ee5\u4e0b\u4e8b\u4ef6\uff1a \u82e5\u53ef\u6267\u884c\u6587\u4ef6\u7684 setUID \u6216 setGID \u6743\u9650\u5df2\u5f00\u542f\uff0c\u5219\u5c06\u8fdb\u7a0b\u7684\u6709\u6548 UID \u6216\u6709\u6548 GID \u7f6e\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6240\u5c5e\u3002\u82e5\u672a\u8bbe\u7f6e setUID \u6216 setGID \u5219\u4fdd\u6301\u4e0d\u53d8 \u4fdd\u5b58 setUID \u6216 \u4fdd\u5b58 setGID \u7684\u503c\u7531\u6709\u6548 ID \u590d\u5236\u800c\u6765\uff0c\u65e0\u8bba\u7a0b\u5e8f\u662f\u5426\u6307\u5b9a setUID \u6216 setGID \u8be5\u590d\u5236\u90fd\u5c06\u8fdb\u884c\u3002 \u5373\uff1a \u5047\u8bbe\u67d0\u8fdb\u7a0b\u7684\u5b9e\u9645 UID\uff0c\u6709\u6548 UID \u548c setUID \u5747\u4e3a 1000\uff0c\u5f53\u5176\u8fd0\u884c\u4e86 root \u7528\u6237\u62e5\u6709\u7684 setUID \u7a0b\u5e8f\u540e\uff0c\u8fdb\u7a0b\u7684 UID \u5982\u4e0b real = 1000 , effective = 0 , saved = 0 \u8be5\u7279\u6027\u4f7f\u7a0b\u5e8f\u5177\u6709\u4e86\u5728\u62e5\u6709\u7279\u6743\u7684\u7528\u6237\u548c\u4e0d\u5177\u6709\u7279\u6743\u7684\u7528\u6237\u95f4\u6765\u56de\u5207\u6362\u7684\u80fd\u529b\uff0c\u56e0\u4e3a\u5b58\u5728\u8f6c\u6362\u72b6\u6001\u7684 syscall\u3002 \u6587\u4ef6\u7cfb\u7edf UID \u548c GID \u00b6 \u5728 Linux \u4e2d\u6267\u884c\u6253\u5f00\u6587\u4ef6\uff0c\u6539\u53d8\u6587\u4ef6\u6240\u5c5e\uff0c\u4fee\u6539\u6587\u4ef6\u6743\u9650\u4e4b\u7c7b\u7684\u64cd\u4f5c\u65f6\uff0c\u51b3\u5b9a\u6743\u9650\u7684\u65f6\u6587\u4ef6\u7cfb\u7edf UID \u548c\u6587\u4ef6\u7cfb\u7edf GID\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u4fee\u6539\u6709\u6548 UID \u548c \u6709\u6548 GID \u65f6\uff0c\u6587\u4ef6\u7cfb\u7edf UID \u548c\u6587\u4ef6\u7cfb\u7edf GID \u4e5f\u4f1a\u8ddf\u968f\u7ed1\u5b9a\u53d8\u5316\uff0c\u4ec5\u5728\u4f7f\u7528 Linux \u7279\u6709\u7684 setfsuid() \u548c setfsgid() \u65f6\uff0c\u624d\u6709\u6240\u4e0d\u540c\u3002 \u8be5\u8bbe\u8ba1\u662f\u89e3\u51b3\u4e00\u4e9b\u5386\u53f2\u95ee\u9898\u800c\u5b58\u5728\u7684\uff0c\u73b0\u5982\u4eca\u5df2\u7ecf\u51e0\u4e4e\u6ca1\u6709\u5b58\u5728\u4ef7\u503c\u3002\u591a\u6570\u65f6\u5019\u65e0\u9700\u5bf9\u6b64\u8fdb\u884c\u5224\u65ad\u3002 \u8f85\u52a9\u7ec4 ID \u00b6 \u8f85\u52a9\u7ec4 ID \u7528\u4e8e\u6807\u8bc6\u8fdb\u7a0b\u6240\u5c5e\u7684\u82e5\u5e72\u9644\u52a0\u7ec4\u3002 \u83b7\u53d6\u548c\u4fee\u6539\u8fdb\u7a0b\u51ed\u8bc1 \u00b6 Linux \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217 syscall\uff0cSUSv3 \u4ec5\u5bf9\u5176\u4e2d\u4e00\u90e8\u5206\u505a\u4e86\u89c4\u8303\uff0c\u8fd8\u6709\u4e00\u4e9b\u5728 UNIX \u4e2d\u5f97\u5230\u5e7f\u6cdb\u5e94\u7528\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f Linux \u7279\u6709\u7684\u3002 \u53ef\u901a\u8fc7 /proc/PID/status \u68c0\u67e5\u5176\u4e2d\u7684 Uid \uff0c Gid \uff0c Groups \u7684\u68c0\u67e5\u83b7\u53d6\u8fdb\u7a0b\u51ed\u8bc1\u3002 \u83b7\u53d6\u548c\u4fee\u6539\u5b9e\u9645\u3001\u6709\u6548\u548c\u4fdd\u5b58 setUID \u00b6 \u80fd\u5b8c\u6210\u6b64\u64cd\u4f5c\u7684\u7cfb\u7edf\u8c03\u7528\u6709\u591a\u79cd\uff0c\u5176\u4e2d\u6709\u4e9b\u529f\u80fd\u91cd\u53e0\uff0c\u7531\u4e8e\u5176\u6e90\u4e8e\u4e0d\u540c\u7684 UNIX \u5b9e\u73b0\u3002 #include <unistd.h> uid_t getuid ( void ); /* return real user ID of calling process */ uid_t geteuid ( void ); /* return effective user ID of calling process */ gid_t getgid ( void ); gid_t getegid ( void ); getuid() \u548c getgid() \u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684\u5b9e\u9645 UID \u548c GID\uff0c\u800c geteuid() \u548c getegid() \u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684\u6709\u6548 UID \u548c GID\u3002 \u4ee5\u4e0a\u51fd\u6570\u603b\u662f\u6210\u529f\u3002 #include <unistd.h> int setuid ( uid_t uid ); int setgid ( gid_t gid ); \u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u5bf9\u8fdb\u7a0b\u662f\u5426\u5177\u6709\u7279\u6743\uff0c\u89c4\u5219\u5982\u4e0b\uff1a \u82e5\u975e\u7279\u6743\u7528\u6237\u8c03\u7528 setuid() \uff0c\u4ec5\u80fd\u4fee\u6539\u8fdb\u7a0b\u7684\u6709\u6548\u7528\u6237 ID\uff0c\u4e14\u4ec5\u80fd\u5c06\u6709\u6548\u7528\u6237 ID \u4fee\u6539\u4e3a\u76f8\u5e94\u7684\u5b9e\u9645\u7528\u6237 ID \u6216\u4fdd\u5b58 UID\u3002\u5373\u5bf9\u975e\u7279\u6743\u7528\u6237\u800c\u8a00\u4ec5\u5728\u8fd0\u884c setUID \u7a0b\u5e8f\u65f6\u624d\u80fd\u4f7f\u7528\u8be5\u51fd\u6570\u3002 \u5f53\u7279\u6743\u7528\u6237\u7528\u975e 0 \u53c2\u6570\u8c03\u7528 setuid() \u65f6\uff0c\u5b9e\u9645 UID\uff0c\u6709\u6548 UID \u548c\u4fdd\u5b58 UID \u90fd\u5c06\u88ab\u7f6e\u4e3a uid \u53c2\u6570\u6307\u5b9a\u7684\u503c\uff0c\u5373\u7279\u6743\u7528\u6237\u82e5\u8c03\u7528\u8be5\u51fd\u6570\u4fee\u6539\u4e86 UID\uff0c\u5219\u4f1a\u4e22\u5931\u6240\u6709\u7279\u6743\uff0c\u4e14\u4e4b\u540e\u4e5f\u4e0d\u80fd\u4f7f\u7528 setuid() \u5c06\u6743\u9650\u8bbe\u4e3a 0\u3002 \u4f8b\u5982\uff0c\u82e5\u8981\u8ba9 setUID \u7a0b\u5e8f\u653e\u5f03 root \u6743\u9650\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5217\u4ee3\u7801\uff1a if ( setuid ( getuid ()) == -1 ) { errExit ( \"setuid); } \u82e5 setUID \u7684\u7a0b\u5e8f\u5c5e\u4e3b\u975e root \u7528\u6237\uff0c\u5219\u53ef\u4f7f\u7528\u4e0a\u8ff0\u8c03\u7528\u5728\u5b9e\u9645\u7528\u6237 ID \u548c\u4fdd\u5b58 setUID \u95f4\u5207\u6362\u3002 #include <unistd.h> int seteuid ( uid_t euid ); int setegid ( gid_t egid ); \u4f7f\u7528 seteuid() \u548c setegid() \u53ef\u4f7f\u8fdb\u7a0b\u7684\u6709\u6548 UID \u6216 GID \u4fee\u6539\u4e3a\u53c2\u6570 euid \u6216 egid \u6307\u5b9a\u7684\u503c\u3002 \u5176\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u975e\u7279\u6743\u7528\u6237\u4ec5\u80fd\u5c06\u6709\u6548 UID \u548c GID \u4fee\u6539\u4e3a\u76f8\u5e94\u7684\u5b9e\u9645 ID \u6216\u4fdd\u5b58 set ID \u503c\u3002\u5373\u7b49\u6548\u4e8e setuid() \u8c03\u7528\u3002 \u7279\u6743\u7528\u6237\u53ef\u5c06\u6709\u6548 ID \u4fee\u6539\u4e3a\u4efb\u610f\u503c\uff0c\u82e5\u7279\u6743\u8fdb\u7a0b\u5c06\u6709\u6548 UID \u4fee\u6539\u4e3a\u975e\u7279\u6743\uff0c\u5373\u975e 0 \u503c\uff0c\u5219\u5f53\u524d\u8fdb\u7a0b\u4e0d\u518d\u5177\u6709\u7279\u6743\uff0c\u4f46\u53ef\u901a\u8fc7\u89c4\u5219 1 \u6062\u590d\u7279\u6743\u3002 \u5373\uff1a euid = geteuid (); /* Save initial effective UID which is the same as saved setUID */ if ( seteuid ( getuid ()) == -1 ) { /* Drop privileges */ errExit ( \"seteuid\" ); } if ( seteuid ( euid ) == -1 ) { /* Regain privileges */ errExit ( \"seteuid); } #include <unistd.h> int setreuid ( uid_t ruid , uid_t euid ); int setregid ( gid_t rgid , gid_t egid ); \u4ee5\u4e0a\u7cfb\u7edf\u8c03\u7528\u5141\u8bb8\u8c03\u7528\u8fdb\u7a0b\u72ec\u7acb\u4fee\u6539\u5176\u5b9e\u9645\u548c\u6709\u6548 UID \u548c GID\u3002\u5176\u4e2d ruid \u6307\u65b0\u7684\u5b9e\u9645 UID\uff0c euid \u6307\u65b0\u7684\u6709\u6548 UID\u3002\u82e5\u60f3\u53ea\u4fee\u6539\u5176\u4e2d\u4e00\u4e2a\uff0c\u53ef\u5c06\u53e6\u4e00\u53c2\u6570\u6307\u5b9a\u4e3a -1 \u3002 \u89c4\u5219\u5982\u4e0b\uff1a \u975e\u7279\u6743\u8fdb\u7a0b\u53ea\u80fd\u5c06\u5b9e\u9645 UID \u8bbe\u7f6e\u4e3a\u5f53\u524d\u7528\u6237\u7684\u5b9e\u9645 UID (\u5373\u4fdd\u6301\u4e0d\u53d8) \u6216\u6709\u6548 UID \u503c\uff0c\u53ea\u80fd\u5c06\u6709\u6548 UID \u8bbe\u7f6e\u4e3a\u5f53\u524d\u7528\u6237\u7684\u5b9e\u9645 UID\uff0c\u6709\u6548 UID (\u5373\u4fdd\u6301\u4e0d\u53d8)\uff0c\u6216\u4fdd\u5b58 setUID \u7279\u6743\u8fdb\u7a0b\u80fd\u591f\u5c06\u5b9e\u9645 UID \u548c\u6709\u6548 UID \u8bbe\u7f6e\u4e3a\u4efb\u4f55\u503c\u3002 \u65e0\u8bba\u8fdb\u7a0b\u662f\u5426\u62e5\u6709\u7279\u6743\uff0c\u53ea\u8981\u4e0b\u5217\u6761\u4ef6\u6709\u4e00\u6761\u6210\u7acb\uff0c\u5219\u4fdd\u5b58 setUID \u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u6709\u6548 UID \u7684\u503c ruid \u4e0d\u4e3a -1 \uff08\u5373\u5b9e\u9645 UID \u9700\u8981\u6709\u4e00\u4e2a\u8bbe\u7f6e\uff0c\u5373\u4fbf\u662f\u8bbe\u4e3a\u5f53\u524d\u503c) \u5bf9\u6709\u6548 UID \u8bbe\u7f6e\u7684\u503c\u4e0d\u540c\u4e8e\u7cfb\u7edf\u8c03\u7528\u4e4b\u524d\u7684\u5b9e\u9645 UID \u5373\uff0c\u82e5\u8fdb\u7a0b\u4f7f\u7528 setreuid() \u53ea\u5c06\u6709\u6548 UID \u4fee\u6539\u4e3a\u5b9e\u9645 UID \u7684\u5f53\u524d\u503c\uff0c\u5219\u4fdd\u5b58 setUID \u7684\u503c\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002\u540c\u65f6\u7531\u4e8e\u89c4\u5219 3\uff0c\u82e5\u8fdb\u7a0b\u60f3\u653e\u5f03\u7279\u6743\uff0c\u5219\u53ef\u4ee5\u6267\u884c\uff1a setreuid ( getuid (), getuid ()); \u82e5 setUID root \u7684\u8fdb\u7a0b\u9700\u8981\u5c06\u8fdb\u7a0b\u51ed\u8bc1\u6539\u4e3a\u5176\u4ed6\u4efb\u610f\u503c\uff0c\u5219\u9700\u8981\u5148\u4fee\u6539 GID \u540e\u518d\u4fee\u6539 UID\uff0c\u5426\u5219\u7531\u4e8e\u4fee\u6539 UID \u540e\u8fdb\u7a0b\u5df2\u7ecf\u4e27\u5931\u7279\u6743\uff0c\u540e\u7eed\u8c03\u7528 setregid() \u5c06\u7531\u4e8e\u6ca1\u6709\u7279\u6743\u800c\u5931\u8d25\u3002 \u5728\u591a\u6570 UNIX \u5b9e\u73b0\u4e2d\uff0c\u8fdb\u7a0b\u4e0d\u80fd\u76f4\u63a5\u83b7\u53d6\u4fdd\u5b58 setUID \u548c setGID\uff0c\u4f46 Linux \u63d0\u4f9b\u4e86\u4e24\u4e2a\u975e\u6807\u51c6\u7684\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\u8be5\u529f\u80fd\u3002 #define _GNU_SOURCE #include <unistd.h> int getresuid ( uid_t * ruid , uid_t * euid , uid_t * suid ); int getresgid ( gid_t * rgid , uid_t * egid , uid_t * sgid ); \u8be5\u51fd\u6570\u5c06\u5b9e\u9645 UID\uff0c\u6709\u6548 UID \u548c\u4fdd\u5b58 setUID \u8fd4\u56de\u7ed9\u6307\u5b9a 3 \u4e2a\u53c2\u6570\u6240\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u82e5\u6210\u529f\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de -1. #define _GNU_SOURCE #include <unistd.h> int setresuid ( uid_t ruid , uid_t euid , uid_t suid ); int setresgid ( gid_t rgid , gid_t egid , gid_t sgid ); \u4ee5\u4e0a\u7cfb\u7edf\u8c03\u7528\u5141\u8bb8\u8fdb\u7a0b\u72ec\u7acb\u4fee\u6539 3 \u4e2a UID \u7684\u503c\uff0c\u82e5\u4e0d\u60f3\u540c\u65f6\u4fee\u6539\u6240\u6709 ID\uff0c\u5219\u5c06\u5bf9\u5e94\u4e0d\u4fee\u6539\u7684\u5b50\u6bb5\u8bbe\u4e3a -1\u3002 \u8be5\u7cfb\u7edf\u8c03\u7528\u7684\u89c4\u5219\u5982\u4e0b\uff1a \u975e\u7279\u6743\u7528\u6237\u80fd\u591f\u5c06\u5b9e\u9645\u7528\u6237 ID\uff0c\u6709\u6548\u7528\u6237 ID \u548c\u4fdd\u5b58 setUID \u4e2d\u7684\u4efb\u4e00 ID \u8bbe\u7f6e\u4e3a\u5f53\u524d\u503c\u3002 \u7279\u6743\u7528\u6237\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4efb\u4f55\u503c \u4e0d\u7ba1\u7cfb\u7edf\u8c03\u7528\u662f\u5426\u5bf9\u5176\u4ed6 ID \u505a\u4e86\u4efb\u4f55\u6539\u52a8\uff0c\u603b\u662f\u5c06\u6587\u4ef6\u7cfb\u7edf ID \u8bbe\u7f6e\u4e3a\u4e0e\u6709\u6548 ID \u76f8\u540c\u7684\u503c\u3002 \u8be5\u8c03\u7528\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002 #include <sys/fsuid.h> int setfsuid ( uid_t fsuid ); int setfsgid ( gid_t fsgid ); \u4ee5\u4e0a\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u72ec\u7acb\u4fee\u6539\u6587\u4ef6\u7cfb\u7edf ID\u3002\u89c4\u5219\u5982\u4e0b\uff1a \u975e\u7279\u6743\u8fdb\u7a0b\u80fd\u5c06\u6587\u4ef6\u7cfb\u7edf ID \u8bbe\u7f6e\u4e3a\u5b9e\u9645 ID\uff0c\u6709\u6548 ID\uff0c\u6587\u4ef6\u7cfb\u7edf ID (\u5373\u4fdd\u6301\u4e0d\u53d8) \u6216 set ID \u7684\u5f53\u524d\u503c \u7279\u6743\u7528\u6237\u53ef\u4ee5\u8bbe\u5b9a\u4e3a\u4efb\u4f55\u503c \u8be5\u51fd\u6570\u6c38\u8fdc\u6210\u529f\uff0c\u4ed6\u7f3a\u5c11\u9519\u8bef\u68c0\u67e5\uff0c\u51fd\u6570\u8fd4\u56de\u4fee\u6539\u8fc7\u7684\u6587\u4ef6\u7cfb\u7edf ID\uff0c\u5373\u5982\u679c\u5c06\u6587\u4ef6\u7cfb\u7edf ID \u8bbe\u7f6e\u6210\u4e00\u4e2a\u975e\u6cd5\u7684\u503c\uff0c\u4ed6\u4f1a\u8fd4\u56de\u4e4b\u524d\u7684\u6587\u4ef6\u7cfb\u7edf ID\u3002\u7531\u4e8e\u7f3a\u5c11\u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf ID \u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u79cd\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u7cfb\u7edf ID \u7684\u65b9\u6cd5\u3002 #include <unistd.h> int getgroups ( int gidsetsize , gid_t grouplist []); \u8c03\u7528\u7a0b\u5e8f\u9700\u8981\u8d1f\u8d23\u4e3a\u8be5\u7cfb\u7edf\u8c03\u7528\u4e2d\u7684 grouplist[] \u6570\u7ec4\u5206\u914d\u7a7a\u95f4\uff0c\u5e76\u5728 gidsetsize \u4e2d\u6307\u5b9a\u957f\u5ea6\u3002\u82e5\u8c03\u7528\u6210\u529f\uff0c\u51fd\u6570\u8fd4\u56de\u7f6e\u4e8e\u6570\u7ec4\u4e2d\u7684 GID \u6570\u91cf\u3002 \u82e5\u8fdb\u7a0b\u5c5e\u7ec4\u7684\u6570\u91cf\u8d85\u8fc7 gidseisize \uff0c\u5219\u8be5\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u9519\u8bef EINVAL \uff0c grouplist[] \u7684\u5927\u5c0f\u53ef\u5b9a\u4e49\u4e3a\u5e38\u91cf NGROUPS_MAX+1 \uff0c\u8be5\u5e38\u91cf\u5b9a\u4e49\u4e86\u8fdb\u7a0b\u5c5e\u7ec4\u7684\u6700\u5927\u6570\u91cf\uff0c\u5176\u5b9a\u4e49\u5728 limits.h \u4e2d\u3002 gid_t grouplist [ NGROUPS_MAX + 1 ]; \u53e6\u5916\uff0c\u53ef\u5c06 gidsetsize \u6307\u5b9a\u4e3a 0\uff0c\u8fd9\u6837\u4e00\u6765\u6570\u7ec4\u672a\u505a\u4fee\u6539\uff0c\u4f46\u51fd\u6570\u4f1a\u8fd4\u56de\u8fdb\u7a0b\u5c5e\u7ec4\u7684\u6570\u91cf\u3002 #define _BSD_SOURCE #include <grp.h> int setgroups ( size_t gidsetsize , const gid_t * grouplist ); int initgroups ( const char * user , gid_t group ); \u7279\u6743\u7ea7\u5e94\u7528\u53ef\u901a\u8fc7\u4e0a\u8ff0\u7cfb\u7edf\u8c03\u7528\u4fee\u6539\u8f85\u52a9\u7ec4 ID \u96c6\u5408\u3002 setgroups() \u7528 grouplist \u6240\u6307\u6570\u7ec4\u66ff\u6362\u8c03\u7528\u8fdb\u7a0b\u7684\u8f85\u52a9\u7ec4 ID\uff0c gidsetsize \u6307\u5b9a\u4e86\u6570\u7ec4\u4e2d GID \u7684\u6570\u91cf\u3002 initgroups() \u4f1a\u626b\u63cf /etc/groups \u6587\u4ef6\uff0c\u4e3a user \u521b\u5efa\u5c5e\u7ec4\u5217\u8868\uff0c\u4ee5\u6b64\u6765\u521d\u59cb\u5316\u8c03\u7528\u8fdb\u7a0b\u7684\u8f85\u52a9\u7ec4 ID\uff0c\u540c\u65f6\u4e5f\u4f1a\u5c06 group \u53c2\u6570\u6307\u5b9a\u7684\u7ec4\u52a0\u5165\u5230\u8f85\u52a9\u7ec4 ID \u7684\u96c6\u5408\u4e2d\u3002 \u4e60\u9898 \u00b6 9-1 \u00b6 a: real=2000, effective=2000, saved=2000, file-system=2000 b: real=1000, effective=2000, saved=2000, file-system=2000 c: real=1000, effective=2000, saved=0 file-system=2000 d: real=1000, effective=0, saved=0, file-system=2000 e: real=1000, effective=2000, saved=3000, file-system=2000 9-2 \u00b6 \u8be5\u8fdb\u7a0b\u5f53\u524d\u6ca1\u6709\u7279\u6743\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 seteuid() \u7cfb\u7edf\u8c03\u7528\u91cd\u65b0\u83b7\u53d6\u7279\u6743\u3002 9-3 \u00b6 code: c9/initgroups.c \u7531\u4e8e setgroups() \u9700\u8981\u7279\u6743\uff0c\u6b64\u7a0b\u5e8f\u9700\u8981 root \u8fd0\u884c\u3002 \u7a0b\u5e8f\u7684 main() \u5199\u6b7b\u4e86\u5224\u65ad UID=1000\uff0c\u8fd0\u884c\u7a0b\u5e8f\u524d\u786e\u8ba4\u7cfb\u7edf\u4e0a\u5b58\u5728 UID=1000 \u7684\u8d26\u53f7\u3002 9-4 \u00b6 \u53c2\u8003\u4e66\u540e\u7b54\u6848\u3002 e = geteuid (); setuid ( getuid ()); /* Suspend privileges */ setuid ( e ); /* Resume privileges */ /* Can't permanently drop the setUID with setuid() */ seteuid ( getuid ()); /* Suspend privileges */ seteuid ( e ); /* Resume privileges */ /* Can't permanently drop the setUID with seteuid() */ setreuid ( -1 , getuid ()); setreuid ( -1 , e ); setreuid ( getuid (), getuid ()); setresuid ( -1 , getuid (), -1 ); setresuid ( -1 , e , -1 ); setresuid ( getuid (), getuid (), getuid ()); 9-5 \u00b6 \u540c\u53c2\u8003\u4e66\u540e\u7b54\u6848 e = geteuid (); /* Can't suspend and resume privileges with setuid() */ setuid ( getuid ()); seteuid ( getuid ()); /* Suspend privileges */ seteuid ( e ); /* Resume privileges */ /* Can't permanently drop the setUID with seteuid() */ setreuid ( -1 , getuid ()); setreuid ( -1 , e ); setreuid ( getuid (), getuid ()); setresuid ( -1 , getuid (), -1 ); setresuid ( -1 , e , -1 ); setresuid ( getuid (), getuid (), getuid ());","title":"\u7b2c\u4e5d\u7ae0-\u8fdb\u7a0b\u51ed\u8bc1"},{"location":"chap9/#cheaper-9","text":"","title":"Cheaper 9 \u8fdb\u7a0b\u51ed\u8bc1"},{"location":"chap9/#_1","text":"\u7279\u6743\u7ea7\u8fdb\u7a0b: privileged process \u8f85\u52a9\u7ec4: supplementary group","title":"\u8bcd\u6c47\u901f\u67e5"},{"location":"chap9/#_2","text":"**\u6bcf\u4e2a\u8fdb\u7a0b**\u90fd\u6709\u4e00\u5957 UID \u548c GID\uff0c\u8fd9\u4e9b ID \u88ab\u79f0\u4e3a\u8fdb\u7a0b\u51ed\u8bc1\u3002 \u5305\u62ec\u5982\u4e0b\uff1a \u5b9e\u9645\u7528\u6237 ID (real user ID) \u548c \u5b9e\u9645\u7ec4 ID (real group ID) \u6709\u6548\u7528\u6237 ID (effective user ID) \u548c \u6709\u6548\u7ec4 ID (effective group ID) \u4fdd\u5b58\u7684 set-user-id (saved set-user-id) \u548c \u4fdd\u5b58\u7684 set-group-id (saved set-group-id) \u6587\u4ef6\u7cfb\u7edf\u7528\u6237 ID (file-system user ID) \u548c \u6587\u4ef6\u7cfb\u7edf\u7ec4 ID (file-system group id) (\u6b64\u4e3a Linux \u4e13\u6709\u7279\u6027) \u8f85\u52a9\u7ec4 ID","title":"\u7b14\u8bb0"},{"location":"chap9/#uid-gid","text":"\u5b9e\u9645\u7528\u6237\u548c\u7ec4 ID \u5373\u8fdb\u7a0b\u6240\u5c5e\u7684\u7528\u6237\u548c\u7ec4\u3002\u5f53\u7528\u6237\u767b\u5f55\u65f6\uff0c\u767b\u5f55 Shell \u4ece\u5bc6\u7801\u6587\u4ef6\u4e2d\u8bfb\u53d6\u76f8\u5e94\u7684\u7528\u6237\u5bc6\u7801\u8bb0\u5f55\u7684\u7b2c\u4e09\u5b50\u6bb5\u548c\u7b2c\u56db\u5b50\u6bb5 (\u5373 UID \u5b50\u6bb5\u548c GID \u5b50\u6bb5)\uff0c\u7f6e\u4e3a\u5b9e\u9645\u7528\u6237 ID \u548c\u7ec4 ID\u3002\u5f53\u521b\u5efa\u65b0\u8fdb\u7a0b\u65f6\u5c06\u4ece\u7236\u8fdb\u7a0b\u4e2d\u7ee7\u627f\u8be5\u503c\u3002","title":"\u5b9e\u9645 UID \u548c \u5b9e\u9645 GID"},{"location":"chap9/#uid-gid_1","text":"\u5f53\u8fdb\u7a0b\u6267\u884c\u5404\u79cd\u64cd\u4f5c\u65f6\uff0c\u5c06\u7ed3\u5408\u6709\u6548\u7528\u6237 ID\uff0c\u6709\u6548\u7ec4 ID \u548c\u8f85\u52a9\u7ec4 ID \u6765\u5171\u540c\u786e\u5b9a\u8d4b\u4e88\u8fdb\u7a0b\u7684\u6743\u9650\u3002 \u6709\u6548 ID \u4e3a 0 \u7684\u8fdb\u7a0b\u62e5\u6709\u8d85\u7ea7\u7528\u6237\u7684\u6240\u6709\u6743\u9650\uff0c\u8fd9\u79cd\u8fdb\u7a0b\u79f0\u4e3a\u7279\u6743\u7ea7\u8fdb\u7a0b\u3002\u67d0\u4e9b\u7cfb\u7edf\u8c03\u7528\u4ec5\u652f\u6301\u7279\u6743\u7528\u6237\u8fd0\u884c\u3002 \u901a\u5e38\u6709\u6548\u7528\u6237\u548c\u7ec4 ID \u4e0e\u5b9e\u9645\u7528\u6237\u548c\u7ec4 ID \u76f8\u7b49\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 syscall \u6216 set-user-ID \u548c set-group-ID \u6765\u6539\u53d8\u3002","title":"\u6709\u6548 UID \u548c\u6709\u6548 GID"},{"location":"chap9/#set-user-id-set-group-id","text":"set-user-ID (\u5373 setuid) \u5c06\u628a\u8fdb\u7a0b\u7684\u6709\u6548\u7528\u6237 ID \u7f6e\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u7684 UID\uff0c\u4ece\u800c\u83b7\u5f97\u5e38\u89c4\u60c5\u51b5\u4e0b\u4e0d\u5177\u6709\u7684\u6743\u9650\uff0cset-group-ID (\u5373 setGID) \u5c06\u8fdb\u7a0b\u7684\u6709\u6548 GID \u7f6e\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u7684 GID\u3002 \u6bcf\u4e2a\u6587\u4ef6\u90fd\u5177\u6709\u989d\u5916\u7684 setUID \u548c setGID \u4f4d\uff0c\u53ef\u901a\u8fc7 chmod(1) \u6765\u8bbe\u7f6e\u3002\u975e\u7279\u6743\u7528\u6237\u4ec5\u80fd\u5bf9\u7528\u6237\u672c\u8eab\u62e5\u6709\u7684\u7a0b\u5e8f\u8bbe\u7f6e\uff0c\u7279\u6743\u7528\u6237\u6216\u5177\u6709\u7279\u5b9a\u6743\u9650\u7684\u7528\u6237 (CAP_FOWNER) \u80fd\u5bf9\u4efb\u4f55\u6587\u4ef6\u8fdb\u884c\u8bbe\u7f6e\u3002 chmod u+s prog chmod g+s prog \u5728 Linux \u4e2d setUID \u548c setGID \u5bf9 Shell \u811a\u672c\u65e0\u6548\u3002 \u5e38\u89c1\u7684 setUID \u7a0b\u5e8f\u6709 passwd(1) \u7528\u4e8e\u4fee\u6539\u7528\u6237\u5bc6\u7801\uff0c mount(8) \u548c umount(8) \u7528\u4e8e\u6302\u8f7d\u548c\u5378\u8f7d\u6587\u4ef6\u7cfb\u7edf\uff0c su(1) \u5141\u8bb8\u7528\u6237\u4ee5\u53e6\u4e00\u7528\u6237\u7684\u8eab\u4efd\u8fd0\u884c Shell\uff0c\u4ee5\u53ca sudo(1) \u5b9e\u7528\u7a0b\u5e8f\uff0c\u7528\u4e8e\u5c06\u547d\u4ee4\u4e34\u65f6\u63d0\u6743\u6267\u884c\u3002 \u5e38\u89c1\u7684 setGID \u7a0b\u5e8f\u6709 wall(1) \uff0c\u7528\u4e8e\u5411 tty \u7ec4\u4e0b\u7684\u6240\u6709\u7ec8\u7aef\u53d1\u9001\u6d88\u606f\u3002 setUID \u7279\u6027\u548c setGID \u7279\u6027\u82e5\u4f7f\u7528\u4e0d\u5f53\u53ef\u80fd\u9020\u6210\u5b89\u5168\u9690\u60a3\u3002","title":"set-user-id \u548c set-group-id"},{"location":"chap9/#set-user-id-set-group-id_1","text":"\u8be5\u8bbe\u8ba1\u7528\u4e8e\u548c setUID \u548c setGID \u7ed3\u5408\u4f7f\u7528\u3002\u5f53\u6267\u884c\u7a0b\u5e8f\u65f6\u4f1a\u53d1\u751f\u4ee5\u4e0b\u4e8b\u4ef6\uff1a \u82e5\u53ef\u6267\u884c\u6587\u4ef6\u7684 setUID \u6216 setGID \u6743\u9650\u5df2\u5f00\u542f\uff0c\u5219\u5c06\u8fdb\u7a0b\u7684\u6709\u6548 UID \u6216\u6709\u6548 GID \u7f6e\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6240\u5c5e\u3002\u82e5\u672a\u8bbe\u7f6e setUID \u6216 setGID \u5219\u4fdd\u6301\u4e0d\u53d8 \u4fdd\u5b58 setUID \u6216 \u4fdd\u5b58 setGID \u7684\u503c\u7531\u6709\u6548 ID \u590d\u5236\u800c\u6765\uff0c\u65e0\u8bba\u7a0b\u5e8f\u662f\u5426\u6307\u5b9a setUID \u6216 setGID \u8be5\u590d\u5236\u90fd\u5c06\u8fdb\u884c\u3002 \u5373\uff1a \u5047\u8bbe\u67d0\u8fdb\u7a0b\u7684\u5b9e\u9645 UID\uff0c\u6709\u6548 UID \u548c setUID \u5747\u4e3a 1000\uff0c\u5f53\u5176\u8fd0\u884c\u4e86 root \u7528\u6237\u62e5\u6709\u7684 setUID \u7a0b\u5e8f\u540e\uff0c\u8fdb\u7a0b\u7684 UID \u5982\u4e0b real = 1000 , effective = 0 , saved = 0 \u8be5\u7279\u6027\u4f7f\u7a0b\u5e8f\u5177\u6709\u4e86\u5728\u62e5\u6709\u7279\u6743\u7684\u7528\u6237\u548c\u4e0d\u5177\u6709\u7279\u6743\u7684\u7528\u6237\u95f4\u6765\u56de\u5207\u6362\u7684\u80fd\u529b\uff0c\u56e0\u4e3a\u5b58\u5728\u8f6c\u6362\u72b6\u6001\u7684 syscall\u3002","title":"\u4fdd\u5b58 set-user-id \u548c \u4fdd\u5b58 set-group-id"},{"location":"chap9/#uid-gid_2","text":"\u5728 Linux \u4e2d\u6267\u884c\u6253\u5f00\u6587\u4ef6\uff0c\u6539\u53d8\u6587\u4ef6\u6240\u5c5e\uff0c\u4fee\u6539\u6587\u4ef6\u6743\u9650\u4e4b\u7c7b\u7684\u64cd\u4f5c\u65f6\uff0c\u51b3\u5b9a\u6743\u9650\u7684\u65f6\u6587\u4ef6\u7cfb\u7edf UID \u548c\u6587\u4ef6\u7cfb\u7edf GID\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u4fee\u6539\u6709\u6548 UID \u548c \u6709\u6548 GID \u65f6\uff0c\u6587\u4ef6\u7cfb\u7edf UID \u548c\u6587\u4ef6\u7cfb\u7edf GID \u4e5f\u4f1a\u8ddf\u968f\u7ed1\u5b9a\u53d8\u5316\uff0c\u4ec5\u5728\u4f7f\u7528 Linux \u7279\u6709\u7684 setfsuid() \u548c setfsgid() \u65f6\uff0c\u624d\u6709\u6240\u4e0d\u540c\u3002 \u8be5\u8bbe\u8ba1\u662f\u89e3\u51b3\u4e00\u4e9b\u5386\u53f2\u95ee\u9898\u800c\u5b58\u5728\u7684\uff0c\u73b0\u5982\u4eca\u5df2\u7ecf\u51e0\u4e4e\u6ca1\u6709\u5b58\u5728\u4ef7\u503c\u3002\u591a\u6570\u65f6\u5019\u65e0\u9700\u5bf9\u6b64\u8fdb\u884c\u5224\u65ad\u3002","title":"\u6587\u4ef6\u7cfb\u7edf UID \u548c GID"},{"location":"chap9/#id","text":"\u8f85\u52a9\u7ec4 ID \u7528\u4e8e\u6807\u8bc6\u8fdb\u7a0b\u6240\u5c5e\u7684\u82e5\u5e72\u9644\u52a0\u7ec4\u3002","title":"\u8f85\u52a9\u7ec4 ID"},{"location":"chap9/#_3","text":"Linux \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217 syscall\uff0cSUSv3 \u4ec5\u5bf9\u5176\u4e2d\u4e00\u90e8\u5206\u505a\u4e86\u89c4\u8303\uff0c\u8fd8\u6709\u4e00\u4e9b\u5728 UNIX \u4e2d\u5f97\u5230\u5e7f\u6cdb\u5e94\u7528\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f Linux \u7279\u6709\u7684\u3002 \u53ef\u901a\u8fc7 /proc/PID/status \u68c0\u67e5\u5176\u4e2d\u7684 Uid \uff0c Gid \uff0c Groups \u7684\u68c0\u67e5\u83b7\u53d6\u8fdb\u7a0b\u51ed\u8bc1\u3002","title":"\u83b7\u53d6\u548c\u4fee\u6539\u8fdb\u7a0b\u51ed\u8bc1"},{"location":"chap9/#setuid","text":"\u80fd\u5b8c\u6210\u6b64\u64cd\u4f5c\u7684\u7cfb\u7edf\u8c03\u7528\u6709\u591a\u79cd\uff0c\u5176\u4e2d\u6709\u4e9b\u529f\u80fd\u91cd\u53e0\uff0c\u7531\u4e8e\u5176\u6e90\u4e8e\u4e0d\u540c\u7684 UNIX \u5b9e\u73b0\u3002 #include <unistd.h> uid_t getuid ( void ); /* return real user ID of calling process */ uid_t geteuid ( void ); /* return effective user ID of calling process */ gid_t getgid ( void ); gid_t getegid ( void ); getuid() \u548c getgid() \u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684\u5b9e\u9645 UID \u548c GID\uff0c\u800c geteuid() \u548c getegid() \u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684\u6709\u6548 UID \u548c GID\u3002 \u4ee5\u4e0a\u51fd\u6570\u603b\u662f\u6210\u529f\u3002 #include <unistd.h> int setuid ( uid_t uid ); int setgid ( gid_t gid ); \u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u5bf9\u8fdb\u7a0b\u662f\u5426\u5177\u6709\u7279\u6743\uff0c\u89c4\u5219\u5982\u4e0b\uff1a \u82e5\u975e\u7279\u6743\u7528\u6237\u8c03\u7528 setuid() \uff0c\u4ec5\u80fd\u4fee\u6539\u8fdb\u7a0b\u7684\u6709\u6548\u7528\u6237 ID\uff0c\u4e14\u4ec5\u80fd\u5c06\u6709\u6548\u7528\u6237 ID \u4fee\u6539\u4e3a\u76f8\u5e94\u7684\u5b9e\u9645\u7528\u6237 ID \u6216\u4fdd\u5b58 UID\u3002\u5373\u5bf9\u975e\u7279\u6743\u7528\u6237\u800c\u8a00\u4ec5\u5728\u8fd0\u884c setUID \u7a0b\u5e8f\u65f6\u624d\u80fd\u4f7f\u7528\u8be5\u51fd\u6570\u3002 \u5f53\u7279\u6743\u7528\u6237\u7528\u975e 0 \u53c2\u6570\u8c03\u7528 setuid() \u65f6\uff0c\u5b9e\u9645 UID\uff0c\u6709\u6548 UID \u548c\u4fdd\u5b58 UID \u90fd\u5c06\u88ab\u7f6e\u4e3a uid \u53c2\u6570\u6307\u5b9a\u7684\u503c\uff0c\u5373\u7279\u6743\u7528\u6237\u82e5\u8c03\u7528\u8be5\u51fd\u6570\u4fee\u6539\u4e86 UID\uff0c\u5219\u4f1a\u4e22\u5931\u6240\u6709\u7279\u6743\uff0c\u4e14\u4e4b\u540e\u4e5f\u4e0d\u80fd\u4f7f\u7528 setuid() \u5c06\u6743\u9650\u8bbe\u4e3a 0\u3002 \u4f8b\u5982\uff0c\u82e5\u8981\u8ba9 setUID \u7a0b\u5e8f\u653e\u5f03 root \u6743\u9650\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5217\u4ee3\u7801\uff1a if ( setuid ( getuid ()) == -1 ) { errExit ( \"setuid); } \u82e5 setUID \u7684\u7a0b\u5e8f\u5c5e\u4e3b\u975e root \u7528\u6237\uff0c\u5219\u53ef\u4f7f\u7528\u4e0a\u8ff0\u8c03\u7528\u5728\u5b9e\u9645\u7528\u6237 ID \u548c\u4fdd\u5b58 setUID \u95f4\u5207\u6362\u3002 #include <unistd.h> int seteuid ( uid_t euid ); int setegid ( gid_t egid ); \u4f7f\u7528 seteuid() \u548c setegid() \u53ef\u4f7f\u8fdb\u7a0b\u7684\u6709\u6548 UID \u6216 GID \u4fee\u6539\u4e3a\u53c2\u6570 euid \u6216 egid \u6307\u5b9a\u7684\u503c\u3002 \u5176\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u975e\u7279\u6743\u7528\u6237\u4ec5\u80fd\u5c06\u6709\u6548 UID \u548c GID \u4fee\u6539\u4e3a\u76f8\u5e94\u7684\u5b9e\u9645 ID \u6216\u4fdd\u5b58 set ID \u503c\u3002\u5373\u7b49\u6548\u4e8e setuid() \u8c03\u7528\u3002 \u7279\u6743\u7528\u6237\u53ef\u5c06\u6709\u6548 ID \u4fee\u6539\u4e3a\u4efb\u610f\u503c\uff0c\u82e5\u7279\u6743\u8fdb\u7a0b\u5c06\u6709\u6548 UID \u4fee\u6539\u4e3a\u975e\u7279\u6743\uff0c\u5373\u975e 0 \u503c\uff0c\u5219\u5f53\u524d\u8fdb\u7a0b\u4e0d\u518d\u5177\u6709\u7279\u6743\uff0c\u4f46\u53ef\u901a\u8fc7\u89c4\u5219 1 \u6062\u590d\u7279\u6743\u3002 \u5373\uff1a euid = geteuid (); /* Save initial effective UID which is the same as saved setUID */ if ( seteuid ( getuid ()) == -1 ) { /* Drop privileges */ errExit ( \"seteuid\" ); } if ( seteuid ( euid ) == -1 ) { /* Regain privileges */ errExit ( \"seteuid); } #include <unistd.h> int setreuid ( uid_t ruid , uid_t euid ); int setregid ( gid_t rgid , gid_t egid ); \u4ee5\u4e0a\u7cfb\u7edf\u8c03\u7528\u5141\u8bb8\u8c03\u7528\u8fdb\u7a0b\u72ec\u7acb\u4fee\u6539\u5176\u5b9e\u9645\u548c\u6709\u6548 UID \u548c GID\u3002\u5176\u4e2d ruid \u6307\u65b0\u7684\u5b9e\u9645 UID\uff0c euid \u6307\u65b0\u7684\u6709\u6548 UID\u3002\u82e5\u60f3\u53ea\u4fee\u6539\u5176\u4e2d\u4e00\u4e2a\uff0c\u53ef\u5c06\u53e6\u4e00\u53c2\u6570\u6307\u5b9a\u4e3a -1 \u3002 \u89c4\u5219\u5982\u4e0b\uff1a \u975e\u7279\u6743\u8fdb\u7a0b\u53ea\u80fd\u5c06\u5b9e\u9645 UID \u8bbe\u7f6e\u4e3a\u5f53\u524d\u7528\u6237\u7684\u5b9e\u9645 UID (\u5373\u4fdd\u6301\u4e0d\u53d8) \u6216\u6709\u6548 UID \u503c\uff0c\u53ea\u80fd\u5c06\u6709\u6548 UID \u8bbe\u7f6e\u4e3a\u5f53\u524d\u7528\u6237\u7684\u5b9e\u9645 UID\uff0c\u6709\u6548 UID (\u5373\u4fdd\u6301\u4e0d\u53d8)\uff0c\u6216\u4fdd\u5b58 setUID \u7279\u6743\u8fdb\u7a0b\u80fd\u591f\u5c06\u5b9e\u9645 UID \u548c\u6709\u6548 UID \u8bbe\u7f6e\u4e3a\u4efb\u4f55\u503c\u3002 \u65e0\u8bba\u8fdb\u7a0b\u662f\u5426\u62e5\u6709\u7279\u6743\uff0c\u53ea\u8981\u4e0b\u5217\u6761\u4ef6\u6709\u4e00\u6761\u6210\u7acb\uff0c\u5219\u4fdd\u5b58 setUID \u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u6709\u6548 UID \u7684\u503c ruid \u4e0d\u4e3a -1 \uff08\u5373\u5b9e\u9645 UID \u9700\u8981\u6709\u4e00\u4e2a\u8bbe\u7f6e\uff0c\u5373\u4fbf\u662f\u8bbe\u4e3a\u5f53\u524d\u503c) \u5bf9\u6709\u6548 UID \u8bbe\u7f6e\u7684\u503c\u4e0d\u540c\u4e8e\u7cfb\u7edf\u8c03\u7528\u4e4b\u524d\u7684\u5b9e\u9645 UID \u5373\uff0c\u82e5\u8fdb\u7a0b\u4f7f\u7528 setreuid() \u53ea\u5c06\u6709\u6548 UID \u4fee\u6539\u4e3a\u5b9e\u9645 UID \u7684\u5f53\u524d\u503c\uff0c\u5219\u4fdd\u5b58 setUID \u7684\u503c\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002\u540c\u65f6\u7531\u4e8e\u89c4\u5219 3\uff0c\u82e5\u8fdb\u7a0b\u60f3\u653e\u5f03\u7279\u6743\uff0c\u5219\u53ef\u4ee5\u6267\u884c\uff1a setreuid ( getuid (), getuid ()); \u82e5 setUID root \u7684\u8fdb\u7a0b\u9700\u8981\u5c06\u8fdb\u7a0b\u51ed\u8bc1\u6539\u4e3a\u5176\u4ed6\u4efb\u610f\u503c\uff0c\u5219\u9700\u8981\u5148\u4fee\u6539 GID \u540e\u518d\u4fee\u6539 UID\uff0c\u5426\u5219\u7531\u4e8e\u4fee\u6539 UID \u540e\u8fdb\u7a0b\u5df2\u7ecf\u4e27\u5931\u7279\u6743\uff0c\u540e\u7eed\u8c03\u7528 setregid() \u5c06\u7531\u4e8e\u6ca1\u6709\u7279\u6743\u800c\u5931\u8d25\u3002 \u5728\u591a\u6570 UNIX \u5b9e\u73b0\u4e2d\uff0c\u8fdb\u7a0b\u4e0d\u80fd\u76f4\u63a5\u83b7\u53d6\u4fdd\u5b58 setUID \u548c setGID\uff0c\u4f46 Linux \u63d0\u4f9b\u4e86\u4e24\u4e2a\u975e\u6807\u51c6\u7684\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\u8be5\u529f\u80fd\u3002 #define _GNU_SOURCE #include <unistd.h> int getresuid ( uid_t * ruid , uid_t * euid , uid_t * suid ); int getresgid ( gid_t * rgid , uid_t * egid , uid_t * sgid ); \u8be5\u51fd\u6570\u5c06\u5b9e\u9645 UID\uff0c\u6709\u6548 UID \u548c\u4fdd\u5b58 setUID \u8fd4\u56de\u7ed9\u6307\u5b9a 3 \u4e2a\u53c2\u6570\u6240\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u82e5\u6210\u529f\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de -1. #define _GNU_SOURCE #include <unistd.h> int setresuid ( uid_t ruid , uid_t euid , uid_t suid ); int setresgid ( gid_t rgid , gid_t egid , gid_t sgid ); \u4ee5\u4e0a\u7cfb\u7edf\u8c03\u7528\u5141\u8bb8\u8fdb\u7a0b\u72ec\u7acb\u4fee\u6539 3 \u4e2a UID \u7684\u503c\uff0c\u82e5\u4e0d\u60f3\u540c\u65f6\u4fee\u6539\u6240\u6709 ID\uff0c\u5219\u5c06\u5bf9\u5e94\u4e0d\u4fee\u6539\u7684\u5b50\u6bb5\u8bbe\u4e3a -1\u3002 \u8be5\u7cfb\u7edf\u8c03\u7528\u7684\u89c4\u5219\u5982\u4e0b\uff1a \u975e\u7279\u6743\u7528\u6237\u80fd\u591f\u5c06\u5b9e\u9645\u7528\u6237 ID\uff0c\u6709\u6548\u7528\u6237 ID \u548c\u4fdd\u5b58 setUID \u4e2d\u7684\u4efb\u4e00 ID \u8bbe\u7f6e\u4e3a\u5f53\u524d\u503c\u3002 \u7279\u6743\u7528\u6237\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4efb\u4f55\u503c \u4e0d\u7ba1\u7cfb\u7edf\u8c03\u7528\u662f\u5426\u5bf9\u5176\u4ed6 ID \u505a\u4e86\u4efb\u4f55\u6539\u52a8\uff0c\u603b\u662f\u5c06\u6587\u4ef6\u7cfb\u7edf ID \u8bbe\u7f6e\u4e3a\u4e0e\u6709\u6548 ID \u76f8\u540c\u7684\u503c\u3002 \u8be5\u8c03\u7528\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002 #include <sys/fsuid.h> int setfsuid ( uid_t fsuid ); int setfsgid ( gid_t fsgid ); \u4ee5\u4e0a\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u72ec\u7acb\u4fee\u6539\u6587\u4ef6\u7cfb\u7edf ID\u3002\u89c4\u5219\u5982\u4e0b\uff1a \u975e\u7279\u6743\u8fdb\u7a0b\u80fd\u5c06\u6587\u4ef6\u7cfb\u7edf ID \u8bbe\u7f6e\u4e3a\u5b9e\u9645 ID\uff0c\u6709\u6548 ID\uff0c\u6587\u4ef6\u7cfb\u7edf ID (\u5373\u4fdd\u6301\u4e0d\u53d8) \u6216 set ID \u7684\u5f53\u524d\u503c \u7279\u6743\u7528\u6237\u53ef\u4ee5\u8bbe\u5b9a\u4e3a\u4efb\u4f55\u503c \u8be5\u51fd\u6570\u6c38\u8fdc\u6210\u529f\uff0c\u4ed6\u7f3a\u5c11\u9519\u8bef\u68c0\u67e5\uff0c\u51fd\u6570\u8fd4\u56de\u4fee\u6539\u8fc7\u7684\u6587\u4ef6\u7cfb\u7edf ID\uff0c\u5373\u5982\u679c\u5c06\u6587\u4ef6\u7cfb\u7edf ID \u8bbe\u7f6e\u6210\u4e00\u4e2a\u975e\u6cd5\u7684\u503c\uff0c\u4ed6\u4f1a\u8fd4\u56de\u4e4b\u524d\u7684\u6587\u4ef6\u7cfb\u7edf ID\u3002\u7531\u4e8e\u7f3a\u5c11\u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf ID \u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u79cd\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u7cfb\u7edf ID \u7684\u65b9\u6cd5\u3002 #include <unistd.h> int getgroups ( int gidsetsize , gid_t grouplist []); \u8c03\u7528\u7a0b\u5e8f\u9700\u8981\u8d1f\u8d23\u4e3a\u8be5\u7cfb\u7edf\u8c03\u7528\u4e2d\u7684 grouplist[] \u6570\u7ec4\u5206\u914d\u7a7a\u95f4\uff0c\u5e76\u5728 gidsetsize \u4e2d\u6307\u5b9a\u957f\u5ea6\u3002\u82e5\u8c03\u7528\u6210\u529f\uff0c\u51fd\u6570\u8fd4\u56de\u7f6e\u4e8e\u6570\u7ec4\u4e2d\u7684 GID \u6570\u91cf\u3002 \u82e5\u8fdb\u7a0b\u5c5e\u7ec4\u7684\u6570\u91cf\u8d85\u8fc7 gidseisize \uff0c\u5219\u8be5\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u9519\u8bef EINVAL \uff0c grouplist[] \u7684\u5927\u5c0f\u53ef\u5b9a\u4e49\u4e3a\u5e38\u91cf NGROUPS_MAX+1 \uff0c\u8be5\u5e38\u91cf\u5b9a\u4e49\u4e86\u8fdb\u7a0b\u5c5e\u7ec4\u7684\u6700\u5927\u6570\u91cf\uff0c\u5176\u5b9a\u4e49\u5728 limits.h \u4e2d\u3002 gid_t grouplist [ NGROUPS_MAX + 1 ]; \u53e6\u5916\uff0c\u53ef\u5c06 gidsetsize \u6307\u5b9a\u4e3a 0\uff0c\u8fd9\u6837\u4e00\u6765\u6570\u7ec4\u672a\u505a\u4fee\u6539\uff0c\u4f46\u51fd\u6570\u4f1a\u8fd4\u56de\u8fdb\u7a0b\u5c5e\u7ec4\u7684\u6570\u91cf\u3002 #define _BSD_SOURCE #include <grp.h> int setgroups ( size_t gidsetsize , const gid_t * grouplist ); int initgroups ( const char * user , gid_t group ); \u7279\u6743\u7ea7\u5e94\u7528\u53ef\u901a\u8fc7\u4e0a\u8ff0\u7cfb\u7edf\u8c03\u7528\u4fee\u6539\u8f85\u52a9\u7ec4 ID \u96c6\u5408\u3002 setgroups() \u7528 grouplist \u6240\u6307\u6570\u7ec4\u66ff\u6362\u8c03\u7528\u8fdb\u7a0b\u7684\u8f85\u52a9\u7ec4 ID\uff0c gidsetsize \u6307\u5b9a\u4e86\u6570\u7ec4\u4e2d GID \u7684\u6570\u91cf\u3002 initgroups() \u4f1a\u626b\u63cf /etc/groups \u6587\u4ef6\uff0c\u4e3a user \u521b\u5efa\u5c5e\u7ec4\u5217\u8868\uff0c\u4ee5\u6b64\u6765\u521d\u59cb\u5316\u8c03\u7528\u8fdb\u7a0b\u7684\u8f85\u52a9\u7ec4 ID\uff0c\u540c\u65f6\u4e5f\u4f1a\u5c06 group \u53c2\u6570\u6307\u5b9a\u7684\u7ec4\u52a0\u5165\u5230\u8f85\u52a9\u7ec4 ID \u7684\u96c6\u5408\u4e2d\u3002","title":"\u83b7\u53d6\u548c\u4fee\u6539\u5b9e\u9645\u3001\u6709\u6548\u548c\u4fdd\u5b58 setUID"},{"location":"chap9/#_4","text":"","title":"\u4e60\u9898"},{"location":"chap9/#9-1","text":"a: real=2000, effective=2000, saved=2000, file-system=2000 b: real=1000, effective=2000, saved=2000, file-system=2000 c: real=1000, effective=2000, saved=0 file-system=2000 d: real=1000, effective=0, saved=0, file-system=2000 e: real=1000, effective=2000, saved=3000, file-system=2000","title":"9-1"},{"location":"chap9/#9-2","text":"\u8be5\u8fdb\u7a0b\u5f53\u524d\u6ca1\u6709\u7279\u6743\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 seteuid() \u7cfb\u7edf\u8c03\u7528\u91cd\u65b0\u83b7\u53d6\u7279\u6743\u3002","title":"9-2"},{"location":"chap9/#9-3","text":"code: c9/initgroups.c \u7531\u4e8e setgroups() \u9700\u8981\u7279\u6743\uff0c\u6b64\u7a0b\u5e8f\u9700\u8981 root \u8fd0\u884c\u3002 \u7a0b\u5e8f\u7684 main() \u5199\u6b7b\u4e86\u5224\u65ad UID=1000\uff0c\u8fd0\u884c\u7a0b\u5e8f\u524d\u786e\u8ba4\u7cfb\u7edf\u4e0a\u5b58\u5728 UID=1000 \u7684\u8d26\u53f7\u3002","title":"9-3"},{"location":"chap9/#9-4","text":"\u53c2\u8003\u4e66\u540e\u7b54\u6848\u3002 e = geteuid (); setuid ( getuid ()); /* Suspend privileges */ setuid ( e ); /* Resume privileges */ /* Can't permanently drop the setUID with setuid() */ seteuid ( getuid ()); /* Suspend privileges */ seteuid ( e ); /* Resume privileges */ /* Can't permanently drop the setUID with seteuid() */ setreuid ( -1 , getuid ()); setreuid ( -1 , e ); setreuid ( getuid (), getuid ()); setresuid ( -1 , getuid (), -1 ); setresuid ( -1 , e , -1 ); setresuid ( getuid (), getuid (), getuid ());","title":"9-4"},{"location":"chap9/#9-5","text":"\u540c\u53c2\u8003\u4e66\u540e\u7b54\u6848 e = geteuid (); /* Can't suspend and resume privileges with setuid() */ setuid ( getuid ()); seteuid ( getuid ()); /* Suspend privileges */ seteuid ( e ); /* Resume privileges */ /* Can't permanently drop the setUID with seteuid() */ setreuid ( -1 , getuid ()); setreuid ( -1 , e ); setreuid ( getuid (), getuid ()); setresuid ( -1 , getuid (), -1 ); setresuid ( -1 , e , -1 ); setresuid ( getuid (), getuid (), getuid ());","title":"9-5"},{"location":"environment-preparing/","text":"The environment what I use is: Ubuntu 22.04 LTS (GCC 11.2 with GLIBC 2.35) macOS 12.3.1 (Apple clang 12.0.5) CentOS 6.10 (RedHat GCC 4.4.7 with GLIBC 2.12) The source code which come from upstream is not being included, for the author is not provided a Git repository, and the code is still being actively update. you should download it from the author's website by yourself. wget https://man7.org/tlpi/code/download/tlpi-220505-dist.tar.gz tar -xf tlpi-220505-dist.tar.gz && rm -rf tlpi-220505-dist.tar.gz and I also provide a Python scripts for automatically get this job done. You need to unarchive it in UNIX-Like system since there's some symbolic link, and I also use symbolic link to link the lib folder to my source code. and also, you should compile and run these code in Linux, for these code is the LINUX PROGRAMMING, of course. Download the source code from author's website. According to the README file, we need to install some header file package. For Debian and Ubuntu, run: sudo apt install build-essential libcap-dev libacl1-dev libselinux1-dev libseccomp-dev gcc-multilib For CentOS, run: sudo yum install libcap-devel libacl-devel libselinux-devel libseccomp-devel \"@Development tools\" Then try to compile the source code which from the author. cd tlpi-dist make all If success, you are ready to go. The source code what I've written is placed at src/ , and all the source file appeared in the note will use src/ as the root directory.","title":"\u73af\u5883"}]}